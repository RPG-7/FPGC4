10010000000000000000000000001100 //Jump to constant address 6
10010000000000000000110001000010 //Jump to constant address 1569
10010000000000000000110001110000 //Jump to constant address 1592
10010000000000000000110010011110 //Jump to constant address 1615
10010000000000000000110011001100 //Jump to constant address 1638
00000000000000000000011010001110 //Length of program
01110000000000000000000000001111 //Set rsp to 0
01110000000001110000000100001111 //Set highest 16 bits of rsp to 112
01110000000000001110000000000001 //Set r1 to 14
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000000101101111100 //Jump to constant address 1470
11111111111111111111111111111111 //Halt
01110010011000101110000000000010 //Set r2 to 9774
01110000000011000000000100000010 //Set highest 16 bits of r2 to 192
11010000000000000000001000010000 //Write value in r1 to address in r2 with offset 0
11111111111111111111111111111111 //Halt
00000000000000000000000001101000 //data
00000000000000000000000001100001 //data
00000000000000000000000001101100 //data
00000000000000000000000001101100 //data
00000000000000000000000001101111 //data
00000000000000000000000000000000 //data
00000000000000000000000001000100 //data
00000000000000000000000001000101 //data
00000000000000000000000001010010 //data
00000000000000000000000001010000 //data
00000000000000000000000001011001 //data
00000000000000000000000001000101 //data
00000000000000000000000001000101 //data
00000000000000000000000001010100 //data
00000000000000000000000000000000 //data
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
01110001010000100000000000001010 //Set r10 to 5152
01110000000011000000000100001010 //Set highest 16 bits of r10 to 192
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000101000000110 //Compute r10 OR r0 and write result to r6
00000000000000000000010100000111 //Compute r5 OR r0 and write result to r7
00000001100000000000001101100110 //Compute r3 + r6 and write result to r6
11100000000000000000011100001001 //Read at address in r7 with offset 0 to r9
11010000000000000000011010010000 //Write value in r9 to address in r6 with offset 0
11010000100000000000011000100000 //Write value in r2 to address in r6 with offset 2048
00001001100000000001011000000110 //Compute r6 + 1 and write result to r6
00001001100000000001011100000111 //Compute r7 + 1 and write result to r7
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00110000000000000010000101000000 //If r1 >= r4, then jump to offset 2
10010000000000000000000001110110 //Jump to constant address 59
10100000000000000000000000001010 //Pop from stack to r10
10100000000000000000000000001001 //Pop from stack to r9
10100000000000000000000000001000 //Pop from stack to r8
10100000000000000000000000000111 //Pop from stack to r7
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
01110000010000100000000000001010 //Set r10 to 1056
01110000000011000000000100001010 //Set highest 16 bits of r10 to 192
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000101000000110 //Compute r10 OR r0 and write result to r6
00000000000000000000010100000111 //Compute r5 OR r0 and write result to r7
00000001100000000000001101100110 //Compute r3 + r6 and write result to r6
11100000000000000000011100001001 //Read at address in r7 with offset 0 to r9
11010000000000000000011010010000 //Write value in r9 to address in r6 with offset 0
11010000100000000000011000100000 //Write value in r2 to address in r6 with offset 2048
00001001100000000001011000000110 //Compute r6 + 1 and write result to r6
00001001100000000001011100000111 //Compute r7 + 1 and write result to r7
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00110000000000000010000101000000 //If r1 >= r4, then jump to offset 2
10010000000000000000000010111110 //Jump to constant address 95
10100000000000000000000000001010 //Pop from stack to r10
10100000000000000000000000001001 //Pop from stack to r9
10100000000000000000000000001000 //Pop from stack to r8
10100000000000000000000000000111 //Pop from stack to r7
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000001100000 //Push r6 to stack
01110000000000000000000000000010 //Set r2 to 0
01110000000011000000000100000010 //Set highest 16 bits of r2 to 192
01110000000000000000000000000011 //Set r3 to 0
01110000010000000000000000000100 //Set r4 to 1024
00000000000000000000001000000001 //Compute r2 OR r0 and write result to r1
00001001100000000100010100000110 //Compute r5 + 4 and write result to r6
11000000000000000000011000010000 //Copy from address in r6 to address in r1 with offset 0
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00001001100000000001011000000110 //Compute r6 + 1 and write result to r6
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
01100000000000000010001101000000 //If r3 == r4, then jump to offset 2
10010000000000000000000100000100 //Jump to constant address 130
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000001100000 //Push r6 to stack
01110000010000000000000000000010 //Set r2 to 1024
01110000000011000000000100000010 //Set highest 16 bits of r2 to 192
01110000000000000000000000000011 //Set r3 to 0
01110000000000100000000000000100 //Set r4 to 32
00000000000000000000001000000001 //Compute r2 OR r0 and write result to r1
00001001100000000100010100000110 //Compute r5 + 4 and write result to r6
11000000000000000000011000010000 //Copy from address in r6 to address in r1 with offset 0
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00001001100000000001011000000110 //Compute r6 + 1 and write result to r6
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
01100000000000000010001101000000 //If r3 == r4, then jump to offset 2
10010000000000000000000101000100 //Jump to constant address 162
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
01110000010000100000000000000001 //Set r1 to 1056
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
01110000000000000000000000000011 //Set r3 to 0
01110000100000000000000000000100 //Set r4 to 2048
00000000000000000000000100000101 //Compute r1 OR r0 and write result to r5
11010000000000000000010100000000 //Write value in r0 to address in r5 with offset 0
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
01100000000000000010001101000000 //If r3 == r4, then jump to offset 2
10010000000000000000000110000010 //Jump to constant address 193
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
01110000110000100000000000000001 //Set r1 to 3104
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
01110000000000000000000000000011 //Set r3 to 0
01110000100000000000000000000100 //Set r4 to 2048
00000000000000000000000100000101 //Compute r1 OR r0 and write result to r5
11010000000000000000010100000000 //Write value in r0 to address in r5 with offset 0
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
01100000000000000010001101000000 //If r3 == r4, then jump to offset 2
10010000000000000000000110111110 //Jump to constant address 223
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
01110001010000100000000000000001 //Set r1 to 5152
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
01110000000000000000000000000011 //Set r3 to 0
01110000011110000000000000000100 //Set r4 to 1920
00000000000000000000000100000101 //Compute r1 OR r0 and write result to r5
11010000000000000000010100000000 //Write value in r0 to address in r5 with offset 0
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
01100000000000000010001101000000 //If r3 == r4, then jump to offset 2
10010000000000000000000111111010 //Jump to constant address 253
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
01110001110000100000000000000001 //Set r1 to 7200
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
01110000000000000000000000000011 //Set r3 to 0
01110000011110000000000000000100 //Set r4 to 1920
00000000000000000000000100000101 //Compute r1 OR r0 and write result to r5
11010000000000000000010100000000 //Write value in r0 to address in r5 with offset 0
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
01100000000000000010001101000000 //If r3 == r4, then jump to offset 2
10010000000000000000001000110110 //Jump to constant address 283
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
01110010011000110010000000000001 //Set r1 to 9778
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
01110000000000000000000000000011 //Set r3 to 0
01110000000001000000000000000100 //Set r4 to 64
00000000000000000000000100000101 //Compute r1 OR r0 and write result to r5
11010000000000000000010100000000 //Write value in r0 to address in r5 with offset 0
11010000000000000001010100000000 //Write value in r0 to address in r5 with offset 1
11010000000000000010010100000000 //Write value in r0 to address in r5 with offset 2
11010000000000000011010100000000 //Write value in r0 to address in r5 with offset 3
00001001100000000100010100000101 //Compute r5 + 4 and write result to r5
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
01100000000000000010001101000000 //If r3 == r4, then jump to offset 2
10010000000000000000001001110010 //Jump to constant address 313
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
01110010010000100000000000000001 //Set r1 to 9248
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11010000000000000000000100000000 //Write value in r0 to address in r1 with offset 0
11010000000000000001000100000000 //Write value in r0 to address in r1 with offset 1
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000010110011000000000001 //Set r1 to 179
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000011010001000000000001 //Set r1 to 209
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000011101111000000000001 //Set r1 to 239
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000100001101000000000001 //Set r1 to 269
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000100101011000000000001 //Set r1 to 299
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000101001100000000000001 //Set r1 to 332
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
00000000000000001111111111111111 //data
00000011000000000000000000011101 //data
00000000000000000000000011100000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00111111111111001100000000000011 //data
11001100001100111100000000000011 //data
11001111111100111100001111000011 //data
11000000000000110011111111111100 //data
00111111111111001111111111111111 //data
11110011110011111111111111111111 //data
11110000000011111111110000111111 //data
11111111111111110011111111111100 //data
00111100111100001111111111111100 //data
11111111111111001111111111111100 //data
00111111111100000000111111000000 //data
00000011000000000000000000000000 //data
00000011000000000000111111000000 //data
00111111111100001111111111111100 //data
00111111111100000000111111000000 //data
00000011000000000000000000000000 //data
00001111110000000011111111110000 //data
00001111110000001111111111111100 //data
11111111111111001111001100111100 //data
00000011000000000000111111000000 //data
00000011000000000000001100000000 //data
00001111110000000011111111110000 //data
11111111111111000011111111110000 //data
00000011000000000000111111000000 //data
00000000000000000000000000000000 //data
00000011110000000000111111110000 //data
00001111111100000000001111000000 //data
00000000000000000000000000000000 //data
11111111111111111111111111111111 //data
11111100001111111111000000001111 //data
11110000000011111111110000111111 //data
11111111111111111111111111111111 //data
00000000000000000000111111110000 //data
00111100001111000011000000001100 //data
00110000000011000011110000111100 //data
00001111111100000000000000000000 //data
11111111111111111111000000001111 //data
11000011110000111100111111110011 //data
11001111111100111100001111000011 //data
11110000000011111111111111111111 //data
00000000111111110000000000111111 //data
00000000111111110011111111110011 //data
11110000111100001111000011110000 //data
11110000111100000011111111000000 //data
00001111111100000011110000111100 //data
00111100001111000011110000111100 //data
00001111111100000000001111000000 //data
00111111111111000000001111000000 //data
00001111111111110000111100001111 //data
00001111111111110000111100000000 //data
00001111000000000011111100000000 //data
11111111000000001111110000000000 //data
00111111111111110011110000001111 //data
00111111111111110011110000001111 //data
00111100000011110011110000111111 //data
11111100001111001111000000000000 //data
00000011110000001111001111001111 //data
00001111111100001111110000111111 //data
11111100001111110000111111110000 //data
11110011110011110000001111000000 //data
11000000000000001111110000000000 //data
11111111110000001111111111111100 //data
11111111110000001111110000000000 //data
11000000000000000000000000000000 //data
00000000000011000000000011111100 //data
00001111111111001111111111111100 //data
00001111111111000000000011111100 //data
00000000000011000000000000000000 //data
00000011110000000000111111110000 //data
00111111111111000000001111000000 //data
00000011110000000011111111111100 //data
00001111111100000000001111000000 //data
00111100001111000011110000111100 //data
00111100001111000011110000111100 //data
00111100001111000000000000000000 //data
00111100001111000000000000000000 //data
00111111111111111111001111001111 //data
11110011110011110011111111001111 //data
00000011110011110000001111001111 //data
00000011110011110000000000000000 //data
00001111111111000011110000001111 //data
00001111110000000011110011110000 //data
00111100111100000000111111000000 //data
11110000111100000011111111000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00111111111111000011111111111100 //data
00111111111111000000000000000000 //data
00000011110000000000111111110000 //data
00111111111111000000001111000000 //data
00111111111111000000111111110000 //data
00000011110000001111111111111111 //data
00000011110000000000111111110000 //data
00111111111111000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000000000000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00111111111111000000111111110000 //data
00000011110000000000000000000000 //data
00000000000000000000001111000000 //data
00000000111100001111111111111100 //data
00000000111100000000001111000000 //data
00000000000000000000000000000000 //data
00000000000000000000111100000000 //data
00111100000000001111111111111100 //data
00111100000000000000111100000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
11110000000000001111000000000000 //data
11110000000000001111111111111100 //data
00000000000000000000000000000000 //data
00000000000000000000110000110000 //data
00111100001111001111111111111111 //data
00111100001111000000110000110000 //data
00000000000000000000000000000000 //data
00000000000000000000001111000000 //data
00001111111100000011111111111100 //data
11111111111111111111111111111111 //data
00000000000000000000000000000000 //data
00000000000000001111111111111111 //data
11111111111111110011111111111100 //data
00001111111100000000001111000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00001111000000000011111111000000 //data
00111111110000000000111100000000 //data
00001111000000000000000000000000 //data
00001111000000000000000000000000 //data
00111100111100000011110011110000 //data
00111100111100000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00111100111100000011110011110000 //data
11111111111111000011110011110000 //data
11111111111111000011110011110000 //data
00111100111100000000000000000000 //data
00001111000000000011111111110000 //data
11110000000000000011111111000000 //data
00000000111100001111111111000000 //data
00001111000000000000000000000000 //data
00000000000000001111000000111100 //data
11110000111100000000001111000000 //data
00001111000000000011110000111100 //data
11110000001111000000000000000000 //data
00001111110000000011110011110000 //data
00001111110000000011111100111100 //data
11110011111100001111000011110000 //data
00111111001111000000000000000000 //data
00111100000000000011110000000000 //data
11110000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000011110000000000111100000000 //data
00111100000000000011110000000000 //data
00111100000000000000111100000000 //data
00000011110000000000000000000000 //data
00111100000000000000111100000000 //data
00000011110000000000001111000000 //data
00000011110000000000111100000000 //data
00111100000000000000000000000000 //data
00000000000000000011110000111100 //data
00001111111100001111111111111111 //data
00001111111100000011110000111100 //data
00000000000000000000000000000000 //data
00000000000000000000111100000000 //data
00001111000000001111111111110000 //data
00001111000000000000111100000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000111100000000 //data
00001111000000000011110000000000 //data
00000000000000000000000000000000 //data
00000000000000001111111111110000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000111100000000 //data
00001111000000000000000000000000 //data
00000000001111000000000011110000 //data
00000011110000000000111100000000 //data
00111100000000001111000000000000 //data
11000000000000000000000000000000 //data
00111111111100001111000000111100 //data
11110000111111001111001111111100 //data
11111111001111001111110000111100 //data
00111111111100000000000000000000 //data
00001111000000000011111100000000 //data
00001111000000000000111100000000 //data
00001111000000000000111100000000 //data
11111111111100000000000000000000 //data
00111111110000001111000011110000 //data
00000000111100000000111111000000 //data
00111100000000001111000011110000 //data
11111111111100000000000000000000 //data
00111111110000001111000011110000 //data
00000000111100000000111111000000 //data
00000000111100001111000011110000 //data
00111111110000000000000000000000 //data
00000011111100000000111111110000 //data
00111100111100001111000011110000 //data
11111111111111000000000011110000 //data
00000011111111000000000000000000 //data
11111111111100001111000000000000 //data
11111111110000000000000011110000 //data
00000000111100001111000011110000 //data
00111111110000000000000000000000 //data
00001111110000000011110000000000 //data
11110000000000001111111111000000 //data
11110000111100001111000011110000 //data
00111111110000000000000000000000 //data
11111111111100001111000011110000 //data
00000000111100000000001111000000 //data
00001111000000000000111100000000 //data
00001111000000000000000000000000 //data
00111111110000001111000011110000 //data
11110000111100000011111111000000 //data
11110000111100001111000011110000 //data
00111111110000000000000000000000 //data
00111111110000001111000011110000 //data
11110000111100000011111111110000 //data
00000000111100000000001111000000 //data
00111111000000000000000000000000 //data
00000000000000000000111100000000 //data
00001111000000000000000000000000 //data
00000000000000000000111100000000 //data
00001111000000000000000000000000 //data
00000000000000000000111100000000 //data
00001111000000000000000000000000 //data
00000000000000000000111100000000 //data
00001111000000000011110000000000 //data
00000011110000000000111100000000 //data
00111100000000001111000000000000 //data
00111100000000000000111100000000 //data
00000011110000000000000000000000 //data
00000000000000000000000000000000 //data
11111111111100000000000000000000 //data
00000000000000001111111111110000 //data
00000000000000000000000000000000 //data
00111100000000000000111100000000 //data
00000011110000000000000011110000 //data
00000011110000000000111100000000 //data
00111100000000000000000000000000 //data
00111111110000001111000011110000 //data
00000000111100000000001111000000 //data
00001111000000000000000000000000 //data
00001111000000000000000000000000 //data
00111111111100001111000000111100 //data
11110011111111001111001111111100 //data
11110011111111001111000000000000 //data
00111111110000000000000000000000 //data
00001111000000000011111111000000 //data
11110000111100001111000011110000 //data
11111111111100001111000011110000 //data
11110000111100000000000000000000 //data
11111111111100000011110000111100 //data
00111100001111000011111111110000 //data
00111100001111000011110000111100 //data
11111111111100000000000000000000 //data
00001111111100000011110000111100 //data
11110000000000001111000000000000 //data
11110000000000000011110000111100 //data
00001111111100000000000000000000 //data
11111111110000000011110011110000 //data
00111100001111000011110000111100 //data
00111100001111000011110011110000 //data
11111111110000000000000000000000 //data
11111111111111000011110000001100 //data
00111100110000000011111111000000 //data
00111100110000000011110000001100 //data
11111111111111000000000000000000 //data
11111111111111000011110000001100 //data
00111100110000000011111111000000 //data
00111100110000000011110000000000 //data
11111111000000000000000000000000 //data
00001111111100000011110000111100 //data
11110000000000001111000000000000 //data
11110000111111000011110000111100 //data
00001111111111000000000000000000 //data
11110000111100001111000011110000 //data
11110000111100001111111111110000 //data
11110000111100001111000011110000 //data
11110000111100000000000000000000 //data
00111111110000000000111100000000 //data
00001111000000000000111100000000 //data
00001111000000000000111100000000 //data
00111111110000000000000000000000 //data
00000011111111000000000011110000 //data
00000000111100000000000011110000 //data
11110000111100001111000011110000 //data
00111111110000000000000000000000 //data
11111100001111000011110000111100 //data
00111100111100000011111111000000 //data
00111100111100000011110000111100 //data
11111100001111000000000000000000 //data
11111111000000000011110000000000 //data
00111100000000000011110000000000 //data
00111100000011000011110000111100 //data
11111111111111000000000000000000 //data
11110000001111001111110011111100 //data
11111111111111001111111111111100 //data
11110011001111001111000000111100 //data
11110000001111000000000000000000 //data
11110000001111001111110000111100 //data
11111111001111001111001111111100 //data
11110000111111001111000000111100 //data
11110000001111000000000000000000 //data
00001111110000000011110011110000 //data
11110000001111001111000000111100 //data
11110000001111000011110011110000 //data
00001111110000000000000000000000 //data
11111111111100000011110000111100 //data
00111100001111000011111111110000 //data
00111100000000000011110000000000 //data
11111111000000000000000000000000 //data
00111111110000001111000011110000 //data
11110000111100001111000011110000 //data
11110011111100000011111111000000 //data
00000011111100000000000000000000 //data
11111111111100000011110000111100 //data
00111100001111000011111111110000 //data
00111100111100000011110000111100 //data
11111100001111000000000000000000 //data
00111111110000001111000011110000 //data
00111100000000000000111100000000 //data
00000011110000001111000011110000 //data
00111111110000000000000000000000 //data
11111111111100001100111100110000 //data
00001111000000000000111100000000 //data
00001111000000000000111100000000 //data
00111111110000000000000000000000 //data
11110000111100001111000011110000 //data
11110000111100001111000011110000 //data
11110000111100001111000011110000 //data
11111111111100000000000000000000 //data
11110000111100001111000011110000 //data
11110000111100001111000011110000 //data
11110000111100000011111111000000 //data
00001111000000000000000000000000 //data
11110000001111001111000000111100 //data
11110000001111001111001100111100 //data
11111111111111001111110011111100 //data
11110000001111000000000000000000 //data
11110000001111001111000000111100 //data
00111100111100000000111111000000 //data
00001111110000000011110011110000 //data
11110000001111000000000000000000 //data
11110000111100001111000011110000 //data
11110000111100000011111111000000 //data
00001111000000000000111100000000 //data
00111111110000000000000000000000 //data
11111111111111001111000000111100 //data
11000000111100000000001111000000 //data
00001111000011000011110000111100 //data
11111111111111000000000000000000 //data
00111111110000000011110000000000 //data
00111100000000000011110000000000 //data
00111100000000000011110000000000 //data
00111111110000000000000000000000 //data
11110000000000000011110000000000 //data
00001111000000000000001111000000 //data
00000000111100000000000000111100 //data
00000000000011000000000000000000 //data
00111111110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00111111110000000000000000000000 //data
00000011000000000000111111000000 //data
00111100111100001111000000111100 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000001111111111111111 //data
00001111000000000000111100000000 //data
00000011110000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00111111110000000000000011110000 //data
00111111111100001111000011110000 //data
00111111001111000000000000000000 //data
11111100000000000011110000000000 //data
00111100000000000011111111110000 //data
00111100001111000011110000111100 //data
11110011111100000000000000000000 //data
00000000000000000000000000000000 //data
00111111110000001111000011110000 //data
11110000000000001111000011110000 //data
00111111110000000000000000000000 //data
00000011111100000000000011110000 //data
00000000111100000011111111110000 //data
11110000111100001111000011110000 //data
00111111001111000000000000000000 //data
00000000000000000000000000000000 //data
00111111110000001111000011110000 //data
11111111111100001111000000000000 //data
00111111110000000000000000000000 //data
00001111110000000011110011110000 //data
00111100000000001111111100000000 //data
00111100000000000011110000000000 //data
11111111000000000000000000000000 //data
00000000000000000000000000000000 //data
00111111001111001111000011110000 //data
11110000111100000011111111110000 //data
00000000111100001111111111000000 //data
11111100000000000011110000000000 //data
00111100111100000011111100111100 //data
00111100001111000011110000111100 //data
11111100001111000000000000000000 //data
00001111000000000000000000000000 //data
00111111000000000000111100000000 //data
00001111000000000000111100000000 //data
00111111110000000000000000000000 //data
00000000111100000000000000000000 //data
00000000111100000000000011110000 //data
00000000111100001111000011110000 //data
11110000111100000011111111000000 //data
11111100000000000011110000000000 //data
00111100001111000011110011110000 //data
00111111110000000011110011110000 //data
11111100001111000000000000000000 //data
00111111000000000000111100000000 //data
00001111000000000000111100000000 //data
00001111000000000000111100000000 //data
00111111110000000000000000000000 //data
00000000000000000000000000000000 //data
11110000111100001111111111111100 //data
11111111111111001111001100111100 //data
11110000001111000000000000000000 //data
00000000000000000000000000000000 //data
11111111110000001111000011110000 //data
11110000111100001111000011110000 //data
11110000111100000000000000000000 //data
00000000000000000000000000000000 //data
00111111110000001111000011110000 //data
11110000111100001111000011110000 //data
00111111110000000000000000000000 //data
00000000000000000000000000000000 //data
11110011111100000011110000111100 //data
00111100001111000011111111110000 //data
00111100000000001111111100000000 //data
00000000000000000000000000000000 //data
00111111001111001111000011110000 //data
11110000111100000011111111110000 //data
00000000111100000000001111111100 //data
00000000000000000000000000000000 //data
11110011111100000011111100111100 //data
00111100001111000011110000000000 //data
11111111000000000000000000000000 //data
00000000000000000000000000000000 //data
00111111111100001111000000000000 //data
00111111110000000000000011110000 //data
11111111110000000000000000000000 //data
00000011000000000000111100000000 //data
00111111111100000000111100000000 //data
00001111000000000000111100110000 //data
00000011110000000000000000000000 //data
00000000000000000000000000000000 //data
11110000111100001111000011110000 //data
11110000111100001111000011110000 //data
00111111001111000000000000000000 //data
00000000000000000000000000000000 //data
11110000111100001111000011110000 //data
11110000111100000011111111000000 //data
00001111000000000000000000000000 //data
00000000000000000000000000000000 //data
11110000001111001111001100111100 //data
11111111111111001111111111111100 //data
00111100111100000000000000000000 //data
00000000000000000000000000000000 //data
11110000001111000011110011110000 //data
00001111110000000011110011110000 //data
11110000001111000000000000000000 //data
00000000000000000000000000000000 //data
11110000111100001111000011110000 //data
11110000111100000011111111110000 //data
00000000111100001111111111000000 //data
00000000000000000000000000000000 //data
11111111111100001100001111000000 //data
00001111000000000011110000110000 //data
11111111111100000000000000000000 //data
00000011111100000000111100000000 //data
00001111000000001111110000000000 //data
00001111000000000000111100000000 //data
00000011111100000000000000000000 //data
00000011110000000000001111000000 //data
00000011110000000000000000000000 //data
00000011110000000000001111000000 //data
00000011110000000000000000000000 //data
11111100000000000000111100000000 //data
00001111000000000000001111110000 //data
00001111000000000000111100000000 //data
11111100000000000000000000000000 //data
00111111001111001111001111110000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000001100000000 //data
00001111110000000011110011110000 //data
11110000001111001111000000111100 //data
11111111111111000000000000000000 //data
00111111110000001111000011110000 //data
11110000000000001111000011110000 //data
00111111110000000000001111000000 //data
00000000111100000011111111000000 //data
00000000000000001111000011110000 //data
00000000000000001111000011110000 //data
11110000111100001111000011110000 //data
00111111111111000000000000000000 //data
00000011111100000000000000000000 //data
00111111110000001111000011110000 //data
11111111111100001111000000000000 //data
00111111110000000000000000000000 //data
00111111111111001111000000001111 //data
00001111111100000000000000111100 //data
00001111111111000011110000111100 //data
00001111111111110000000000000000 //data
11110000111100000000000000000000 //data
00111111110000000000000011110000 //data
00111111111100001111000011110000 //data
00111111111111000000000000000000 //data
11111100000000000000000000000000 //data
00111111110000000000000011110000 //data
00111111111100001111000011110000 //data
00111111111111000000000000000000 //data
00001111000000000000111100000000 //data
00111111110000000000000011110000 //data
00111111111100001111000011110000 //data
00111111111111000000000000000000 //data
00000000000000000000000000000000 //data
00111111110000001111000000000000 //data
11110000000000000011111111000000 //data
00000000111100000000111111000000 //data
00111111111111001111000000001111 //data
00001111111100000011110000111100 //data
00111111111111000011110000000000 //data
00001111111100000000000000000000 //data
11110000111100000000000000000000 //data
00111111110000001111000011110000 //data
11111111111100001111000000000000 //data
00111111110000000000000000000000 //data
11111100000000000000000000000000 //data
00111111110000001111000011110000 //data
11111111111100001111000000000000 //data
00111111110000000000000000000000 //data
11110000111100000000000000000000 //data
00111111000000000000111100000000 //data
00001111000000000000111100000000 //data
00111111110000000000000000000000 //data
00111111111100001111000000111100 //data
00001111110000000000001111000000 //data
00000011110000000000001111000000 //data
00001111111100000000000000000000 //data
11111100000000000000000000000000 //data
00111111000000000000111100000000 //data
00001111000000000000111100000000 //data
00111111110000000000000000000000 //data
11110000001111000000111111000000 //data
00111100111100001111000000111100 //data
11111111111111001111000000111100 //data
11110000001111000000000000000000 //data
00001111000000000000111100000000 //data
00000000000000000011111111000000 //data
11110000111100001111111111110000 //data
11110000111100000000000000000000 //data
00000011111100000000000000000000 //data
11111111111100000011110000000000 //data
00111111110000000011110000000000 //data
11111111111100000000000000000000 //data
00000000000000000000000000000000 //data
00111111111111110000000011110000 //data
00111111111111111111000011110000 //data
00111111111111110000000000000000 //data
00001111111111000011110011110000 //data
11110000111100001111111111111100 //data
11110000111100001111000011110000 //data
11110000111111000000000000000000 //data
00111111110000001111000011110000 //data
00000000000000000011111111000000 //data
11110000111100001111000011110000 //data
00111111110000000000000000000000 //data
00000000000000001111000011110000 //data
00000000000000000011111111000000 //data
11110000111100001111000011110000 //data
00111111110000000000000000000000 //data
00000000000000001111110000000000 //data
00000000000000000011111111000000 //data
11110000111100001111000011110000 //data
00111111110000000000000000000000 //data
00111111110000001111000011110000 //data
00000000000000001111000011110000 //data
11110000111100001111000011110000 //data
00111111111111000000000000000000 //data
00000000000000001111110000000000 //data
00000000000000001111000011110000 //data
11110000111100001111000011110000 //data
00111111111111000000000000000000 //data
00000000000000001111000011110000 //data
00000000000000001111000011110000 //data
11110000111100000011111111110000 //data
00000000111100001111111111000000 //data
11110000000011110000001111000000 //data
00001111111100000011110000111100 //data
00111100001111000000111111110000 //data
00000011110000000000000000000000 //data
11110000111100000000000000000000 //data
11110000111100001111000011110000 //data
11110000111100001111000011110000 //data
00111111110000000000000000000000 //data
00000011110000000000001111000000 //data
00111111111111001111000000000000 //data
11110000000000000011111111111100 //data
00000011110000000000001111000000 //data
00001111110000000011110011110000 //data
00111100001100001111111100000000 //data
00111100000000001111110000111100 //data
11111111111100000000000000000000 //data
11110000111100001111000011110000 //data
00111111110000001111111111110000 //data
00001111000000001111111111110000 //data
00001111000000000000111100000000 //data
11111111110000001111000011110000 //data
11110000111100001111111111001100 //data
11110000001111001111000011111111 //data
11110000001111001111000000111111 //data
00000000111111000000001111001111 //data
00000011110000000000111111110000 //data
00000011110000000000001111000000 //data
11110011110000000011111100000000 //data
00000011111100000000000000000000 //data
00111111110000000000000011110000 //data
00111111111100001111000011110000 //data
00111111111111000000000000000000 //data
00001111110000000000000000000000 //data
00111111000000000000111100000000 //data
00001111000000000000111100000000 //data
00111111110000000000000000000000 //data
00000000000000000000001111110000 //data
00000000000000000011111111000000 //data
11110000111100001111000011110000 //data
00111111110000000000000000000000 //data
00000000000000000000001111110000 //data
00000000000000001111000011110000 //data
11110000111100001111000011110000 //data
00111111111111000000000000000000 //data
00000000000000001111111111000000 //data
00000000000000001111111111000000 //data
11110000111100001111000011110000 //data
11110000111100000000000000000000 //data
11111111111100000000000000000000 //data
11110000111100001111110011110000 //data
11111111111100001111001111110000 //data
11110000111100000000000000000000 //data
00001111111100000011110011110000 //data
00111100111100000000111111111100 //data
00000000000000000011111111111100 //data
00000000000000000000000000000000 //data
00001111110000000011110011110000 //data
00111100111100000000111111000000 //data
00000000000000000011111111110000 //data
00000000000000000000000000000000 //data
00001111000000000000000000000000 //data
00001111000000000011110000000000 //data
11110000000000001111000011110000 //data
00111111110000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000001111111111110000 //data
11110000000000001111000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000001111111111110000 //data
00000000111100000000000011110000 //data
00000000000000000000000000000000 //data
11110000000011111111000000111100 //data
11110000111100001111001111111100 //data
00001111000011110011110000111100 //data
11110000111100000000000011111111 //data
11110000000011111111000000111100 //data
11110000111100001111001111001111 //data
00001111001111110011110011111111 //data
11110000111111110000000000001111 //data
00000011110000000000001111000000 //data
00000000000000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000000000000000 //data
00000000000000000000111100001111 //data
00111100001111001111000011110000 //data
00111100001111000000111100001111 //data
00000000000000000000000000000000 //data
00000000000000001111000011110000 //data
00111100001111000000111100001111 //data
00111100001111001111000011110000 //data
00000000000000000000000000000000 //data
00001100000011001100000011000000 //data
00001100000011001100000011000000 //data
00001100000011001100000011000000 //data
00001100000011001100000011000000 //data
00110011001100111100110011001100 //data
00110011001100111100110011001100 //data
00110011001100111100110011001100 //data
00110011001100111100110011001100 //data
11110011110011110011111100111111 //data
11110011110011111111110011111100 //data
11110011110011110011111100111111 //data
11110011110011111111110011111100 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
11111111110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
11111111110000000000001111000000 //data
11111111110000000000001111000000 //data
00000011110000000000001111000000 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
11111111001111000000111100111100 //data
00001111001111000000111100111100 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
11111111111111000000111100111100 //data
00001111001111000000111100111100 //data
00000000000000000000000000000000 //data
11111111110000000000001111000000 //data
11111111110000000000001111000000 //data
00000011110000000000001111000000 //data
00001111001111000000111100111100 //data
11111111001111000000000000111100 //data
11111111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
00000000000000000000000000000000 //data
11111111111111000000000000111100 //data
11111111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
11111111001111000000000000111100 //data
11111111111111000000000000000000 //data
00000000000000000000000000000000 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
11111111111111000000000000000000 //data
00000000000000000000000000000000 //data
00000011110000000000001111000000 //data
11111111110000000000001111000000 //data
11111111110000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
11111111110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011111111110000000000000000 //data
00000000000000000000000000000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
11111111111111110000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
11111111111111110000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011111111110000001111000000 //data
00000011110000000000001111000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
11111111111111110000000000000000 //data
00000000000000000000000000000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
11111111111111110000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011111111110000001111000000 //data
00000011111111110000001111000000 //data
00000011110000000000001111000000 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111001111110000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111001111110000111100000000 //data
00001111111111110000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00001111111111110000111100000000 //data
00001111001111110000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
11111111001111110000000000000000 //data
11111111111111110000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
11111111111111110000000000000000 //data
11111111001111110000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111001111110000111100000000 //data
00001111001111110000111100111100 //data
00001111001111000000111100111100 //data
00000000000000000000000000000000 //data
11111111111111110000000000000000 //data
11111111111111110000000000000000 //data
00000000000000000000000000000000 //data
00001111001111000000111100111100 //data
11111111001111110000000000000000 //data
11111111001111110000111100111100 //data
00001111001111000000111100111100 //data
00000011110000000000001111000000 //data
11111111111111110000000000000000 //data
11111111111111110000000000000000 //data
00000000000000000000000000000000 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
11111111111111110000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
11111111111111110000000000000000 //data
11111111111111110000001111000000 //data
00000011110000000000001111000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
11111111111111110000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111111111110000000000000000 //data
00000000000000000000000000000000 //data
00000011110000000000001111000000 //data
00000011111111110000001111000000 //data
00000011111111110000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000011111111110000001111000000 //data
00000011111111110000001111000000 //data
00000011110000000000001111000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00001111111111110000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
11111111111111110000111100111100 //data
00001111001111000000111100111100 //data
00000011110000000000001111000000 //data
11111111111111110000001111000000 //data
11111111111111110000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
11111111110000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000011111111110000001111000000 //data
00000011110000000000001111000000 //data
11111111111111111111111111111111 //data
11111111111111111111111111111111 //data
11111111111111111111111111111111 //data
11111111111111111111111111111111 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
11111111111111111111111111111111 //data
11111111111111111111111111111111 //data
11111111000000001111111100000000 //data
11111111000000001111111100000000 //data
11111111000000001111111100000000 //data
11111111000000001111111100000000 //data
00000000111111110000000011111111 //data
00000000111111110000000011111111 //data
00000000111111110000000011111111 //data
00000000111111110000000011111111 //data
11111111111111111111111111111111 //data
11111111111111111111111111111111 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00111111001111001111001111110000 //data
11110000110000001111001111110000 //data
00111111001111000000000000000000 //data
00000000000000000011111111000000 //data
11110000111100001111111111000000 //data
11110000111100001111111111000000 //data
11110000000000001111000000000000 //data
00000000000000001111111111110000 //data
11110000111100001111000000000000 //data
11110000000000001111000000000000 //data
11110000000000000000000000000000 //data
00000000000000001111111111111100 //data
00111100111100000011110011110000 //data
00111100111100000011110011110000 //data
00111100111100000000000000000000 //data
11111111111100001111000011110000 //data
00111100000000000000111100000000 //data
00111100000000001111000011110000 //data
11111111111100000000000000000000 //data
00000000000000000000000000000000 //data
00111111111111001111001111000000 //data
11110011110000001111001111000000 //data
00111111000000000000000000000000 //data
00000000000000000011110000111100 //data
00111100001111000011110000111100 //data
00111100001111000011111111110000 //data
00111100000000001111000000000000 //data
00000000000000000011111100111100 //data
11110011111100000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000000000000000 //data
11111111111100000000111100000000 //data
00111111110000001111000011110000 //data
11110000111100000011111111000000 //data
00001111000000001111111111110000 //data
00001111110000000011110011110000 //data
11110000001111001111111111111100 //data
11110000001111000011110011110000 //data
00001111110000000000000000000000 //data
00001111110000000011110011110000 //data
11110000001111001111000000111100 //data
00111100111100000011110011110000 //data
11111100111111000000000000000000 //data
00000011111100000000111100000000 //data
00000011110000000011111111110000 //data
11110000111100001111000011110000 //data
00111111110000000000000000000000 //data
00000000000000000000000000000000 //data
00111111111111001111001111001111 //data
11110011110011110011111111111100 //data
00000000000000000000000000000000 //data
00000000001111000000000011110000 //data
00111111111111001111001111001111 //data
11110011110011110011111111111100 //data
00111100000000001111000000000000 //data
00001111110000000011110000000000 //data
11110000000000001111111111000000 //data
11110000000000000011110000000000 //data
00001111110000000000000000000000 //data
00111111110000001111000011110000 //data
11110000111100001111000011110000 //data
11110000111100001111000011110000 //data
11110000111100000000000000000000 //data
00000000000000001111111111110000 //data
00000000000000001111111111110000 //data
00000000000000001111111111110000 //data
00000000000000000000000000000000 //data
00001111000000000000111100000000 //data
11111111111100000000111100000000 //data
00001111000000000000000000000000 //data
11111111111100000000000000000000 //data
00111100000000000000111100000000 //data
00000011110000000000111100000000 //data
00111100000000000000000000000000 //data
11111111111100000000000000000000 //data
00000011110000000000111100000000 //data
00111100000000000000111100000000 //data
00000011110000000000000000000000 //data
11111111111100000000000000000000 //data
00000000111111000000001111001111 //data
00000011110011110000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000001111001111000000 //data
11110011110000000011111100000000 //data
00001111000000000000111100000000 //data
00000000000000001111111111110000 //data
00000000000000000000111100000000 //data
00001111000000000000000000000000 //data
00000000000000000011111100111100 //data
11110011111100000000000000000000 //data
00111111001111001111001111110000 //data
00000000000000000000000000000000 //data
00001111110000000011110011110000 //data
00111100111100000000111111000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000001111000000 //data
00000011110000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000011110000000000000000000000 //data
00000000000000000000000000000000 //data
00000000111111110000000011110000 //data
00000000111100000000000011110000 //data
11111100111100000011110011110000 //data
00001111111100000000001111110000 //data
00111111110000000011110011110000 //data
00111100111100000011110011110000 //data
00111100111100000000000000000000 //data
00000000000000000000000000000000 //data
00111111000000000000001111000000 //data
00001111000000000011110000000000 //data
00111111110000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00001111111100000000111111110000 //data
00001111111100000000111111110000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000101011100000000000001 //Set r1 to 348
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000010010011000000000001 //Set r1 to 147
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000110001010000000000101 //Set r5 to 394
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000001110011000000000001 //Set r1 to 115
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000110110100000000000101 //Set r5 to 436
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000101011000000000001 //Set r1 to 43
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000010010000000000101 //Set r5 to 18
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00001000000000000101000000000100 //Compute r0 OR 5 and write result to r4
00001000000000101100000000000011 //Compute r0 OR 44 and write result to r3
00001000000000000010000000000010 //Compute r0 OR 2 and write result to r2
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000001001111000000000001 //Set r1 to 79
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000011000000000000101 //Set r5 to 24
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00001000000000001000000000000100 //Compute r0 OR 8 and write result to r4
00001000000001000010000000000011 //Compute r0 OR 66 and write result to r3
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000110000000000000001 //Set r1 to 48
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000000000000000000000001 //Set r1 to 0
01110000000001001100000100000001 //Set highest 16 bits of r1 to 76
01110000000000000001000000001100 //Set r12 to 1
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110000011001111101000000000001 //Set r1 to 1661
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000000101111101010 //Jump to constant address 1525
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110000011001111101000000000001 //Set r1 to 1661
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000000110000000110 //Jump to constant address 1539
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110000011001111101000000000001 //Set r1 to 1661
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000000110000011010 //Jump to constant address 1549
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110000011001111101000000000001 //Set r1 to 1661
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000000110000101110 //Jump to constant address 1559
11111111111111111111111111111111 //Halt
10100000000000000000000000001111 //Pop from stack to rsp
10100000000000000000000000001110 //Pop from stack to rbp
10100000000000000000000000001101 //Pop from stack to r13
10100000000000000000000000001100 //Pop from stack to r12
10100000000000000000000000001011 //Pop from stack to r11
10100000000000000000000000001010 //Pop from stack to r10
10100000000000000000000000001001 //Pop from stack to r9
10100000000000000000000000001000 //Pop from stack to r8
10100000000000000000000000000111 //Pop from stack to r7
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00010000000000000000000000000000 //Return from interrupt
11111111111111111111111111111111 //Halt
