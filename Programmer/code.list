10010000000000000000000000001100 //Jump to constant address 6
10010000000000000001010011010110 //Jump to constant address 2667
10010000000000000001010100000100 //Jump to constant address 2690
10010000000000000001010100110010 //Jump to constant address 2713
10010000000000000001010101100000 //Jump to constant address 2736
00000000000000000000101011011000 //Length of program
01110000000000000000000000001111 //Set rsp to 0
01110000000001110000000100001111 //Set highest 16 bits of rsp to 112
01110000000000001110000000000001 //Set r1 to 14
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000001001101011010 //Jump to constant address 2477
11111111111111111111111111111111 //Halt
01110010011000101110000000000010 //Set r2 to 9774
01110000000011000000000100000010 //Set highest 16 bits of r2 to 192
11010000000000000000001000010000 //Write value in r1 to address in r2 with offset 0
11111111111111111111111111111111 //Halt
00000000000000000000000010000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000001010 //data
00000000000000000000000000000000 //data
00000000000000000000000001000011 //data
00000000000000000000000001001001 //data
00000000000000000000000001001110 //data
00000000000000000000000000111010 //data
00000000000000000000000000100000 //data
00000000000000000000000000000000 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000001010010 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000001111001 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001101001 //data
00000000000000000000000001110110 //data
00000000000000000000000001100101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000000000 //data
00000000000000000000000001000011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000001110110 //data
00000000000000000000000001101001 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001110101 //data
00000000000000000000000001110011 //data
00000000000000000000000000000000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000000000 //data
00000000000000000000000001010011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110010 //data
00000000000000000000000000000000 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000001010010 //data
00000000000000000000000001000001 //data
00000000000000000000000001010111 //data
00000000000000000000000000100000 //data
00000000000000000000000001000100 //data
00000000000000000000000001000001 //data
00000000000000000000000001010100 //data
00000000000000000000000001000001 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000000000 //data
00000000000000000000000001010110 //data
00000000000000000000000001100101 //data
00000000000000000000000001101100 //data
00000000000000000000000001101111 //data
00000000000000000000000001100011 //data
00000000000000000000000001101001 //data
00000000000000000000000001110100 //data
00000000000000000000000001111001 //data
00000000000000000000000000111010 //data
00000000000000000000000000100000 //data
00000000000000000000000000000000 //data
00000000000000000000000001010011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110000 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110000 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110101 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101111 //data
00000000000000000000000001110000 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000001100110 //data
00000000000000000000000001110101 //data
00000000000000000000000001101100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000001010000 //data
00000000000000000000000001000001 //data
00000000000000000000000001010010 //data
00000000000000000000000001010011 //data
00000000000000000000000001000101 //data
00000000000000000000000001000100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000100 //data
00000000000000000000000001000001 //data
00000000000000000000000001010100 //data
00000000000000000000000001000001 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000000000 //data
00000000000000000000000001000011 //data
00000000000000000000000001100001 //data
00000000000000000000000001100010 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001001110 //data
00000000000000000000000001110101 //data
00000000000000000000000001101101 //data
00000000000000000000000001100010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000000111010 //data
00000000000000000000000000100000 //data
00000000000000000000000000000000 //data
00000000000000000000000000001010 //data
00000000000000000000000000000000 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000001001000 //data
00000000000000000000000001101111 //data
00000000000000000000000001110011 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000001100100 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000000000 //data
00000000000000000000000001000011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100001 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001101100 //data
00000000000000000000000000111010 //data
00000000000000000000000000100000 //data
00000000000000000000000000000000 //data
00000000000000000000000001000100 //data
00000000000000000000000001100101 //data
00000000000000000000000001110110 //data
00000000000000000000000001101001 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000000000 //data
00000000000000000000000001001110 //data
00000000000000000000000001101111 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000001001001 //data
00000000000000000000000001000100 //data
00000000000000000000000000111010 //data
00000000000000000000000000100000 //data
00000000000000000000000000000000 //data
00000000000000000000000001010011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110001 //data
00000000000000000000000000000000 //data
00000000000000000000000001000101 //data
00000000000000000000000001110110 //data
00000000000000000000000001100101 //data
00000000000000000000000001101110 //data
00000000000000000000000001110100 //data
00000000000000000000000000111010 //data
00000000000000000000000000100000 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110101 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101111 //data
00000000000000000000000001110000 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000001100110 //data
00000000000000000000000001110101 //data
00000000000000000000000001101100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000001010011 //data
00000000000000000000000001101100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000001100100 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000000000 //data
00000000000000000000000001000100 //data
00000000000000000000000001100101 //data
00000000000000000000000001110110 //data
00000000000000000000000001101001 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110010 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110101 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101111 //data
00000000000000000000000001110000 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000001100110 //data
00000000000000000000000001110101 //data
00000000000000000000000001101100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001000011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000001110110 //data
00000000000000000000000001101001 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001110101 //data
00000000000000000000000001110011 //data
00000000000000000000000000000000 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000001010000 //data
00000000000000000000000001000001 //data
00000000000000000000000001010010 //data
00000000000000000000000001010011 //data
00000000000000000000000001000101 //data
00000000000000000000000001000100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000100 //data
00000000000000000000000001000001 //data
00000000000000000000000001010100 //data
00000000000000000000000001000001 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000000000 //data
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000010011001110 //Jump to constant address 615
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000010011100010 //Jump to constant address 625
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
01000000000000000010110111000000 //If r13 > r12, then jump to offset 2
10010000000000000000010011110100 //Jump to constant address 634
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000010100000100 //Jump to constant address 642
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
00000010000000000000010111000101 //Compute r5 - r12 and write result to r5
01110000000000000001000000001100 //Set r12 to 1
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
10010000000000000000010011100110 //Jump to constant address 627
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000010100100110 //Jump to constant address 659
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000010100111010 //Jump to constant address 669
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
01000000000000000010110111000000 //If r13 > r12, then jump to offset 2
10010000000000000000010101001010 //Jump to constant address 677
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000010101010110 //Jump to constant address 683
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
00000010000000000000010111000101 //Compute r5 - r12 and write result to r5
10010000000000000000010100111100 //Jump to constant address 670
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110010011000101110000000000001 //Set r1 to 9774
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110010011000101110000000000011 //Set r3 to 9774
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000010100000010 //Read at address in r5 with offset 0 to r2
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
00001000000000000001000000000100 //Compute r0 OR 1 and write result to r4
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000000010110011110 //Jump to constant address 719
00001000000000000000000000000100 //Compute r0 OR 0 and write result to r4
00001010000000000000010000001100 //Compute r4 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000010110110000 //Jump to constant address 728
11010000000000000000001100100000 //Write value in r2 to address in r3 with offset 0
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
00000001100000000000010111000101 //Compute r5 + r12 and write result to r5
11100000000000000000010100000010 //Read at address in r5 with offset 0 to r2
10010000000000000000010110001110 //Jump to constant address 711
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000001011000000000000000001 //Set r1 to 704
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011000000000000000001 //Set r1 to 704
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000111011000000000101 //Set r5 to 59
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000010100111100001111 //Compute rsp - 20 and write result to rsp
11010000000000000100111001010001 //Write value in r5 to address in rbp with offset -4
11010000000000001100111001000001 //Write value in r4 to address in rbp with offset -12
01110000001010001001000000000001 //Set r1 to 649
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00001000000000001010000000000100 //Compute r0 OR 10 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000010000111000010001 //Write value in r1 to address in rbp with offset -16
01110000000000000000000000001100 //Set r12 to 0
11010000000000010100111011000001 //Write value in r12 to address in rbp with offset -20
01110000001001011101000000000001 //Set r1 to 605
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00001000000000001010000000000100 //Compute r0 OR 10 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000000100111000010001 //Write value in r1 to address in rbp with offset -4
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
01110000000000000000000000001101 //Set r13 to 0
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000000011000110010 //Jump to constant address 793
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000011001010010 //Jump to constant address 809
01110000001011110111000000000001 //Set r1 to 759
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
11100000000000001100111000101100 //Read at address in rbp with offset -12 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000000010100111000101100 //Read at address in rbp with offset -20 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000010100111000010001 //Write value in r1 to address in rbp with offset -20
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000000010000111000100010 //Read at address in rbp with offset -16 to r2
00001001100000110000001000000010 //Compute r2 + 48 and write result to r2
11100000000000010100111000100001 //Read at address in rbp with offset -20 to r1
11100000000000010100111000100011 //Read at address in rbp with offset -20 to r3
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
11010000000000010100111000110001 //Write value in r3 to address in rbp with offset -20
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000000001100111000101100 //Read at address in rbp with offset -12 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
11100000000000010100111000101100 //Read at address in rbp with offset -20 to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011100111100001111 //Compute rsp - 28 and write result to rsp
11010000000000011100111001000001 //Write value in r4 to address in rbp with offset -28
01110000001011110111000000000001 //Set r1 to 759
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011100111000101100 //Read at address in rbp with offset -28 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000000011100111000101100 //Read at address in rbp with offset -28 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000110000111100001111 //Compute rsp - 48 and write result to rsp
11010000000000100000111001010001 //Write value in r5 to address in rbp with offset -32
11010000000000101000111001000001 //Write value in r4 to address in rbp with offset -40
01110000001010001001000000000001 //Set r1 to 649
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100000111000101100 //Read at address in rbp with offset -32 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00001000000000010000000000000100 //Compute r0 OR 16 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000101100111000010001 //Write value in r1 to address in rbp with offset -44
01110000000000000000000000001100 //Set r12 to 0
11010000000000110000111011000001 //Write value in r12 to address in rbp with offset -48
01110000001001011101000000000001 //Set r1 to 605
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100000111000101100 //Read at address in rbp with offset -32 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00001000000000010000000000000100 //Compute r0 OR 16 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000100000111000010001 //Write value in r1 to address in rbp with offset -32
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000100000111000101100 //Read at address in rbp with offset -32 to r12
01110000000000000000000000001101 //Set r13 to 0
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000000011011110000 //Jump to constant address 888
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000011100010000 //Jump to constant address 904
01110000001101010110000000000001 //Set r1 to 854
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100000111000101100 //Read at address in rbp with offset -32 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
11100000000000101000111000101100 //Read at address in rbp with offset -40 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000000110000111000101100 //Read at address in rbp with offset -48 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000110000111000010001 //Write value in r1 to address in rbp with offset -48
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000101100111000101100 //Read at address in rbp with offset -44 to r12
01110000000000001001000000001101 //Set r13 to 9
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000000011100011110 //Jump to constant address 911
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000011100101110 //Jump to constant address 919
11100000000000101100111000100010 //Read at address in rbp with offset -44 to r2
00001001100001000001001000000010 //Compute r2 + 65 and write result to r2
01110000000000001010000000001100 //Set r12 to 10
00000010000000000000001011000010 //Compute r2 - r12 and write result to r2
10010000000000000000011100110100 //Jump to constant address 922
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000000101100111000100010 //Read at address in rbp with offset -44 to r2
00001001100000110000001000000010 //Compute r2 + 48 and write result to r2
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000000110000111000100001 //Read at address in rbp with offset -48 to r1
11100000000000110000111000100011 //Read at address in rbp with offset -48 to r3
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
11010000000000110000111000110001 //Write value in r3 to address in rbp with offset -48
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000000101000111000101100 //Read at address in rbp with offset -40 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
11100000000000110000111000101100 //Read at address in rbp with offset -48 to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000111000111100001111 //Compute rsp - 56 and write result to rsp
11010000000000111000111001000001 //Write value in r4 to address in rbp with offset -56
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001011100000000001000100000001 //Compute r1 * 1 and write result to r1
11100000000000111000111000101100 //Read at address in rbp with offset -56 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
01110000000000110000000000001100 //Set r12 to 48
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00001011100000000001000100000001 //Compute r1 * 1 and write result to r1
11100000000000111000111000101100 //Read at address in rbp with offset -56 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
01110000000001111000000000001100 //Set r12 to 120
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00001000000000000010000000000001 //Compute r0 OR 2 and write result to r1
00001011100000000001000100000001 //Compute r1 * 1 and write result to r1
11100000000000111000111000101100 //Read at address in rbp with offset -56 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000111000111000010001 //Write value in r1 to address in rbp with offset -56
01110000001101010110000000000001 //Set r1 to 854
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000111000111000101100 //Read at address in rbp with offset -56 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000000111000111000101100 //Read at address in rbp with offset -56 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000000000000000000000011 //Set r3 to 0
01110000000001001100000100000011 //Set highest 16 bits of r3 to 76
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000001111000000 //Write value in r12 to address in r3 with offset 0
01110010011000100110000000000001 //Set r1 to 9766
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
01110010011000100111000000000001 //Set r1 to 9767
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
01110000000000000001000000001100 //Set r12 to 1
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000000000000001100000010 //Read at address in r3 with offset 0 to r2
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000011111011010 //Jump to constant address 1005
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000011111100010 //Jump to constant address 1009
10010000000000000000011111001010 //Jump to constant address 997
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 9776
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01111111111011111111000000000010 //Set r2 to 0b1111111011111111
00000000100000000000000100100001 //Compute r1 AND r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 9776
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01110000000100000000000000000010 //Set r2 to 0b100000000
00000000000000000000000100100001 //Compute r1 OR r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110010011000110001000000000001 //Set r1 to 9777
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000111100111100001111 //Compute rsp - 60 and write result to rsp
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000100001111110 //Jump to constant address 1087
01110010011000100100000000000001 //Set r1 to 9764
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
10010000000000000000100001101110 //Jump to constant address 1079
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000001111111000000000000001 //Set r1 to 1016
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000001110000000000001 //Set r1 to 1038
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001111010110000000000001 //Set r1 to 982
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001111111000000000000001 //Set r1 to 1016
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000111100111000010001 //Write value in r1 to address in rbp with offset -60
01110000010000001110000000000001 //Set r1 to 1038
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000000111100111000101100 //Read at address in rbp with offset -60 to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001000000111100001111 //Compute rsp - 64 and write result to rsp
01110000001111111000000000000001 //Set r1 to 1016
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001000000111000010001 //Write value in r1 to address in rbp with offset -64
01110000010000001110000000000001 //Set r1 to 1038
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001000000111000101100 //Read at address in rbp with offset -64 to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001001000111100001111 //Compute rsp - 72 and write result to rsp
11010000000001000100111001010001 //Write value in r5 to address in rbp with offset -68
01110000001111111000000000000001 //Set r1 to 1016
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010101000000000101 //Compute r0 OR 21 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000001110000000000001 //Set r1 to 1038
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001111010110000000000001 //Set r1 to 982
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001111111000000000000001 //Set r1 to 1016
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001000100111000101100 //Read at address in rbp with offset -68 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000001110000000000001 //Set r1 to 1038
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001111010110000000000001 //Set r1 to 982
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001111111000000000000001 //Set r1 to 1016
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001001000111000010001 //Write value in r1 to address in rbp with offset -72
01110000010000001110000000000001 //Set r1 to 1038
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001111010110000000000001 //Set r1 to 982
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001001000111000101100 //Read at address in rbp with offset -72 to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001010010111100001111 //Compute rsp - 82 and write result to rsp
01110000010000001110000000000001 //Set r1 to 1038
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001111010110000000000001 //Set r1 to 982
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000111100000000000101 //Compute r0 OR 60 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001111111000000000000001 //Set r1 to 1016
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000101000000000101 //Compute r0 OR 5 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000001110000000000001 //Set r1 to 1038
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001111010110000000000001 //Set r1 to 982
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000101001100010 //Jump to constant address 1329
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000010000010000000000101 //Set r5 to 130
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000101001111100 //Jump to constant address 1342
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000011000000000000000101 //Set r5 to 192
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000010010011101000000000001 //Set r1 to 1181
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000101000000000101 //Compute r0 OR 5 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000010101 //Compute r0 OR r1 and write result to r5
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000101011000010 //Jump to constant address 1377
01110000001110101100000000000001 //Set r1 to 940
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001010010111000000100 //Compute rbp - 82 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011000000000000000001 //Set r1 to 704
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001010010111000000101 //Compute rbp - 82 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000011011011000000000101 //Set r5 to 219
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001010010111100001111 //Compute rsp - 82 and write result to rsp
01110000001111111000000000000001 //Set r1 to 1016
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001011000000000101 //Compute r0 OR 11 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010111000000000101 //Compute r0 OR 23 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000011011000000000000101 //Compute r0 OR 216 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000001110000000000001 //Set r1 to 1038
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001111010110000000000001 //Set r1 to 982
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001011100111100001111 //Compute rsp - 92 and write result to rsp
01110000000000000000000000000101 //Set r5 to 0
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000101101010110 //Jump to constant address 1451
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000001100000000000000101 //Set r5 to 96
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000010000110010000000000001 //Set r1 to 1074
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010101000000001101 //Set r13 to 21
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000000101101110010 //Jump to constant address 1465
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000101101111010 //Jump to constant address 1469
10010000000000000000101101011000 //Jump to constant address 1452
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000101110010100 //Jump to constant address 1482
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000101010110000000000101 //Set r5 to 342
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000101110101110 //Jump to constant address 1495
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000101110000000000000101 //Set r5 to 368
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000010010011101000000000001 //Set r1 to 1181
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000111000000000101 //Compute r0 OR 7 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000010101 //Compute r0 OR r1 and write result to r5
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000101111110100 //Jump to constant address 1530
01110000001110101100000000000001 //Set r1 to 940
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001011100111000000100 //Compute rbp - 92 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011000000000000000001 //Set r1 to 704
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001011100111000000101 //Compute rbp - 92 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000110010011000000000101 //Set r5 to 403
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110000001110 //Jump to constant address 1543
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000010001101000000000101 //Set r5 to 141
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000010010011101000000000001 //Set r1 to 1181
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000110000000000101 //Compute r0 OR 6 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000010101 //Compute r0 OR r1 and write result to r5
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110001010100 //Jump to constant address 1578
01110000001110101100000000000001 //Set r1 to 940
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001011100111000000100 //Compute rbp - 92 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011000000000000000001 //Set r1 to 704
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001011100111000000101 //Compute rbp - 92 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000111110101000000000101 //Set r5 to 501
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110001101110 //Jump to constant address 1591
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001000101011000000000101 //Set r5 to 555
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000010000110010000000000001 //Set r1 to 1074
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010101000000001101 //Set r13 to 21
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000000110010001010 //Jump to constant address 1605
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110010010010 //Jump to constant address 1609
10010000000000000000110001110000 //Jump to constant address 1592
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110010101100 //Jump to constant address 1622
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000111100100000000000101 //Set r5 to 484
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001011100111100001111 //Compute rsp - 92 and write result to rsp
01110000001111111000000000000001 //Set r1 to 1016
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000011100000000000101 //Compute r0 OR 28 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000010010000000000111 //Set r7 to 18
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000000011100001100 //Read at address in r7 with offset 0 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000001110000000000001 //Set r1 to 1038
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000010010000000000111 //Set r7 to 18
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000000011100000001 //Read at address in r7 with offset 0 to r1
00001001000001000000000100000001 //Compute r1 XOR 64 and write result to r1
01110000000000010010000000000111 //Set r7 to 18
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11010000000000000000011100010000 //Write value in r1 to address in r7 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001100000111100001111 //Compute rsp - 96 and write result to rsp
11010000000001100000111001010001 //Write value in r5 to address in rbp with offset -96
01110000001111111000000000000001 //Set r1 to 1016
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001001111000000000101 //Compute r0 OR 79 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001100000111000101100 //Read at address in rbp with offset -96 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000001110000000000001 //Set r1 to 1038
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001011100111100001111 //Compute rsp - 92 and write result to rsp
01110000000000000000000000000100 //Set r4 to 0
01110000000000000000000000000011 //Set r3 to 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000000111100 //Compute r0 OR r3 and write result to r12
01110000000000001000000000001101 //Set r13 to 8
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000000110101111100 //Jump to constant address 1726
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110111010010 //Jump to constant address 1769
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000110110001110 //Jump to constant address 1735
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110111000110 //Jump to constant address 1763
01110000000000010011000000000010 //Set r2 to 19
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
01110000000000000100000000001100 //Set r12 to 4
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100001000 //Read at address in r1 with offset 0 to r8
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000010001100 //Compute r0 OR r8 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000110110110000 //Jump to constant address 1752
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110111000100 //Jump to constant address 1762
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
01110000000000000100000000001100 //Set r12 to 4
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00000001100000000000001011000010 //Compute r2 + r12 and write result to r2
11010000000000000000001001010000 //Write value in r5 to address in r2 with offset 0
01110000000000000001000000000100 //Set r4 to 1
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
00000001100000000000001111000011 //Compute r3 + r12 and write result to r3
10010000000000000000110101101110 //Jump to constant address 1719
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001011100111100001111 //Compute rsp - 92 and write result to rsp
01110000000000000000000000000011 //Set r3 to 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000000111100 //Compute r0 OR r3 and write result to r12
01110000000000001000000000001101 //Set r13 to 8
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000000110111111000 //Jump to constant address 1788
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111000111010 //Jump to constant address 1821
01110000000000010011000000000010 //Set r2 to 19
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
01110000000000000100000000001100 //Set r12 to 4
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100000100 //Read at address in r1 with offset 0 to r4
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
00000000000000000000000001011101 //Compute r0 OR r5 and write result to r13
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000111000011010 //Jump to constant address 1805
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111000101110 //Jump to constant address 1815
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
01110000000000000100000000001100 //Set r12 to 4
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00000001100000000000001011000010 //Compute r2 + r12 and write result to r2
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000001011000000 //Write value in r12 to address in r2 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
00000001100000000000001111000011 //Compute r3 + r12 and write result to r3
10010000000000000000110111101010 //Jump to constant address 1781
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000010010010111100001111 //Compute rsp - 146 and write result to rsp
01110000001111111000000000000001 //Set r1 to 1016
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000101000000000000101 //Compute r0 OR 40 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000010000110111000010001 //Write value in r1 to address in rbp with offset -134
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000010001110111000010001 //Write value in r1 to address in rbp with offset -142
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001111110111000010001 //Write value in r1 to address in rbp with offset -126
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001110010111000010001 //Write value in r1 to address in rbp with offset -114
01110000010000001110000000000001 //Set r1 to 1038
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110010011100110010000000000001 //Set r1 to 10034
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11100000000010000110111000101100 //Read at address in rbp with offset -134 to r12
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
11100000000010001110111000101100 //Read at address in rbp with offset -142 to r12
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
11100000000001111110111000101100 //Read at address in rbp with offset -126 to r12
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
11100000000001110010111000101100 //Read at address in rbp with offset -114 to r12
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111101111100 //Jump to constant address 1982
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000010101000000000000101 //Set r5 to 168
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001110101100000000000001 //Set r1 to 940
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101010111000000100 //Compute rbp - 106 and write result to r4
11100000000010000110111000101100 //Read at address in rbp with offset -134 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101010111000000101 //Compute rbp - 106 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001110101100000000000001 //Set r1 to 940
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101010111000000100 //Compute rbp - 106 and write result to r4
11100000000010001110111000101100 //Read at address in rbp with offset -142 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101010111000000101 //Compute rbp - 106 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001110101100000000000001 //Set r1 to 940
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101010111000000100 //Compute rbp - 106 and write result to r4
11100000000001111110111000101100 //Read at address in rbp with offset -126 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101010111000000101 //Compute rbp - 106 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001110101100000000000001 //Set r1 to 940
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101010111000000100 //Compute rbp - 106 and write result to r4
11100000000001110010111000101100 //Read at address in rbp with offset -114 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101010111000000101 //Compute rbp - 106 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000010000110111000100001 //Read at address in rbp with offset -134 to r1
00001000100011110000000100000001 //Compute r1 AND 240 and write result to r1
11010000000001101110111000010001 //Write value in r1 to address in rbp with offset -110
11100000000010000110111000100001 //Read at address in rbp with offset -134 to r1
00001000100000001111000100000001 //Compute r1 AND 15 and write result to r1
11010000000001110110111000010001 //Write value in r1 to address in rbp with offset -118
11100000000010001110111000100001 //Read at address in rbp with offset -142 to r1
00001000100000001111000100000001 //Compute r1 AND 15 and write result to r1
11010000000001111010111000010001 //Write value in r1 to address in rbp with offset -122
11100000000010001110111000100001 //Read at address in rbp with offset -142 to r1
00001000100011110000000100000001 //Compute r1 AND 240 and write result to r1
11010000000010000010111000010001 //Write value in r1 to address in rbp with offset -130
11100000000001111110111000101100 //Read at address in rbp with offset -126 to r12
11010000000010001010111011000001 //Write value in r12 to address in rbp with offset -138
11100000000001110010111000101100 //Read at address in rbp with offset -114 to r12
11010000000010010010111011000001 //Write value in r12 to address in rbp with offset -146
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000010000010111000101100 //Read at address in rbp with offset -130 to r12
01110000000010010000000000001101 //Set r13 to 144
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000111110101010 //Jump to constant address 2005
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111111000000 //Jump to constant address 2016
01110000011010110001000000000001 //Set r1 to 1713
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000010001010111000101100 //Read at address in rbp with offset -138 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000010000010111000101100 //Read at address in rbp with offset -130 to r12
01110000000010000000000000001101 //Set r13 to 128
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000111111001110 //Jump to constant address 2023
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111111100100 //Jump to constant address 2034
01110000011011110000000000000001 //Set r1 to 1776
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000010001010111000101100 //Read at address in rbp with offset -138 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001000100101110 //Jump to constant address 2199
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000100010001000000000101 //Set r5 to 273
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011000000000000000001 //Set r1 to 704
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000100100001000000000101 //Set r5 to 289
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001110101100000000000001 //Set r1 to 940
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101010111000000100 //Compute rbp - 106 and write result to r4
11100000000001101110111000101100 //Read at address in rbp with offset -110 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101010111000000101 //Compute rbp - 106 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011000000000000000001 //Set r1 to 704
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000111101000000000101 //Set r5 to 61
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001110101100000000000001 //Set r1 to 940
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101010111000000100 //Compute rbp - 106 and write result to r4
11100000000001110110111000101100 //Read at address in rbp with offset -118 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101010111000000101 //Compute rbp - 106 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011000000000000000001 //Set r1 to 704
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000101001100000000000101 //Set r5 to 332
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001110101100000000000001 //Set r1 to 940
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101010111000000100 //Compute rbp - 106 and write result to r4
11100000000001111010111000101100 //Read at address in rbp with offset -122 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101010111000000101 //Compute rbp - 106 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011000000000000000001 //Set r1 to 704
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000110001011000000000101 //Set r5 to 395
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001110101100000000000001 //Set r1 to 940
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101010111000000100 //Compute rbp - 106 and write result to r4
11100000000010000010111000101100 //Read at address in rbp with offset -130 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101010111000000101 //Compute rbp - 106 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011000000000000000001 //Set r1 to 704
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000101100111000000000101 //Set r5 to 359
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001110101100000000000001 //Set r1 to 940
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101010111000000100 //Compute rbp - 106 and write result to r4
11100000000010001010111000101100 //Read at address in rbp with offset -138 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101010111000000101 //Compute rbp - 106 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011000000000000000001 //Set r1 to 704
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000010110101000000000101 //Set r5 to 181
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001110101100000000000001 //Set r1 to 940
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101010111000000100 //Compute rbp - 106 and write result to r4
11100000000010010010111000101100 //Read at address in rbp with offset -146 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101010111000000101 //Compute rbp - 106 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000100110000000000000101 //Set r5 to 304
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001101010111100001111 //Compute rsp - 106 and write result to rsp
01110000000000010011000000000111 //Set r7 to 19
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000010000011100000001 //Read at address in r7 with offset 16 to r1
01110000000000010011000000000111 //Set r7 to 19
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000010100011100000010 //Read at address in r7 with offset 20 to r2
00001010100000001000001000000010 //Compute r2 << 8 and write result to r2
00000000000000000000000100100001 //Compute r1 OR r2 and write result to r1
01110000000000010011000000000111 //Set r7 to 19
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000011000011100000010 //Read at address in r7 with offset 24 to r2
00001010100000010000001000000010 //Compute r2 << 16 and write result to r2
00000000000000000000000100100001 //Compute r1 OR r2 and write result to r1
01110000000000010011000000000111 //Set r7 to 19
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000011100011100000010 //Read at address in r7 with offset 28 to r2
00001010100000011000001000000010 //Compute r2 << 24 and write result to r2
00000000000000000000000100100001 //Compute r1 OR r2 and write result to r1
01110010011000101101000000000010 //Set r2 to 9773
01110000000011000000000100000010 //Set highest 16 bits of r2 to 192
11010000000000000000001000010000 //Write value in r1 to address in r2 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001101010111100001111 //Compute rsp - 106 and write result to rsp
01110000000000010011000000000111 //Set r7 to 19
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000000011100000001 //Read at address in r7 with offset 0 to r1
01110000000000010011000000000111 //Set r7 to 19
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000100011100000010 //Read at address in r7 with offset 4 to r2
00001010100000001000001000000010 //Compute r2 << 8 and write result to r2
00000000000000000000000100100001 //Compute r1 OR r2 and write result to r1
01110000000000010011000000000111 //Set r7 to 19
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000001000011100000010 //Read at address in r7 with offset 8 to r2
00001010100000010000001000000010 //Compute r2 << 16 and write result to r2
00000000000000000000000100100001 //Compute r1 OR r2 and write result to r1
01110000000000010011000000000111 //Set r7 to 19
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000001100011100000010 //Read at address in r7 with offset 12 to r2
00001010100000011000001000000010 //Compute r2 << 24 and write result to r2
00000000000000000000000100100001 //Compute r1 OR r2 and write result to r1
01110010011000101100000000000010 //Set r2 to 9772
01110000000011000000000100000010 //Set highest 16 bits of r2 to 192
11010000000000000000001000010000 //Write value in r1 to address in r2 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000010100000111100001111 //Compute rsp - 160 and write result to rsp
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001001001101000000000101 //Set r5 to 589
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000010100000111011000001 //Write value in r12 to address in rbp with offset -160
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000010100000111000101100 //Read at address in rbp with offset -160 to r12
01110000000000001000000000001101 //Set r13 to 8
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000001000111100010 //Jump to constant address 2289
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001000100000 //Jump to constant address 2320
11100000000010100000111000100010 //Read at address in rbp with offset -160 to r2
01110000000000010011000000000001 //Set r1 to 19
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001110101100000000000011 //Set r3 to 940
01110000000000000000000100000011 //Set highest 16 bits of r3 to 0
01110000000000000100000000001100 //Set r12 to 4
00000011100000000000001011000010 //Compute r2 * r12 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00000001100000000000001011000010 //Compute r2 + r12 and write result to r2
11100000000000000000001000000101 //Read at address in r2 with offset 0 to r5
00001010000010011100111000000100 //Compute rbp - 156 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000110000 //Jump to reg r3 with offset 0
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010011100111000000101 //Compute rbp - 156 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000010100000111000100001 //Read at address in rbp with offset -160 to r1
11100000000010100000111000100001 //Read at address in rbp with offset -160 to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
11010000000010100000111000010001 //Write value in r1 to address in rbp with offset -160
10010000000000000001000111010100 //Jump to constant address 2282
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000010100100111100001111 //Compute rsp - 164 and write result to rsp
11010000000010100100111001010001 //Write value in r5 to address in rbp with offset -164
01110000001111111000000000000001 //Set r1 to 1016
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001000101000000000101 //Compute r0 OR 69 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000010100100111000101100 //Read at address in rbp with offset -164 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000001110000000000001 //Set r1 to 1038
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001111010110000000000001 //Set r1 to 982
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001010010100 //Jump to constant address 2378
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000100110010000000000101 //Set r5 to 306
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000001111111000000000000001 //Set r1 to 1016
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010011000000000101 //Compute r0 OR 19 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000010100100111000101100 //Read at address in rbp with offset -164 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000001110000000000001 //Set r1 to 1038
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001111010110000000000001 //Set r1 to 982
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001011110010 //Jump to constant address 2425
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000111001001000000000101 //Set r5 to 457
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000010101000111100001111 //Compute rsp - 168 and write result to rsp
11010000000010101000111001010001 //Write value in r5 to address in rbp with offset -168
01110000001111111000000000000001 //Set r1 to 1016
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001001001000000000101 //Compute r0 OR 73 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000100100000000000001 //Set r1 to 1060
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000010101000111000101100 //Read at address in rbp with offset -168 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010000001110000000000001 //Set r1 to 1038
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001111010110000000000001 //Set r1 to 982
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000010011100111100001111 //Compute rsp - 156 and write result to rsp
01110000010011111010000000000001 //Set r1 to 1274
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010110011010000000000001 //Set r1 to 1434
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001111010110000000000001 //Set r1 to 982
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001010000000000101 //Compute r0 OR 10 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000100100010111000000000001 //Set r1 to 2327
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000101000000000101 //Compute r0 OR 5 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001111010110000000000001 //Set r1 to 982
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001010000000000101 //Compute r0 OR 10 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000100110000000000000000001 //Set r1 to 2432
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000001111010110000000000001 //Set r1 to 982
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001010000000000101 //Compute r0 OR 10 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001111011000 //Jump to constant address 2540
01110000001011011111000000000001 //Set r1 to 735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000001000011000000000101 //Set r5 to 67
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001010001011110 //Jump to constant address 2607
01110000011001011101000000000001 //Set r1 to 1629
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001011000000000001 //Set r1 to 1675
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001011001000000000101 //Compute r0 OR 89 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000010000110010000000000001 //Set r1 to 1074
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001010000011000 //Jump to constant address 2572
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001010000100000 //Jump to constant address 2576
10010000000000000001001111111110 //Jump to constant address 2559
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011100100100000000000001 //Set r1 to 1828
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001010001000010 //Jump to constant address 2593
01110000100011011100000000000001 //Set r1 to 2268
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000100010111101000000000001 //Set r1 to 2237
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000100010011110000000000001 //Set r1 to 2206
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001001111011010 //Jump to constant address 2541
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000000000110000000000000001 //Set r1 to 48
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000010011100111100001111 //Compute rsp - 156 and write result to rsp
01110000000000000000000000000001 //Set r1 to 0
01110000000001001100000100000001 //Set highest 16 bits of r1 to 76
01110000000000000001000000001100 //Set r12 to 1
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000010011100111100001111 //Compute rsp - 156 and write result to rsp
01110010011000101110000000000001 //Set r1 to 9774
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
01110000000000101100000000001100 //Set r12 to 44
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000010011100111100001111 //Compute rsp - 156 and write result to rsp
01110010011000101110000000000001 //Set r1 to 9774
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
01110000000000101101000000001100 //Set r12 to 45
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000010011100111100001111 //Compute rsp - 156 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110000101011000111000000000001 //Set r1 to 2759
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000001010001101110 //Jump to constant address 2615
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110000101011000111000000000001 //Set r1 to 2759
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000001010010001010 //Jump to constant address 2629
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110000101011000111000000000001 //Set r1 to 2759
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000001010010100110 //Jump to constant address 2643
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110000101011000111000000000001 //Set r1 to 2759
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000001010011000010 //Jump to constant address 2657
11111111111111111111111111111111 //Halt
10100000000000000000000000001111 //Pop from stack to rsp
10100000000000000000000000001110 //Pop from stack to rbp
10100000000000000000000000001101 //Pop from stack to r13
10100000000000000000000000001100 //Pop from stack to r12
10100000000000000000000000001011 //Pop from stack to r11
10100000000000000000000000001010 //Pop from stack to r10
10100000000000000000000000001001 //Pop from stack to r9
10100000000000000000000000001000 //Pop from stack to r8
10100000000000000000000000000111 //Pop from stack to r7
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00010000000000000000000000000000 //Return from interrupt
11111111111111111111111111111111 //Halt
