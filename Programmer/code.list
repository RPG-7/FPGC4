10010000000000000000000000001100 //Jump to constant address 6
10010000000000000000001100001100 //Jump to constant address 390
10010000000000000000001100001110 //Jump to constant address 391
10010000000000000000001100010000 //Jump to constant address 392
10010000000000000000001100010010 //Jump to constant address 393
00000000000000000000000110001010 //Length of program
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000000011010 //Jump to constant address 13
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000001101010 //Jump to constant address 53
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001010100100 //Jump to constant address 338
01110000000011010010000000000001 //Set r1 to 210
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001000100110 //Jump to constant address 275
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000011000110 //Jump to constant address 99
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000011111010 //Jump to constant address 125
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000100101110 //Jump to constant address 151
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001011000000 //Jump to constant address 352
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001001100010 //Jump to constant address 305
01110000000011010100000000000001 //Set r1 to 212
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001000100110 //Jump to constant address 275
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110000000011011000000000000001 //Set r1 to 216
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001000100110 //Jump to constant address 275
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000010011010 //Jump to constant address 77
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001011000000 //Jump to constant address 352
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001001100010 //Jump to constant address 305
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000100000 //Push r2 to stack
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001010001000 //Jump to constant address 324
01110010011000110001000000000001 //Set r1 to 0x2631
01110000000011000000000100000001 //Set highest 16 bits of r1 to 0xC0
01110000000000100010000000000010 //Set r2 to 0x22
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001010100100 //Jump to constant address 338
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001010001000 //Jump to constant address 324
11010000000000000000000100000000 //Write value in r0 to address in r1 with offset 0
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001010100100 //Jump to constant address 338
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001010001000 //Jump to constant address 324
01110010011000110001000000000001 //Set r1 to 0x2631
01110000000011000000000100000001 //Set highest 16 bits of r1 to 0xC0
01110000000000000101000000000010 //Set r2 to 0x05
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001010100100 //Jump to constant address 338
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000101110110 //Jump to constant address 187
01110000000011111001000000000001 //Set r1 to 249
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001000100110 //Jump to constant address 275
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001010001000 //Jump to constant address 324
01110010011000110001000000000001 //Set r1 to 0x2631
01110000000011000000000100000001 //Set highest 16 bits of r1 to 0xC0
01110000000000010101000000000010 //Set r2 to 0x15
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001010100100 //Jump to constant address 338
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000110001110 //Jump to constant address 199
01110000000011111101000000000001 //Set r1 to 253
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001000100110 //Jump to constant address 275
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001010001000 //Jump to constant address 324
01110010011000110001000000000001 //Set r1 to 0x2631
01110000000011000000000100000001 //Set highest 16 bits of r1 to 0xC0
01110000000000000101000000000010 //Set r2 to 0x05
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001010100100 //Jump to constant address 338
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000110001110 //Jump to constant address 199
01110000000100000001000000000001 //Set r1 to 257
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001000100110 //Jump to constant address 275
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001010001000 //Jump to constant address 324
01110010011000110001000000000001 //Set r1 to 0x2631
01110000000011000000000100000001 //Set highest 16 bits of r1 to 0xC0
11010000000000000000000100000000 //Write value in r0 to address in r1 with offset 0
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000001010100100 //Jump to constant address 338
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
01110000010001101010000000000001 //Set r1 to 0x046A
01110000000000000001000100000001 //Set highest 16 bits of r1 to 0x1
01110000000000000000000000000010 //Set r2 to 0
00001001100000000001001000000010 //Compute r2 + 1 and write result to r2
00110000000000000010001000010000 //If r2 >= r1, then jump to offset 2
10010000000000000000000110000000 //Jump to constant address 192
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
01110000000000011011000000000001 //Set r1 to 27
01110000000000000000000000000010 //Set r2 to 0
00001001100000000001001000000010 //Compute r2 + 1 and write result to r2
00110000000000000010001000010000 //If r2 >= r1, then jump to offset 2
10010000000000000000000110010110 //Jump to constant address 203
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
00000000000000000000000000000100 //data
01001001011011100110100101110100 //data
00000000000000000000000000001001 //data
01001001011011100110100101110100 //data
00100000011001000110111101101110 //data
01100101000000000000000000000000 //data
00000000000000000000000000001110 //data
01000011011010000110010101100011 //data
01101011011010010110111001100111 //data
00100000011001000111001001101001 //data
01110110011001010000000000000000 //data
00000000000000000000000000011001 //data
01000011011010000110010101100011 //data
01101011011010010110111001100111 //data
00100000011001000111001001101001 //data
01110110011001010010000001100011 //data
01101111011011100110111001100101 //data
01100011011101000110100101101111 //data
01101110000000000000000000000000 //data
00000000000000000000000000010101 //data
01000011011010000110010101100011 //data
01101011011010010110111001100111 //data
00100000011001000111001001101001 //data
01110110011001010010000001110011 //data
01110100011000010111010001110101 //data
01110011000000000000000000000000 //data
00000000000000000000000000011010 //data
01000011011010000110010101100011 //data
01101011011010010110111001100111 //data
00100000011010010110011000100000 //data
01100100011100100110100101110110 //data
01100101001000000110100101110011 //data
00100000011100100110010101100001 //data
01100100011110010000000000000000 //data
00000000000000000000000000001110 //data
01001101011011110111010101101110 //data
01110100011010010110111001100111 //data
00100000011001000111001001101001 //data
01110110011001010000000000000000 //data
00000000000000000000000000001100 //data
01000100011001010111011001101001 //data
01100011011001010010000001110010 //data
01100101011100110110010101110100 //data
00000000000000000000000000001100 //data
01010101010100110100001000100000 //data
01101101011011110110010001100101 //data
00100000011100110110010101110100 //data
00000000000000000000000000010010 //data
01001000011011110111001101110100 //data
00100000011011010110111101100100 //data
01100101001000000111001101100101 //data
01110100001000000111010001101111 //data
00100000001100000000000000000000 //data
00000000000000000000000000010010 //data
01001000011011110111001101110100 //data
00100000011011010110111101100100 //data
01100101001000000111001101100101 //data
01110100001000000111010001101111 //data
00100000001100010000000000000000 //data
00000000000000000000000000010010 //data
01001000011011110111001101110100 //data
00100000011011010110111101100100 //data
01100101001000000111001101100101 //data
01110100001000000111010001101111 //data
00100000001100100000000000000000 //data
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
01110010011000101110000000000011 //Set r3 to 0x262E
01110000000011000000000100000011 //Set highest 16 bits of r3 to 0xC0
01110000000000000000000000000101 //Set r5 to 0
01110000000000100000000000001000 //Set r8 to 32
00001010000000001000100000001000 //Compute r8 - 8 and write result to r8
11100000000000000000000100001001 //Read at address in r1 with offset 0 to r9
00000011000000000000100110001001 //Compute r9 >> r8 and write result to r9
11010000000000000000001110010000 //Write value in r9 to address in r3 with offset 0
01010000000000000011000010000000 //If r0 != r8, then jump to offset 3
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
01110000000000100000000000001000 //Set r8 to 32
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
00110000000000000010010100100000 //If r5 >= r2, then jump to offset 2
10010000000000000000001000111010 //Jump to constant address 285
01110000000000001010000000000010 //Set r2 to 0xA
11010000000000000000001100100000 //Write value in r2 to address in r3 with offset 0
10100000000000000000000000001001 //Pop from stack to r9
10100000000000000000000000001000 //Pop from stack to r8
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000101110000000000011 //Set r3 to 0x262E
01110000000011000000000100000011 //Set highest 16 bits of r3 to 0xC0
00001011000000011000000100000010 //Compute r1 >> 24 and write result to r2
11010000000000000000001100100000 //Write value in r2 to address in r3 with offset 0
00001011000000010000000100000010 //Compute r1 >> 16 and write result to r2
11010000000000000000001100100000 //Write value in r2 to address in r3 with offset 0
00001011000000001000000100000010 //Compute r1 >> 8 and write result to r2
11010000000000000000001100100000 //Write value in r2 to address in r3 with offset 0
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
01110000000000001010000000000010 //Set r2 to 0xA
11010000000000000000001100100000 //Write value in r2 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 0x2630
01110000000011000000000100000011 //Set highest 16 bits of r3 to 0xC0
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01111111111011111111000000000010 //Set r2 to 0b1111111011111111
00000000100000000000000100100001 //Compute r1 AND r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 0x2630
01110000000011000000000100000011 //Set highest 16 bits of r3 to 0xC0
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01110000000100000000000000000010 //Set r2 to 0b100000000
00000000000000000000000100100001 //Compute r1 OR r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
00001000100000001111000100000010 //Compute r1 AND 0b00001111 and write result to r2
00001000100011110000000100000011 //Compute r1 AND 0b11110000 and write result to r3
00001011000000000100001100000011 //Compute r3 >> 4 and write result to r3
01110000000101110110000000000100 //Set r4 to 374
01110000000000000000000100000100 //Set highest 16 bits of r4 to 0
00000001100000000000001001000010 //Compute r2 + r4 and write result to r2
00000001100000000000001101000011 //Compute r3 + r4 and write result to r3
01110000000000000000000000000001 //Set r1 to 0
01110011000001111000000100000001 //Set highest 16 bits of r1 to 0x3078
11100000000000000000001000000010 //Read at address in r2 with offset 0 to r2
11100000000000000000001100000011 //Read at address in r3 with offset 0 to r3
00001010100000001000001100000011 //Compute r3 << 8 and write result to r3
00000001100000000000001000010001 //Compute r2 + r1 and write result to r1
00000001100000000000001100010001 //Compute r3 + r1 and write result to r1
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
00000000000000000000000000110000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110010 //data
00000000000000000000000000110011 //data
00000000000000000000000000110100 //data
00000000000000000000000000110101 //data
00000000000000000000000000110110 //data
00000000000000000000000000110111 //data
00000000000000000000000000111000 //data
00000000000000000000000000111001 //data
00000000000000000000000001000001 //data
00000000000000000000000001000010 //data
00000000000000000000000001000011 //data
00000000000000000000000001000100 //data
00000000000000000000000001000101 //data
00000000000000000000000001000110 //data
00010000000000000000000000000000 //Return from interrupt
00010000000000000000000000000000 //Return from interrupt
00010000000000000000000000000000 //Return from interrupt
00010000000000000000000000000000 //Return from interrupt
