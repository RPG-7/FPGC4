10010000000000000000000000001100 //Jump to constant address 6
10010000000000000000000101010100 //Jump to constant address 170
10010000000000000000000110000010 //Jump to constant address 193
10010000000000000000000110110000 //Jump to constant address 216
10010000000000000000000111011110 //Jump to constant address 239
00000000000000000000000100010111 //Length of program
01110000000000000000000000001111 //Set rsp to 0
01110000000001110000000100001111 //Set highest 16 bits of rsp to 112
01110000000000001110000000000001 //Set r1 to 14
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000000000001100000 //Jump to constant address 48
11111111111111111111111111111111 //Halt
01110010011000101110000000000010 //Set r2 to 9774
01110000000011000000000100000010 //Set highest 16 bits of r2 to 192
11010000000000000000001000010000 //Write value in r1 to address in r2 with offset 0
11111111111111111111111111111111 //Halt
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
00000001100000000000000101000001 //Compute r1 + r4 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000000010010000000000001 //Set r1 to 18
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00001000000000000010000000000100 //Compute r0 OR 2 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000001000111100001111 //Compute rsp - 8 and write result to rsp
01110000000000000101000000001100 //Set r12 to 5
11010000000000000100111011000001 //Write value in r12 to address in rbp with offset -4
01110000000000000000000000001100 //Set r12 to 0
11010000000000001000111011000001 //Write value in r12 to address in rbp with offset -8
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000001000111000101100 //Read at address in rbp with offset -8 to r12
01110000000000000011000000001101 //Set r13 to 3
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000000000001111100 //Jump to constant address 62
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000000010100010 //Jump to constant address 81
01110000000000010010000000000001 //Set r1 to 18
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
11100000000000001000111000101100 //Read at address in rbp with offset -8 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000000100111000010001 //Write value in r1 to address in rbp with offset -4
11100000000000001000111000100001 //Read at address in rbp with offset -8 to r1
11100000000000001000111000100001 //Read at address in rbp with offset -8 to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
11010000000000001000111000010001 //Write value in r1 to address in rbp with offset -8
10010000000000000000000001110000 //Jump to constant address 56
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
01110000000000001000000000001101 //Set r13 to 8
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000000010101110 //Jump to constant address 87
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000000011001000 //Jump to constant address 100
01110000000000011110000000000001 //Set r1 to 30
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000000100111000010001 //Write value in r1 to address in rbp with offset -4
10010000000000000000000011010110 //Jump to constant address 107
00001000001111100111000000000001 //Compute r0 OR 999 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000000000000000001 //Set r1 to 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
01110000000000001001000000001101 //Set r13 to 9
01000000000000000010110111000000 //If r13 > r12, then jump to offset 2
10010000000000000000000011100100 //Jump to constant address 114
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000000011110100 //Jump to constant address 122
11100000000000000100111000100010 //Read at address in rbp with offset -4 to r2
00001010000000000001001000000010 //Compute r2 - 1 and write result to r2
11010000000000000100111000100001 //Write value in r2 to address in rbp with offset -4
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
10010000000000000000000011011000 //Jump to constant address 108
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110000000100000110000000000001 //Set r1 to 262
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000000000100000100 //Jump to constant address 130
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110000000100000110000000000001 //Set r1 to 262
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000000000100011000 //Jump to constant address 140
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110000000100000110000000000001 //Set r1 to 262
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000000000100101100 //Jump to constant address 150
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110000000100000110000000000001 //Set r1 to 262
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000000000101000000 //Jump to constant address 160
11111111111111111111111111111111 //Halt
10100000000000000000000000001111 //Pop from stack to rsp
10100000000000000000000000001110 //Pop from stack to rbp
10100000000000000000000000001101 //Pop from stack to r13
10100000000000000000000000001100 //Pop from stack to r12
10100000000000000000000000001011 //Pop from stack to r11
10100000000000000000000000001010 //Pop from stack to r10
10100000000000000000000000001001 //Pop from stack to r9
10100000000000000000000000001000 //Pop from stack to r8
10100000000000000000000000000111 //Pop from stack to r7
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00010000000000000000000000000000 //Return from interrupt
11111111111111111111111111111111 //Halt
