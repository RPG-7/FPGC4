10010000000000000000000010111010 //Jump to constant address 93
10010000000000000000000011000110 //Jump to constant address 99
10010000000000000000000011011100 //Jump to constant address 110
10010000000000000000000100000100 //Jump to constant address 130
10010000000000000000000100011010 //Jump to constant address 141
00000000000000000000000010101101 //Length of program
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
00001000100000001111000100000010 //Compute r1 AND 0b00001111 and write result to r2
00001000100011110000000100000011 //Compute r1 AND 0b11110000 and write result to r3
00001011000000000100001100000011 //Compute r3 >> 4 and write result to r3
01110000000000011100000000000100 //Set r4 to 28
01110000000000000000000100000100 //Set highest 16 bits of r4 to 0
00000001100000000000001001000010 //Compute r2 + r4 and write result to r2
00000001100000000000001101000011 //Compute r3 + r4 and write result to r3
01110000000000000000000000000001 //Set r1 to 0
01110011000001111000000100000001 //Set highest 16 bits of r1 to 0x3078
11100000000000000000001000000010 //Read at address in r2 with offset 0 to r2
11100000000000000000001100000011 //Read at address in r3 with offset 0 to r3
00001010100000001000001100000011 //Compute r3 << 8 and write result to r3
00000001100000000000001000010001 //Compute r2 + r1 and write result to r1
00000001100000000000001100010001 //Compute r3 + r1 and write result to r1
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
00000000000000000000000000110000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110010 //data
00000000000000000000000000110011 //data
00000000000000000000000000110100 //data
00000000000000000000000000110101 //data
00000000000000000000000000110110 //data
00000000000000000000000000110111 //data
00000000000000000000000000111000 //data
00000000000000000000000000111001 //data
00000000000000000000000001000001 //data
00000000000000000000000001000010 //data
00000000000000000000000001000011 //data
00000000000000000000000001000100 //data
00000000000000000000000001000101 //data
00000000000000000000000001000110 //data
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
01110010011000101110000000000011 //Set r3 to 9774
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
01110000000000000000000000000101 //Set r5 to 0
01110000000000100000000000001000 //Set r8 to 32
00001010000000001000100000001000 //Compute r8 - 8 and write result to r8
11100000000000000000000100001001 //Read at address in r1 with offset 0 to r9
00000011000000000000100110001001 //Compute r9 >> r8 and write result to r9
11010000000000000000001110010000 //Write value in r9 to address in r3 with offset 0
01010000000000000011000010000000 //If r0 != r8, then jump to offset 3
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
01110000000000100000000000001000 //Set r8 to 32
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
00110000000000000010010100100000 //If r5 >= r2, then jump to offset 2
10010000000000000000000001101100 //Jump to constant address 54
01110000000000001010000000000010 //Set r2 to 0xA
11010000000000000000001100100000 //Write value in r2 to address in r3 with offset 0
10100000000000000000000000001001 //Pop from stack to r9
10100000000000000000000000001000 //Pop from stack to r8
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000101110000000000011 //Set r3 to 9774
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
00001011000000011000000100000010 //Compute r1 >> 24 and write result to r2
11010000000000000000001100100000 //Write value in r2 to address in r3 with offset 0
00001011000000010000000100000010 //Compute r1 >> 16 and write result to r2
11010000000000000000001100100000 //Write value in r2 to address in r3 with offset 0
00001011000000001000000100000010 //Compute r1 >> 8 and write result to r2
11010000000000000000001100100000 //Write value in r2 to address in r3 with offset 0
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
01110000000000001010000000000010 //Set r2 to 0xA
11010000000000000000001100100000 //Write value in r2 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
01110111001101110100000000000001 //Set r1 to 29556
01110111010001100101000100000001 //Set highest 16 bits of r1 to 29797
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000010010100 //Jump to constant address 74
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00010000000000000000000000000000 //Return from interrupt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
01110010011000100011000000000001 //Set r1 to 9763
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000000001100 //Jump to constant address 6
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000010010100 //Jump to constant address 74
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00010000000000000000000000000000 //Return from interrupt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00010000000000000000000000000000 //Return from interrupt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
01110010010000100001000000000001 //Set r1 to 0x2421
01110000000011000000000100000001 //Set highest 16 bits of r1 to 0xC0
01110010010000100000000000000010 //Set r2 to 0x2420
01110000000011000000000100000010 //Set highest 16 bits of r2 to 0xC0
11100000000000000000000100000011 //Read at address in r1 with offset 0 to r3
11100000000000000000001000000100 //Read at address in r2 with offset 0 to r4
00001000100000000111001100000101 //Compute r3 AND 0b111 and write result to r5
00001010000000000111010100000101 //Compute r5 - 0b111 and write result to r5
01010000000000000011010100000000 //If r5 != r0, then jump to offset 3
00001001100000000001010000000100 //Compute r4 + 1 and write result to r4
11010000000000000000001001000000 //Write value in r4 to address in r2 with offset 0
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
11010000000000000000000100110000 //Write value in r3 to address in r1 with offset 0
01110010011000110010000000000001 //Set r1 to 0x2632
01110000000011000000000100000001 //Set highest 16 bits of r1 to 0xC0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001001000000010 //Compute r2 + 1 and write result to r2
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
11100000000000000001000100000010 //Read at address in r1 with offset 1 to r2
00001001100000000001001000000010 //Compute r2 + 1 and write result to r2
11010000000000000001000100100000 //Write value in r2 to address in r1 with offset 1
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00010000000000000000000000000000 //Return from interrupt
