10010000000000000000000000001100 //Jump to constant address 6
10010000000000000010101010100010 //Jump to constant address 5457
10010000000000000010101011010000 //Jump to constant address 5480
10010000000000000010101011111110 //Jump to constant address 5503
10010000000000000010101100101100 //Jump to constant address 5526
00000000000000000001010110111110 //Length of program
01110000000000000000000000001111 //Set rsp to 0
01110000000001110000000100001111 //Set highest 16 bits of rsp to 112
01110000000000001110000000000001 //Set r1 to 14
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000010100101011110 //Jump to constant address 5295
11111111111111111111111111111111 //Halt
01110010011000101110000000000010 //Set r2 to 9774
01110000000011000000000100000010 //Set highest 16 bits of r2 to 192
11010000000000000000001000010000 //Write value in r1 to address in r2 with offset 0
11111111111111111111111111111111 //Halt
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000000000 //data
00000000000000000000000001000100 //data
00000000000000000000000001100101 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100110 //data
00000000000000000000000001101001 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000000000 //data
00000000000000000000000000001010 //data
00000000000000000000000000000000 //data
00000000000000000000000001010011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110000 //data
00000000000000000000000000000000 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000001001000 //data
00000000000000000000000001101111 //data
00000000000000000000000001110011 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000001100100 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001001101 //data
00000000000000000000000001101111 //data
00000000000000000000000001110101 //data
00000000000000000000000001101110 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000010 //data
00000000000000000000000001111001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110101 //data
00000000000000000000000001110011 //data
00000000000000000000000001100010 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110110 //data
00000000000000000000000001100001 //data
00000000000000000000000001101100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001101001 //data
00000000000000000000000001111010 //data
00000000000000000000000001100101 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001001111 //data
00000000000000000000000001110000 //data
00000000000000000000000001100101 //data
00000000000000000000000001101110 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100110 //data
00000000000000000000000001101001 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000011 //data
00000000000000000000000001101100 //data
00000000000000000000000001101111 //data
00000000000000000000000001110011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001000011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001110101 //data
00000000000000000000000001110011 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000100 //data
00000000000000000000000001110010 //data
00000000000000000000000001101001 //data
00000000000000000000000001110110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000001111001 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001010010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110001 //data
00000000000000000000000001110101 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110111 //data
00000000000000000000000001110010 //data
00000000000000000000000001101001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100110 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000000100000 //data
00000000000000000000000001100010 //data
00000000000000000000000001111001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000000000000 //data
00000000000000000000000001001101 //data
00000000000000000000000001101111 //data
00000000000000000000000001110101 //data
00000000000000000000000001101110 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001110010 //data
00000000000000000000000001101001 //data
00000000000000000000000001110110 //data
00000000000000000000000001100101 //data
00000000000000000000000000000000 //data
00000000000000000000000001000011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001110101 //data
00000000000000000000000001110011 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000010 //data
00000000000000000000000001111001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001010111 //data
00000000000000000000000001010010 //data
00000000000000000000000000100000 //data
00000000000000000000000001100111 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001010011 //data
00000000000000000000000001100101 //data
00000000000000000000000001101110 //data
00000000000000000000000001100100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100110 //data
00000000000000000000000001101001 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000001101110 //data
00000000000000000000000001100001 //data
00000000000000000000000001101101 //data
00000000000000000000000001100101 //data
00000000000000000000000000000000 //data
00000000000000000000000001000110 //data
00000000000000000000000001101001 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000001101110 //data
00000000000000000000000001100001 //data
00000000000000000000000001101101 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001101110 //data
00000000000000000000000001110100 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110101 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001110111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000001110110 //data
00000000000000000000000001101001 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000011 //data
00000000000000000000000001110101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110011 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110000 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110101 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101111 //data
00000000000000000000000001110000 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000001100110 //data
00000000000000000000000001110101 //data
00000000000000000000000001101100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001001111 //data
00000000000000000000000001110000 //data
00000000000000000000000001100101 //data
00000000000000000000000001101110 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110101 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001110111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000001110110 //data
00000000000000000000000001101001 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110101 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001110111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000001110110 //data
00000000000000000000000001101001 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001010011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001110101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110011 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100101 //data
00000000000000000000000001101110 //data
00000000000000000000000001100100 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000010 //data
00000000000000000000000001111001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001010111 //data
00000000000000000000000001010010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110001 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110110 //data
00000000000000000000000001100001 //data
00000000000000000000000001101100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001101001 //data
00000000000000000000000001111010 //data
00000000000000000000000001100101 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001010011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010010 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110001 //data
00000000000000000000000001110101 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001000011 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100110 //data
00000000000000000000000001101001 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110101 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001110111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000001110110 //data
00000000000000000000000001101001 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001010011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110001 //data
00000000000000000000000000000000 //data
00000000000000000000000001000011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001101001 //data
00000000000000000000000001100110 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001110010 //data
00000000000000000000000001101001 //data
00000000000000000000000001110110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000001111001 //data
00000000000000000000000000000000 //data
00000000000000000000000001000011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001110101 //data
00000000000000000000000001110011 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110010 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110101 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101111 //data
00000000000000000000000001110000 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000001100110 //data
00000000000000000000000001110101 //data
00000000000000000000000001101100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001000010 //data
00000000000000000000000001111001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001010010 //data
00000000000000000000000001000100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110101 //data
00000000000000000000000001110011 //data
00000000000000000000000001100010 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000000110000 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000011 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001000010 //data
00000000000000000000000001111001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001010111 //data
00000000000000000000000001010010 //data
00000000000000000000000000100000 //data
00000000000000000000000001100111 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000001110101 //data
00000000000000000000000001110000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100110 //data
00000000000000000000000001101001 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001101001 //data
00000000000000000000000001111010 //data
00000000000000000000000001100101 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001000011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001110101 //data
00000000000000000000000001110011 //data
00000000000000000000000000000000 //data
00000000000000000000000000001010 //data
00000000000000000000000000000000 //data
00000000000000000000000001010010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110001 //data
00000000000000000000000001110101 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000001100110 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110000 //data
00000000000000000000000000100000 //data
00000000000000000000000001100010 //data
00000000000000000000000001111001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110101 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101111 //data
00000000000000000000000001110000 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000001100110 //data
00000000000000000000000001110101 //data
00000000000000000000000001101100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000001010011 //data
00000000000000000000000001101100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000001100100 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000100 //data
00000000000000000000000001100101 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110101 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101111 //data
00000000000000000000000001110000 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000001100110 //data
00000000000000000000000001110101 //data
00000000000000000000000001101100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110010 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110101 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101111 //data
00000000000000000000000001110000 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000001100110 //data
00000000000000000000000001110101 //data
00000000000000000000000001101100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001010011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110010 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010111 //data
00000000000000000000000001110010 //data
00000000000000000000000001101001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110001 //data
00000000000000000000000001110101 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001110111 //data
00000000000000000000000001110010 //data
00000000000000000000000001101001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001000011 //data
00000000000000000000000001101100 //data
00000000000000000000000001101111 //data
00000000000000000000000001110011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100110 //data
00000000000000000000000001101001 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000000000 //data
00000000000000000000000001010011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110010 //data
00000000000000000000000000000000 //data
00000000000000000000000001000010 //data
00000000000000000000000001111001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001010111 //data
00000000000000000000000001010010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110001 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000000000000 //data
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000110000011000 //Jump to constant address 1548
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110000101100 //Jump to constant address 1558
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
01000000000000000010110111000000 //If r13 > r12, then jump to offset 2
10010000000000000000110000111110 //Jump to constant address 1567
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110001001110 //Jump to constant address 1575
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
00000010000000000000010111000101 //Compute r5 - r12 and write result to r5
01110000000000000001000000001100 //Set r12 to 1
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
10010000000000000000110000110000 //Jump to constant address 1560
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000110001110000 //Jump to constant address 1592
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110010000100 //Jump to constant address 1602
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
01000000000000000010110111000000 //If r13 > r12, then jump to offset 2
10010000000000000000110010010100 //Jump to constant address 1610
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110010100000 //Jump to constant address 1616
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
00000010000000000000010111000101 //Compute r5 - r12 and write result to r5
10010000000000000000110010000110 //Jump to constant address 1603
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110010011000101110000000000001 //Set r1 to 9774
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
00000000000000000000000001010101 //Compute r0 OR r5 and write result to r5
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110010011000101110000000000011 //Set r3 to 9774
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000010100000010 //Read at address in r5 with offset 0 to r2
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
00001000000000000001000000000100 //Compute r0 OR 1 and write result to r4
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000000110011101010 //Jump to constant address 1653
00001000000000000000000000000100 //Compute r0 OR 0 and write result to r4
00001010000000000000010000001100 //Compute r4 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110011111110 //Jump to constant address 1663
00000000000000000000000000100010 //Compute r0 OR r2 and write result to r2
11010000000000000000001100100000 //Write value in r2 to address in r3 with offset 0
11100000000000000000010100000001 //Read at address in r5 with offset 0 to r1
01110000000000000001000000001100 //Set r12 to 1
00000001100000000000010111000101 //Compute r5 + r12 and write result to r5
11100000000000000000010100000010 //Read at address in r5 with offset 0 to r2
10010000000000000000110011011010 //Jump to constant address 1645
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000101011000000000101 //Set r5 to 43
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000010100111100001111 //Compute rsp - 20 and write result to rsp
11010000000000000100111001010001 //Write value in r5 to address in rbp with offset -4
11010000000000001100111001000001 //Write value in r4 to address in rbp with offset -12
01110000011000101110000000000001 //Set r1 to 1582
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00001000000000001010000000000100 //Compute r0 OR 10 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000010000111000010001 //Write value in r1 to address in rbp with offset -16
01110000000000000000000000001100 //Set r12 to 0
11010000000000010100111011000001 //Write value in r12 to address in rbp with offset -20
01110000011000000010000000000001 //Set r1 to 1538
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00001000000000001010000000000100 //Compute r0 OR 10 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000000100111000010001 //Write value in r1 to address in rbp with offset -4
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
01110000000000000000000000001101 //Set r13 to 0
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000000110110000000 //Jump to constant address 1728
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110110100000 //Jump to constant address 1744
01110000011010011110000000000001 //Set r1 to 1694
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
11100000000000001100111000101100 //Read at address in rbp with offset -12 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000000010100111000101100 //Read at address in rbp with offset -20 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000010100111000010001 //Write value in r1 to address in rbp with offset -20
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000000010000111000100010 //Read at address in rbp with offset -16 to r2
00001001100000110000001000000010 //Compute r2 + 48 and write result to r2
11100000000000010100111000100001 //Read at address in rbp with offset -20 to r1
11100000000000010100111000100011 //Read at address in rbp with offset -20 to r3
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
11010000000000010100111000110001 //Write value in r3 to address in rbp with offset -20
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000000001100111000101100 //Read at address in rbp with offset -12 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
11100000000000010100111000101100 //Read at address in rbp with offset -20 to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011100111100001111 //Compute rsp - 28 and write result to rsp
11010000000000011100111001000001 //Write value in r4 to address in rbp with offset -28
01110000011010011110000000000001 //Set r1 to 1694
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011100111000101100 //Read at address in rbp with offset -28 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000000011100111000101100 //Read at address in rbp with offset -28 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000110000111100001111 //Compute rsp - 48 and write result to rsp
11010000000000100000111001010001 //Write value in r5 to address in rbp with offset -32
11010000000000101000111001000001 //Write value in r4 to address in rbp with offset -40
01110000011000101110000000000001 //Set r1 to 1582
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100000111000101100 //Read at address in rbp with offset -32 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00001000000000010000000000000100 //Compute r0 OR 16 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000101100111000010001 //Write value in r1 to address in rbp with offset -44
01110000000000000000000000001100 //Set r12 to 0
11010000000000110000111011000001 //Write value in r12 to address in rbp with offset -48
01110000011000000010000000000001 //Set r1 to 1538
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100000111000101100 //Read at address in rbp with offset -32 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00001000000000010000000000000100 //Compute r0 OR 16 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000100000111000010001 //Write value in r1 to address in rbp with offset -32
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000100000111000101100 //Read at address in rbp with offset -32 to r12
01110000000000000000000000001101 //Set r13 to 0
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000000111001000010 //Jump to constant address 1825
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111001100010 //Jump to constant address 1841
01110000011011111111000000000001 //Set r1 to 1791
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100000111000101100 //Read at address in rbp with offset -32 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
11100000000000101000111000101100 //Read at address in rbp with offset -40 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000000110000111000101100 //Read at address in rbp with offset -48 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000110000111000010001 //Write value in r1 to address in rbp with offset -48
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000101100111000101100 //Read at address in rbp with offset -44 to r12
01110000000000001001000000001101 //Set r13 to 9
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000000111001110000 //Jump to constant address 1848
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111010000000 //Jump to constant address 1856
11100000000000101100111000100010 //Read at address in rbp with offset -44 to r2
00001001100001000001001000000010 //Compute r2 + 65 and write result to r2
01110000000000001010000000001100 //Set r12 to 10
00000010000000000000001011000010 //Compute r2 - r12 and write result to r2
10010000000000000000111010000110 //Jump to constant address 1859
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000000101100111000100010 //Read at address in rbp with offset -44 to r2
00001001100000110000001000000010 //Compute r2 + 48 and write result to r2
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000000110000111000100001 //Read at address in rbp with offset -48 to r1
11100000000000110000111000100011 //Read at address in rbp with offset -48 to r3
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
11010000000000110000111000110001 //Write value in r3 to address in rbp with offset -48
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000000101000111000101100 //Read at address in rbp with offset -40 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
11100000000000110000111000101100 //Read at address in rbp with offset -48 to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000111000111100001111 //Compute rsp - 56 and write result to rsp
11010000000000111000111001000001 //Write value in r4 to address in rbp with offset -56
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001011100000000001000100000001 //Compute r1 * 1 and write result to r1
11100000000000111000111000101100 //Read at address in rbp with offset -56 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
01110000000000110000000000001100 //Set r12 to 48
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00001011100000000001000100000001 //Compute r1 * 1 and write result to r1
11100000000000111000111000101100 //Read at address in rbp with offset -56 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
01110000000001111000000000001100 //Set r12 to 120
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00001000000000000010000000000001 //Compute r0 OR 2 and write result to r1
00001011100000000001000100000001 //Compute r1 * 1 and write result to r1
11100000000000111000111000101100 //Read at address in rbp with offset -56 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000111000111000010001 //Write value in r1 to address in rbp with offset -56
01110000011011111111000000000001 //Set r1 to 1791
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000111000111000101100 //Read at address in rbp with offset -56 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000000111000111000101100 //Read at address in rbp with offset -56 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000000000000000000000011 //Set r3 to 0
01110000000001001100000100000011 //Set highest 16 bits of r3 to 76
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000001111000000 //Write value in r12 to address in r3 with offset 0
01110010011000100110000000000001 //Set r1 to 9766
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
01110010011000100111000000000001 //Set r1 to 9767
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
01110000000000000001000000001100 //Set r12 to 1
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000000000000001100000010 //Read at address in r3 with offset 0 to r2
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000111100110000 //Jump to constant address 1944
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111100111000 //Jump to constant address 1948
10010000000000000000111100100000 //Jump to constant address 1936
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 9776
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01111111111011111111000000000010 //Set r2 to 0b1111111011111111
00000000100000000000000100100001 //Compute r1 AND r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 9776
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01110000000100000000000000000010 //Set r2 to 0b100000000
00000000000000000000000100100001 //Compute r1 OR r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110010011000110001000000000001 //Set r1 to 9777
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001000000111100001111 //Compute rsp - 64 and write result to rsp
11010000000001000000111001010001 //Write value in r5 to address in rbp with offset -64
11100000000001000000111000100001 //Read at address in rbp with offset -64 to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000000111111011000 //Jump to constant address 2028
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111111111010 //Jump to constant address 2045
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000001010101 //Compute r0 OR r5 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001000000111000100001 //Read at address in rbp with offset -64 to r1
11100000000001000000111000100001 //Read at address in rbp with offset -64 to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
11010000000001000000111000010001 //Write value in r1 to address in rbp with offset -64
11100000000001000000111000100001 //Read at address in rbp with offset -64 to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
10010000000000000000111111001000 //Jump to constant address 2020
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001010000111100001111 //Compute rsp - 80 and write result to rsp
11010000000001001000111001010001 //Write value in r5 to address in rbp with offset -72
11010000000001001100111001000001 //Write value in r4 to address in rbp with offset -76
11100000000001001000111000100001 //Read at address in rbp with offset -72 to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
01110000000000000000000000001100 //Set r12 to 0
11010000000001010000111011000001 //Write value in r12 to address in rbp with offset -80
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001010000111000100010 //Read at address in rbp with offset -80 to r2
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
11100000000001001100111000101101 //Read at address in rbp with offset -76 to r13
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000001000000101100 //Jump to constant address 2070
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001000001011000 //Jump to constant address 2092
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000001010101 //Compute r0 OR r5 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001001000111000100001 //Read at address in rbp with offset -72 to r1
11100000000001001000111000100001 //Read at address in rbp with offset -72 to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
11010000000001001000111000010001 //Write value in r1 to address in rbp with offset -72
11100000000001001000111000100001 //Read at address in rbp with offset -72 to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000001010000111000100001 //Read at address in rbp with offset -80 to r1
11100000000001010000111000100001 //Read at address in rbp with offset -80 to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
11010000000001010000111000010001 //Write value in r1 to address in rbp with offset -80
10010000000000000001000000011100 //Jump to constant address 2062
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001011110111100001111 //Compute rsp - 94 and write result to rsp
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000111100000000000101 //Compute r0 OR 60 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000101000000000101 //Compute r0 OR 5 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000010010000000000101 //Set r5 to 18
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000101101000000000101 //Set r5 to 45
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010101000000000101 //Compute r0 OR 21 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000101000000000101 //Compute r0 OR 5 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001011110111000010001 //Write value in r1 to address in rbp with offset -94
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101010110000000000001 //Set r1 to 1878
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001011010111000000100 //Compute rbp - 90 and write result to r4
11100000000001011110111000101100 //Read at address in rbp with offset -94 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001011010111000000101 //Compute rbp - 90 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001000000111000000000101 //Set r5 to 519
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001101100111100001111 //Compute rsp - 108 and write result to rsp
01110000000000000000000000001100 //Set r12 to 0
11010000000001101100111011000001 //Write value in r12 to address in rbp with offset -108
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
01110000000000010101000000001101 //Set r13 to 21
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001000111010000 //Jump to constant address 2280
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001001110100 //Jump to constant address 2362
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000101001001000000000101 //Set r5 to 329
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001101100111000010001 //Write value in r1 to address in rbp with offset -108
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101010110000000000001 //Set r1 to 1878
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000100 //Compute rbp - 104 and write result to r4
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000101 //Compute rbp - 104 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001001011100000000000101 //Set r5 to 604
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001000111000010 //Jump to constant address 2273
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001100001001000000000101 //Set r5 to 777
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010101000000000101 //Compute r0 OR 21 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000111000000000101 //Compute r0 OR 7 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001101100111000010001 //Write value in r1 to address in rbp with offset -108
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101010110000000000001 //Set r1 to 1878
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000100 //Compute rbp - 104 and write result to r4
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000101 //Compute rbp - 104 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010010101001000000000101 //Set r5 to 1193
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010110000110000000000101 //Set r5 to 1414
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010101000000000101 //Compute r0 OR 21 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000110000000000101 //Compute r0 OR 6 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001101100111000010001 //Write value in r1 to address in rbp with offset -108
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101010110000000000001 //Set r1 to 1878
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000100 //Compute rbp - 104 and write result to r4
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000101 //Compute rbp - 104 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010101010000000000000101 //Set r5 to 1360
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000001101100111011000001 //Write value in r12 to address in rbp with offset -108
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
01110000000000010101000000001101 //Set r13 to 21
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001010000101000 //Jump to constant address 2580
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001010011001100 //Jump to constant address 2662
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001111000101000000000101 //Set r5 to 965
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001101100111000010001 //Write value in r1 to address in rbp with offset -108
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101010110000000000001 //Set r1 to 1878
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000100 //Compute rbp - 104 and write result to r4
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000101 //Compute rbp - 104 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001101011000000000000101 //Set r5 to 856
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001010000011010 //Jump to constant address 2573
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001110101010000000000101 //Set r5 to 938
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000110000000000000101 //Compute r0 OR 48 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000001101100111011000001 //Write value in r12 to address in rbp with offset -108
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001010100010110 //Jump to constant address 2699
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001010110101010 //Jump to constant address 2773
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001101100111000010001 //Write value in r1 to address in rbp with offset -108
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101010110000000000001 //Set r1 to 1878
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000100 //Compute rbp - 104 and write result to r4
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000101 //Compute rbp - 104 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000011110111000000000101 //Set r5 to 247
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001010100001000 //Jump to constant address 2692
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000100111010000000000101 //Set r5 to 314
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000110001000000000101 //Compute r0 OR 49 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000001101100111011000001 //Write value in r12 to address in rbp with offset -108
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001010111110100 //Jump to constant address 2810
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001011010001000 //Jump to constant address 2884
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001101100111000010001 //Write value in r1 to address in rbp with offset -108
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101010110000000000001 //Set r1 to 1878
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000100 //Compute rbp - 104 and write result to r4
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000101 //Compute rbp - 104 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000001100010000000000101 //Set r5 to 98
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001010111100110 //Jump to constant address 2803
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001111010111100001111 //Compute rsp - 122 and write result to rsp
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001011001010000000000101 //Set r5 to 714
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000111001000000000101 //Compute r0 OR 57 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000011111111000000000101 //Compute r0 OR 255 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000011111111000000000101 //Compute r0 OR 255 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000011111111000000000101 //Compute r0 OR 255 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000011111111000000000101 //Compute r0 OR 255 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000001111010111011000001 //Write value in r12 to address in rbp with offset -122
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001111010111000101100 //Read at address in rbp with offset -122 to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001011100101100 //Jump to constant address 2966
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001011111000000 //Jump to constant address 3040
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001111010111000010001 //Write value in r1 to address in rbp with offset -122
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101010110000000000001 //Set r1 to 1878
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001110110111000000100 //Compute rbp - 118 and write result to r4
11100000000001111010111000101100 //Read at address in rbp with offset -122 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001110110111000000101 //Compute rbp - 118 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000111100001000000000101 //Set r5 to 481
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001011100011110 //Jump to constant address 2959
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000010001100111100001111 //Compute rsp - 140 and write result to rsp
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010010001111000000000101 //Set r5 to 1167
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000111010000000000101 //Compute r0 OR 58 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000010001000111011000001 //Write value in r12 to address in rbp with offset -136
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000010001000111000101100 //Read at address in rbp with offset -136 to r12
01110000000000011101000000001101 //Set r13 to 29
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001100001001000 //Jump to constant address 3108
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100011000100 //Jump to constant address 3170
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000010001000111000010001 //Write value in r1 to address in rbp with offset -136
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101010110000000000001 //Set r1 to 1878
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010000100111000000100 //Compute rbp - 132 and write result to r4
11100000000010001000111000101100 //Read at address in rbp with offset -136 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010000100111000000101 //Compute rbp - 132 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001100100100000000000101 //Set r5 to 804
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001100000111010 //Jump to constant address 3101
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010000011011000000000101 //Set r5 to 1051
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100111000000000101 //Compute r0 OR 39 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000010001000111000010001 //Write value in r1 to address in rbp with offset -136
01110000000000000000000000001100 //Set r12 to 0
11010000000010001100111011000001 //Write value in r12 to address in rbp with offset -140
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000010001100111000101100 //Read at address in rbp with offset -140 to r12
01110000000000010100000000001101 //Set r13 to 20
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000001100100100000 //Jump to constant address 3216
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100101001110 //Jump to constant address 3239
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001011000000000000010 //Set r2 to 1624
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00000000000000000000000000010101 //Compute r0 OR r1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000100000 //Jump to reg r2 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000010001100111000100001 //Read at address in rbp with offset -140 to r1
11100000000010001100111000100001 //Read at address in rbp with offset -140 to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
11010000000010001100111000010001 //Write value in r1 to address in rbp with offset -140
10010000000000000001100100010010 //Jump to constant address 3209
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010010001101000000000101 //Set r5 to 1165
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101010110000000000001 //Set r1 to 1878
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010000100111000000100 //Compute rbp - 132 and write result to r4
11100000000010001000111000101100 //Read at address in rbp with offset -136 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010000100111000000101 //Compute rbp - 132 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000010000010000000000101 //Set r5 to 130
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000010100110111100001111 //Compute rsp - 166 and write result to rsp
11010000000010011110111001010001 //Write value in r5 to address in rbp with offset -158
11010000000010100010111001000001 //Write value in r4 to address in rbp with offset -162
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000100100000000000000101 //Set r5 to 288
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000111100000000000101 //Compute r0 OR 60 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000010100010111000101100 //Read at address in rbp with offset -162 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000010100110111011000001 //Write value in r12 to address in rbp with offset -166
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000010100110111000101100 //Read at address in rbp with offset -166 to r12
01110000000000011110000000001101 //Set r13 to 30
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001101000101000 //Jump to constant address 3348
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001101010100100 //Jump to constant address 3410
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000010100110111000010001 //Write value in r1 to address in rbp with offset -166
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101010110000000000001 //Set r1 to 1878
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010010110111000000100 //Compute rbp - 150 and write result to r4
11100000000010100110111000101100 //Read at address in rbp with offset -166 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010010110111000000101 //Compute rbp - 150 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010110100001000000000101 //Set r5 to 1441
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001101000011010 //Jump to constant address 3341
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010111110001000000000101 //Set r5 to 1521
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000101101000000000101 //Compute r0 OR 45 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000010100110111000010001 //Write value in r1 to address in rbp with offset -166
01110000100000000100000000000001 //Set r1 to 2052
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000010011110111000101100 //Read at address in rbp with offset -158 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
11100000000010100010111000101100 //Read at address in rbp with offset -162 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101010110000000000001 //Set r1 to 1878
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010010110111000000100 //Compute rbp - 150 and write result to r4
11100000000010100110111000101100 //Read at address in rbp with offset -166 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010010110111000000101 //Compute rbp - 150 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001011100000000000000101 //Set r5 to 736
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010001001101000000000101 //Set r5 to 1101
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000111101000000000101 //Compute r0 OR 61 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000010100110111011000001 //Write value in r12 to address in rbp with offset -166
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000010100110111000101100 //Read at address in rbp with offset -166 to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001101101111000 //Jump to constant address 3516
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001101111110100 //Jump to constant address 3578
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000010100110111000010001 //Write value in r1 to address in rbp with offset -166
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101010110000000000001 //Set r1 to 1878
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010010110111000000100 //Compute rbp - 150 and write result to r4
11100000000010100110111000101100 //Read at address in rbp with offset -166 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010010110111000000101 //Compute rbp - 150 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000101101001000000000101 //Set r5 to 361
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001101101101010 //Jump to constant address 3509
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000010110100111100001111 //Compute rsp - 180 and write result to rsp
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000010101011000000000101 //Set r5 to 171
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000110010000000000101 //Compute r0 OR 50 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000010110100111011000001 //Write value in r12 to address in rbp with offset -180
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000010110100111000101100 //Read at address in rbp with offset -180 to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001110001100000 //Jump to constant address 3632
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001110011011100 //Jump to constant address 3694
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000010110100111000010001 //Write value in r1 to address in rbp with offset -180
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101010110000000000001 //Set r1 to 1878
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010110000111000000100 //Compute rbp - 176 and write result to r4
11100000000010110100111000101100 //Read at address in rbp with offset -180 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010110000111000000101 //Compute rbp - 176 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001000111101000000000101 //Set r5 to 573
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001110001010010 //Jump to constant address 3625
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000011000010111100001111 //Compute rsp - 194 and write result to rsp
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001101001010000000000101 //Set r5 to 842
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000110100000000000101 //Compute r0 OR 52 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000011000010111011000001 //Write value in r12 to address in rbp with offset -194
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000011000010111000101100 //Read at address in rbp with offset -194 to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001110101001000 //Jump to constant address 3748
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001110111011100 //Jump to constant address 3822
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000011000010111000010001 //Write value in r1 to address in rbp with offset -194
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101010110000000000001 //Set r1 to 1878
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010111110111000000100 //Compute rbp - 190 and write result to r4
11100000000011000010111000101100 //Read at address in rbp with offset -194 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010111110111000000101 //Compute rbp - 190 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010000101101000000000101 //Set r5 to 1069
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001110100111010 //Jump to constant address 3741
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000011010000111100001111 //Compute rsp - 208 and write result to rsp
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000011101000000000101 //Set r5 to 29
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000110101000000000101 //Compute r0 OR 53 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000011010000111011000001 //Write value in r12 to address in rbp with offset -208
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000011010000111000101100 //Read at address in rbp with offset -208 to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001111001001000 //Jump to constant address 3876
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001111011000100 //Jump to constant address 3938
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000011010000111000010001 //Write value in r1 to address in rbp with offset -208
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101010110000000000001 //Set r1 to 1878
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011001100111000000100 //Compute rbp - 204 and write result to r4
11100000000011010000111000101100 //Read at address in rbp with offset -208 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011001100111000000101 //Compute rbp - 204 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010011111010000000000101 //Set r5 to 1274
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001111000111010 //Jump to constant address 3869
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000011011110111100001111 //Compute rsp - 222 and write result to rsp
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010111001001000000000101 //Set r5 to 1481
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000110110000000000101 //Compute r0 OR 54 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000011011110111011000001 //Write value in r12 to address in rbp with offset -222
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000011011110111000101100 //Read at address in rbp with offset -222 to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001111100111110 //Jump to constant address 3999
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001111110111010 //Jump to constant address 4061
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000011011110111000010001 //Write value in r1 to address in rbp with offset -222
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101010110000000000001 //Set r1 to 1878
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011011010111000000100 //Compute rbp - 218 and write result to r4
11100000000011011110111000101100 //Read at address in rbp with offset -222 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011011010111000000101 //Compute rbp - 218 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000010111000000000000101 //Set r5 to 184
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001111100110000 //Jump to constant address 3992
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000011100110111100001111 //Compute rsp - 230 and write result to rsp
11010000000011100110111001010001 //Write value in r5 to address in rbp with offset -230
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000110001011000000000101 //Set r5 to 395
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000101111000000000101 //Compute r0 OR 47 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000101111000000000101 //Compute r0 OR 47 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111011101000000000001 //Set r1 to 2013
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000011100110111000101100 //Read at address in rbp with offset -230 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000110011100000000000101 //Set r5 to 412
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000011011010111100001111 //Compute rsp - 218 and write result to rsp
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001011000000000101 //Compute r0 OR 11 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010111000000000101 //Compute r0 OR 23 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000011011000000000000101 //Compute r0 OR 216 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000011101010111100001111 //Compute rsp - 234 and write result to rsp
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000011101010111000010001 //Write value in r1 to address in rbp with offset -234
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000011101010111000101100 //Read at address in rbp with offset -234 to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000011111000111100001111 //Compute rsp - 248 and write result to rsp
01110000000000000000000000001100 //Set r12 to 0
11010000000011111000111011000001 //Write value in r12 to address in rbp with offset -248
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000011111000111000101100 //Read at address in rbp with offset -248 to r12
01110000000000010101000000001101 //Set r13 to 21
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000010000100101010 //Jump to constant address 4245
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010000111001110 //Jump to constant address 4327
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010001101101000000000101 //Set r5 to 1133
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000011111000111000010001 //Write value in r1 to address in rbp with offset -248
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101010110000000000001 //Set r1 to 1878
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011110100111000000100 //Compute rbp - 244 and write result to r4
11100000000011111000111000101100 //Read at address in rbp with offset -248 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011110100111000000101 //Compute rbp - 244 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001010010011000000000101 //Set r5 to 659
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000010000100011100 //Jump to constant address 4238
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001110001111000000000101 //Set r5 to 911
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010101000000000101 //Compute r0 OR 21 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000111000000000101 //Compute r0 OR 7 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000011111000111000010001 //Write value in r1 to address in rbp with offset -248
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101010110000000000001 //Set r1 to 1878
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011110100111000000100 //Compute rbp - 244 and write result to r4
11100000000011111000111000101100 //Read at address in rbp with offset -248 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011110100111000000101 //Compute rbp - 244 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010100011010000000000101 //Set r5 to 1306
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010111010110000000000101 //Set r5 to 1494
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010101000000000101 //Compute r0 OR 21 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000110000000000101 //Compute r0 OR 6 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000011111000111000010001 //Write value in r1 to address in rbp with offset -248
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101010110000000000001 //Set r1 to 1878
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011110100111000000100 //Compute rbp - 244 and write result to r4
11100000000011111000111000101100 //Read at address in rbp with offset -248 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011110100111000000101 //Compute rbp - 244 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001111100101000000000101 //Set r5 to 997
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000011111000111011000001 //Write value in r12 to address in rbp with offset -248
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000011111000111000101100 //Read at address in rbp with offset -248 to r12
01110000000000010101000000001101 //Set r13 to 21
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000010001110000010 //Jump to constant address 4545
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010000100110 //Jump to constant address 4627
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000011010111000000000101 //Set r5 to 215
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000011111000111000010001 //Write value in r1 to address in rbp with offset -248
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101010110000000000001 //Set r1 to 1878
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011110100111000000100 //Compute rbp - 244 and write result to r4
11100000000011111000111000101100 //Read at address in rbp with offset -248 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001100110000000000001 //Set r1 to 1638
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011110100111000000101 //Compute rbp - 244 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000110101010000000000101 //Set r5 to 426
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000010001101110100 //Jump to constant address 4538
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000011111100111100001111 //Compute rsp - 252 and write result to rsp
01110000000000000001000000000011 //Set r3 to 1
01110000000001000000000100000011 //Set highest 16 bits of r3 to 64
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
11010000000011111100111000010001 //Write value in r1 to address in rbp with offset -252
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
00001001000001000000000100000001 //Compute r1 XOR 64 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000011100000000000101 //Compute r0 OR 28 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000011111100111000101100 //Read at address in rbp with offset -252 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000100000000111100001111 //Compute rsp - 256 and write result to rsp
11010000000100000000111001010001 //Write value in r5 to address in rbp with offset -256
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001001111000000000101 //Compute r0 OR 79 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000100000000111000101100 //Read at address in rbp with offset -256 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000011110100111100001111 //Compute rsp - 244 and write result to rsp
01110000000000010000000000000011 //Set r3 to 16
01110000000001000000000100000011 //Set highest 16 bits of r3 to 64
01110000000000000000000000000100 //Set r4 to 0
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000001000000000001101 //Set r13 to 8
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000010010011110110 //Jump to constant address 4731
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010101001000 //Jump to constant address 4772
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010010100001000 //Jump to constant address 4740
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010100111100 //Jump to constant address 4766
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
01110000000000000100000000001100 //Set r12 to 4
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
00000000000000000000000000111100 //Compute r0 OR r3 and write result to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
00001000000000000001000000001000 //Compute r0 OR 1 and write result to r8
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010010100100110 //Jump to constant address 4755
00001000000000000000000000001000 //Compute r0 OR 0 and write result to r8
00001010000000000000100000001100 //Compute r8 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010100111010 //Jump to constant address 4765
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
01110000000000000100000000001100 //Set r12 to 4
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
00000000000000000000000000111100 //Compute r0 OR r3 and write result to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
01110000000000000001000000000100 //Set r4 to 1
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000000000000001000000001 //Read at address in r2 with offset 0 to r1
01110000000000000001000000001100 //Set r12 to 1
00000001100000000000001011000010 //Compute r2 + r12 and write result to r2
10010000000000000010010011101000 //Jump to constant address 4724
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000011110100111100001111 //Compute rsp - 244 and write result to rsp
01110000000000010000000000000011 //Set r3 to 16
01110000000001000000000100000011 //Set highest 16 bits of r3 to 64
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000001000000000001101 //Set r13 to 8
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000010010101110010 //Jump to constant address 4793
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010110110000 //Jump to constant address 4824
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
01110000000000000100000000001100 //Set r12 to 4
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
00000000000000000000000000111100 //Compute r0 OR r3 and write result to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
00001000000000000001000000000100 //Compute r0 OR 1 and write result to r4
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00000000000000000000000001011101 //Compute r0 OR r5 and write result to r13
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010010110010000 //Jump to constant address 4808
00001000000000000000000000000100 //Compute r0 OR 0 and write result to r4
00001010000000000000010000001100 //Compute r4 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010110100100 //Jump to constant address 4818
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
01110000000000000100000000001100 //Set r12 to 4
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
00000000000000000000000000111100 //Compute r0 OR r3 and write result to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000000000000001000000001 //Read at address in r2 with offset 0 to r1
01110000000000000001000000001100 //Set r12 to 1
00000001100000000000001011000010 //Compute r2 + r12 and write result to r2
10010000000000000010010101100100 //Jump to constant address 4786
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000100011000111100001111 //Compute rsp - 280 and write result to rsp
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000101000000000000101 //Compute r0 OR 40 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000100001100111000010001 //Write value in r1 to address in rbp with offset -268
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000100010100111000010001 //Write value in r1 to address in rbp with offset -276
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000100001000111000010001 //Write value in r1 to address in rbp with offset -264
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000100000100111000010001 //Write value in r1 to address in rbp with offset -260
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000100001100111000100001 //Read at address in rbp with offset -268 to r1
00001000100011110000000100000001 //Compute r1 AND 240 and write result to r1
11100000000100001100111000100001 //Read at address in rbp with offset -268 to r1
00001000100000001111000100000001 //Compute r1 AND 15 and write result to r1
11100000000100010100111000100001 //Read at address in rbp with offset -276 to r1
00001000100000001111000100000001 //Compute r1 AND 15 and write result to r1
11100000000100010100111000100001 //Read at address in rbp with offset -276 to r1
00001000100011110000000100000001 //Compute r1 AND 240 and write result to r1
11010000000100010000111000010001 //Write value in r1 to address in rbp with offset -272
11100000000100001000111000100001 //Read at address in rbp with offset -264 to r1
11010000000100011000111000010001 //Write value in r1 to address in rbp with offset -280
11100000000100000100111000100001 //Read at address in rbp with offset -260 to r1
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000100010000111000101100 //Read at address in rbp with offset -272 to r12
01110000000010010000000000001101 //Set r13 to 144
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010011001011110 //Jump to constant address 4911
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010011001110100 //Jump to constant address 4922
01110001001001101100000000000001 //Set r1 to 4716
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000100011000111000101100 //Read at address in rbp with offset -280 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000100010000111000101100 //Read at address in rbp with offset -272 to r12
01110000000010000000000000001101 //Set r13 to 128
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010011010000010 //Jump to constant address 4929
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010011010011000 //Jump to constant address 4940
01110001001010101011000000000001 //Set r1 to 4779
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000100011000111000101100 //Read at address in rbp with offset -280 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000100101000111100001111 //Compute rsp - 296 and write result to rsp
01110000000000010000000000000010 //Set r2 to 16
01110000000001000000000100000010 //Set highest 16 bits of r2 to 64
00001000000000000100000000000001 //Compute r0 OR 4 and write result to r1
00001011100000000100000100000001 //Compute r1 * 4 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
11010000000100101000111000010001 //Write value in r1 to address in rbp with offset -296
00001000000000000101000000000001 //Compute r0 OR 5 and write result to r1
00001011100000000100000100000001 //Compute r1 * 4 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
11010000000100100100111000010001 //Write value in r1 to address in rbp with offset -292
00001000000000000110000000000001 //Compute r0 OR 6 and write result to r1
00001011100000000100000100000001 //Compute r1 * 4 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
11010000000100100000111000010001 //Write value in r1 to address in rbp with offset -288
00001000000000000111000000000001 //Compute r0 OR 7 and write result to r1
00001011100000000100000100000001 //Compute r1 * 4 and write result to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00000001100000000000001011000010 //Compute r2 + r12 and write result to r2
11100000000000000000001000000001 //Read at address in r2 with offset 0 to r1
11010000000100011100111000010001 //Write value in r1 to address in rbp with offset -284
11100000000100101000111000100100 //Read at address in rbp with offset -296 to r4
11100000000100100100111000100010 //Read at address in rbp with offset -292 to r2
11100000000100100000111000100011 //Read at address in rbp with offset -288 to r3
11100000000100011100111000100001 //Read at address in rbp with offset -284 to r1
00001010100000001000001000000010 //Compute r2 << 8 and write result to r2
00000000000000000000010000100100 //Compute r4 OR r2 and write result to r4
00001010100000010000001100000011 //Compute r3 << 16 and write result to r3
00000000000000000000000000110010 //Compute r0 OR r3 and write result to r2
00000000000000000000010000100100 //Compute r4 OR r2 and write result to r4
00001010100000011000000100000001 //Compute r1 << 24 and write result to r1
00000000000000000000000000010010 //Compute r0 OR r1 and write result to r2
00000000000000000000010000100100 //Compute r4 OR r2 and write result to r4
01110010011000101101000000000001 //Set r1 to 9773
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11010000000000000000000101000000 //Write value in r4 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000100111000111100001111 //Compute rsp - 312 and write result to rsp
01110000000000010000000000000010 //Set r2 to 16
01110000000001000000000100000010 //Set highest 16 bits of r2 to 64
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001011100000000100000100000001 //Compute r1 * 4 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
11010000000100111000111000010001 //Write value in r1 to address in rbp with offset -312
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00001011100000000100000100000001 //Compute r1 * 4 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
11010000000100110100111000010001 //Write value in r1 to address in rbp with offset -308
00001000000000000010000000000001 //Compute r0 OR 2 and write result to r1
00001011100000000100000100000001 //Compute r1 * 4 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
11010000000100110000111000010001 //Write value in r1 to address in rbp with offset -304
00001000000000000011000000000001 //Compute r0 OR 3 and write result to r1
00001011100000000100000100000001 //Compute r1 * 4 and write result to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00000001100000000000001011000010 //Compute r2 + r12 and write result to r2
11100000000000000000001000000001 //Read at address in r2 with offset 0 to r1
11010000000100101100111000010001 //Write value in r1 to address in rbp with offset -300
11100000000100111000111000100100 //Read at address in rbp with offset -312 to r4
11100000000100110100111000100010 //Read at address in rbp with offset -308 to r2
11100000000100110000111000100011 //Read at address in rbp with offset -304 to r3
11100000000100101100111000100001 //Read at address in rbp with offset -300 to r1
00001010100000001000001000000010 //Compute r2 << 8 and write result to r2
00000000000000000000010000100100 //Compute r4 OR r2 and write result to r4
00001010100000010000001100000011 //Compute r3 << 16 and write result to r3
00000000000000000000000000110010 //Compute r0 OR r3 and write result to r2
00000000000000000000010000100100 //Compute r4 OR r2 and write result to r4
00001010100000011000000100000001 //Compute r1 << 24 and write result to r1
00000000000000000000000000010010 //Compute r0 OR r1 and write result to r2
00000000000000000000010000100100 //Compute r4 OR r2 and write result to r4
01110010011000101100000000000001 //Set r1 to 9772
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11010000000000000000000101000000 //Write value in r4 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000101001110111100001111 //Compute rsp - 334 and write result to rsp
01110001001000011010000000000001 //Set r1 to 4634
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001001001000110000000000001 //Set r1 to 4678
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001011001000000000101 //Compute r0 OR 89 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001000001101000000000000001 //Set r1 to 4200
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000010011110101110 //Jump to constant address 5079
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010011111000010 //Jump to constant address 5089
01110001000001101000000000000001 //Set r1 to 4200
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000010011110100000 //Jump to constant address 5072
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110001001011011111000000000001 //Set r1 to 4831
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010100000101110 //Jump to constant address 5143
01110000000000010000000000001100 //Set r12 to 16
01110000000001000000000100001100 //Set highest 16 bits of r12 to 64
11010000000101001010111011000001 //Write value in r12 to address in rbp with offset -330
01110000000000000000000000001100 //Set r12 to 0
11010000000101001110111011000001 //Write value in r12 to address in rbp with offset -334
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000101001110111000101100 //Read at address in rbp with offset -334 to r12
01110000000000001000000000001101 //Set r13 to 8
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000010011111110000 //Jump to constant address 5112
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010100000101100 //Jump to constant address 5142
11100000000101001110111000100001 //Read at address in rbp with offset -334 to r1
01110000011101010110000000000010 //Set r2 to 1878
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000100000000001100 //Set r12 to 4
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000101001010111000101100 //Read at address in rbp with offset -330 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
00001010000101000010111000000100 //Compute rbp - 322 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000100000 //Jump to reg r2 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000101000010111000000101 //Compute rbp - 322 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000101001110111000100001 //Read at address in rbp with offset -334 to r1
11100000000101001110111000100001 //Read at address in rbp with offset -334 to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
11010000000101001110111000010001 //Write value in r1 to address in rbp with offset -334
10010000000000000010011111100010 //Jump to constant address 5105
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000101010010111100001111 //Compute rsp - 338 and write result to rsp
11010000000101010010111001010001 //Write value in r5 to address in rbp with offset -338
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001000101000000000101 //Compute r0 OR 69 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000101010010111000101100 //Read at address in rbp with offset -338 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001000001101000000000000001 //Set r1 to 4200
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000001001000000000000101 //Set r5 to 72
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010011000000000101 //Compute r0 OR 19 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000101010010111000101100 //Read at address in rbp with offset -338 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000110000000000001 //Set r1 to 1670
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010011011111000000000101 //Set r5 to 1247
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000101010110111100001111 //Compute rsp - 342 and write result to rsp
11010000000101010110111001010001 //Write value in r5 to address in rbp with offset -342
01110000011110100011000000000001 //Set r1 to 1955
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001001001000000000101 //Compute r0 OR 73 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001111000000000001 //Set r1 to 1999
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000101010110111000101100 //Read at address in rbp with offset -342 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111001000000000001 //Set r1 to 1977
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001000001101000000000000001 //Set r1 to 4200
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000101000010111100001111 //Compute rsp - 322 and write result to rsp
01110000000000010000000000000011 //Set r3 to 16
01110000000001000000000100000011 //Set highest 16 bits of r3 to 64
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000001000000000001101 //Set r13 to 8
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000010100101111010 //Jump to constant address 5309
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010100110010110 //Jump to constant address 5323
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000001111000000 //Write value in r12 to address in r3 with offset 0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00001011100000000100000100000001 //Compute r1 * 4 and write result to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00000001100000000000001111000011 //Compute r3 + r12 and write result to r3
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000000000000001000000001 //Read at address in r2 with offset 0 to r1
01110000000000000001000000001100 //Set r12 to 1
00000001100000000000001011000010 //Compute r2 + r12 and write result to r2
10010000000000000010100101101100 //Jump to constant address 5302
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000000000000001000000000001 //Set r1 to 1
01110000000001000000000100000001 //Set highest 16 bits of r1 to 64
01110000000010000000000000001100 //Set r12 to 128
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
01110000100000110011000000000001 //Set r1 to 2099
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001000000110110000000000001 //Set r1 to 4150
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001000010001000000000000001 //Set r1 to 4232
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001010000000000101 //Compute r0 OR 10 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001010000011110000000000001 //Set r1 to 5150
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000101000000000101 //Compute r0 OR 5 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001010000000000101 //Compute r0 OR 10 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001010001111100000000000001 //Set r1 to 5244
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110000001000000000001 //Set r1 to 1921
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001010000000000101 //Compute r0 OR 10 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010101000111010 //Jump to constant address 5405
01110001001110111001000000000001 //Set r1 to 5049
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001001110000110000000000001 //Set r1 to 4998
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001001101010011000000000001 //Set r1 to 4947
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000010101000001010 //Jump to constant address 5381
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000000000110000000000000001 //Set r1 to 48
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000101000010111100001111 //Compute rsp - 322 and write result to rsp
01110000000000000000000000000001 //Set r1 to 0
01110000000001001100000100000001 //Set highest 16 bits of r1 to 76
01110000000000000001000000001100 //Set r12 to 1
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000101000010111100001111 //Compute rsp - 322 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000101000010111100001111 //Compute rsp - 322 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000101000010111100001111 //Compute rsp - 322 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110001010110101101000000000001 //Set r1 to 5549
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000010101001001010 //Jump to constant address 5413
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110001010110101101000000000001 //Set r1 to 5549
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000010101001100110 //Jump to constant address 5427
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110001010110101101000000000001 //Set r1 to 5549
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000010101001111010 //Jump to constant address 5437
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110001010110101101000000000001 //Set r1 to 5549
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000010101010001110 //Jump to constant address 5447
11111111111111111111111111111111 //Halt
10100000000000000000000000001111 //Pop from stack to rsp
10100000000000000000000000001110 //Pop from stack to rbp
10100000000000000000000000001101 //Pop from stack to r13
10100000000000000000000000001100 //Pop from stack to r12
10100000000000000000000000001011 //Pop from stack to r11
10100000000000000000000000001010 //Pop from stack to r10
10100000000000000000000000001001 //Pop from stack to r9
10100000000000000000000000001000 //Pop from stack to r8
10100000000000000000000000000111 //Pop from stack to r7
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00010000000000000000000000000000 //Return from interrupt
11111111111111111111111111111111 //Halt
