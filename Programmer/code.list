10010000000000000000000000001100 //Jump to constant address 6
10010000000000000010101000111010 //Jump to constant address 5405
10010000000000000010101001101000 //Jump to constant address 5428
10010000000000000010101010010110 //Jump to constant address 5451
10010000000000000010101011000100 //Jump to constant address 5474
00000000000000000001010110001010 //Length of program
01110000000000000000000000001111 //Set rsp to 0
01110000000001110000000100001111 //Set highest 16 bits of rsp to 112
01110000000000001110000000000001 //Set r1 to 14
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000010100100110000 //Jump to constant address 5272
11111111111111111111111111111111 //Halt
01110010011000101110000000000010 //Set r2 to 9774
01110000000011000000000100000010 //Set highest 16 bits of r2 to 192
11010000000000000000001000010000 //Write value in r1 to address in r2 with offset 0
11111111111111111111111111111111 //Halt
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000010000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110101 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101111 //data
00000000000000000000000001110000 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000001100110 //data
00000000000000000000000001110101 //data
00000000000000000000000001101100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001000011 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100110 //data
00000000000000000000000001101001 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000000000 //data
00000000000000000000000001000010 //data
00000000000000000000000001111001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001010111 //data
00000000000000000000000001010010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110001 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000000000000 //data
00000000000000000000000001010011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110010 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110101 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101111 //data
00000000000000000000000001110000 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000001100110 //data
00000000000000000000000001110101 //data
00000000000000000000000001101100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000000001010 //data
00000000000000000000000000000000 //data
00000000000000000000000001000100 //data
00000000000000000000000001100101 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100110 //data
00000000000000000000000001101001 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000000000 //data
00000000000000000000000001010011 //data
00000000000000000000000001100101 //data
00000000000000000000000001101110 //data
00000000000000000000000001100100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100110 //data
00000000000000000000000001101001 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000001101110 //data
00000000000000000000000001100001 //data
00000000000000000000000001101101 //data
00000000000000000000000001100101 //data
00000000000000000000000000000000 //data
00000000000000000000000001010010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110001 //data
00000000000000000000000001110101 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000001100110 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110000 //data
00000000000000000000000000100000 //data
00000000000000000000000001100010 //data
00000000000000000000000001111001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000000000000 //data
00000000000000000000000001010011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110010 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000010 //data
00000000000000000000000001111001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001010111 //data
00000000000000000000000001010010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110001 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110110 //data
00000000000000000000000001100001 //data
00000000000000000000000001101100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001101001 //data
00000000000000000000000001111010 //data
00000000000000000000000001100101 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001001111 //data
00000000000000000000000001110000 //data
00000000000000000000000001100101 //data
00000000000000000000000001101110 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000011 //data
00000000000000000000000001101100 //data
00000000000000000000000001101111 //data
00000000000000000000000001110011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001000010 //data
00000000000000000000000001111001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001010111 //data
00000000000000000000000001010010 //data
00000000000000000000000000100000 //data
00000000000000000000000001100111 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000001110101 //data
00000000000000000000000001110000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100110 //data
00000000000000000000000001101001 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001101001 //data
00000000000000000000000001111010 //data
00000000000000000000000001100101 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010111 //data
00000000000000000000000001110010 //data
00000000000000000000000001101001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110001 //data
00000000000000000000000001110101 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001110111 //data
00000000000000000000000001110010 //data
00000000000000000000000001101001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000001010011 //data
00000000000000000000000001101100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000001100100 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110010 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110101 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101111 //data
00000000000000000000000001110000 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000001100110 //data
00000000000000000000000001110101 //data
00000000000000000000000001101100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001000011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001110101 //data
00000000000000000000000001110011 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110101 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001110111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000001110110 //data
00000000000000000000000001101001 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000000000 //data
00000000000000000000000001000011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001110101 //data
00000000000000000000000001110011 //data
00000000000000000000000000000000 //data
00000000000000000000000001010011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110000 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000011 //data
00000000000000000000000001110101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110011 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001000010 //data
00000000000000000000000001111001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001010010 //data
00000000000000000000000001000100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110101 //data
00000000000000000000000001110011 //data
00000000000000000000000001100010 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000000110000 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110101 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001110111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000001110110 //data
00000000000000000000000001101001 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001010011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110001 //data
00000000000000000000000000000000 //data
00000000000000000000000001010011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000001001000 //data
00000000000000000000000001101111 //data
00000000000000000000000001110011 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000001100100 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110010 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110101 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101111 //data
00000000000000000000000001110000 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000001100110 //data
00000000000000000000000001110101 //data
00000000000000000000000001101100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001000011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001110101 //data
00000000000000000000000001110011 //data
00000000000000000000000000000000 //data
00000000000000000000000000001010 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010010 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110001 //data
00000000000000000000000001110101 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000100 //data
00000000000000000000000001110010 //data
00000000000000000000000001101001 //data
00000000000000000000000001110110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000001111001 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001001101 //data
00000000000000000000000001101111 //data
00000000000000000000000001110101 //data
00000000000000000000000001101110 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001110010 //data
00000000000000000000000001101001 //data
00000000000000000000000001110110 //data
00000000000000000000000001100101 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000011 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001000011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001110101 //data
00000000000000000000000001110011 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000010 //data
00000000000000000000000001111001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001010111 //data
00000000000000000000000001010010 //data
00000000000000000000000000100000 //data
00000000000000000000000001100111 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000010 //data
00000000000000000000000001111001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110101 //data
00000000000000000000000001110011 //data
00000000000000000000000001100010 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110110 //data
00000000000000000000000001100001 //data
00000000000000000000000001101100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001101001 //data
00000000000000000000000001111010 //data
00000000000000000000000001100101 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000100 //data
00000000000000000000000001100101 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110101 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001110111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000001110110 //data
00000000000000000000000001101001 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001001101 //data
00000000000000000000000001101111 //data
00000000000000000000000001110101 //data
00000000000000000000000001101110 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110100 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001000110 //data
00000000000000000000000001101001 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000001101110 //data
00000000000000000000000001100001 //data
00000000000000000000000001101101 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001101110 //data
00000000000000000000000001110100 //data
00000000000000000000000000000000 //data
00000000000000000000000001001111 //data
00000000000000000000000001110000 //data
00000000000000000000000001100101 //data
00000000000000000000000001101110 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100110 //data
00000000000000000000000001101001 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000000000 //data
00000000000000000000000001000011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001101001 //data
00000000000000000000000001100110 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001110010 //data
00000000000000000000000001101001 //data
00000000000000000000000001110110 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000001111001 //data
00000000000000000000000000000000 //data
00000000000000000000000001000011 //data
00000000000000000000000001101100 //data
00000000000000000000000001101111 //data
00000000000000000000000001110011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100110 //data
00000000000000000000000001101001 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000000000 //data
00000000000000000000000001010010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110001 //data
00000000000000000000000001110101 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110111 //data
00000000000000000000000001110010 //data
00000000000000000000000001101001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100110 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000000100000 //data
00000000000000000000000001100010 //data
00000000000000000000000001111001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010101 //data
00000000000000000000000001010011 //data
00000000000000000000000001000010 //data
00000000000000000000000000100000 //data
00000000000000000000000001101101 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001001000 //data
00000000000000000000000001001111 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011111 //data
00000000000000000000000000110000 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110101 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101111 //data
00000000000000000000000001110000 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001110101 //data
00000000000000000000000001100011 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000001100110 //data
00000000000000000000000001110101 //data
00000000000000000000000001101100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00000000000000000000000001010011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001110101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110011 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100101 //data
00000000000000000000000001101110 //data
00000000000000000000000001100100 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000001101011 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000000101000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110101 //data
00000000000000000000000000100000 //data
00000000000000000000000000111101 //data
00000000000000000000000000111101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001110111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100101 //data
00000000000000000000000001110110 //data
00000000000000000000000001101001 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000101001 //data
00000000000000000000000000000000 //data
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000110001101010 //Jump to constant address 1589
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110001111110 //Jump to constant address 1599
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
01000000000000000010110111000000 //If r13 > r12, then jump to offset 2
10010000000000000000110010010000 //Jump to constant address 1608
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110010100000 //Jump to constant address 1616
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
00000010000000000000010111000101 //Compute r5 - r12 and write result to r5
01110000000000000001000000001100 //Set r12 to 1
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
10010000000000000000110010000010 //Jump to constant address 1601
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000110011000010 //Jump to constant address 1633
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110011010110 //Jump to constant address 1643
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
01000000000000000010110111000000 //If r13 > r12, then jump to offset 2
10010000000000000000110011100110 //Jump to constant address 1651
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110011110010 //Jump to constant address 1657
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
00000010000000000000010111000101 //Compute r5 - r12 and write result to r5
10010000000000000000110011011000 //Jump to constant address 1644
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110010011000101110000000000001 //Set r1 to 9774
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
00000000000000000000000001010101 //Compute r0 OR r5 and write result to r5
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110010011000101110000000000011 //Set r3 to 9774
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000010100000010 //Read at address in r5 with offset 0 to r2
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
00001000000000000001000000000100 //Compute r0 OR 1 and write result to r4
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000000110100111100 //Jump to constant address 1694
00001000000000000000000000000100 //Compute r0 OR 0 and write result to r4
00001010000000000000010000001100 //Compute r4 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110101010000 //Jump to constant address 1704
00000000000000000000000000100010 //Compute r0 OR r2 and write result to r2
11010000000000000000001100100000 //Write value in r2 to address in r3 with offset 0
11100000000000000000010100000001 //Read at address in r5 with offset 0 to r1
01110000000000000001000000001100 //Set r12 to 1
00000001100000000000010111000101 //Compute r5 + r12 and write result to r5
11100000000000000000010100000010 //Read at address in r5 with offset 0 to r2
10010000000000000000110100101100 //Jump to constant address 1686
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001111101001000000000101 //Set r5 to 1001
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000010100111100001111 //Compute rsp - 20 and write result to rsp
11010000000000000100111001010001 //Write value in r5 to address in rbp with offset -4
11010000000000001100111001000001 //Write value in r4 to address in rbp with offset -12
01110000011001010111000000000001 //Set r1 to 1623
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00001000000000001010000000000100 //Compute r0 OR 10 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000010000111000010001 //Write value in r1 to address in rbp with offset -16
01110000000000000000000000001100 //Set r12 to 0
11010000000000010100111011000001 //Write value in r12 to address in rbp with offset -20
01110000011000101011000000000001 //Set r1 to 1579
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00001000000000001010000000000100 //Compute r0 OR 10 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000000100111000010001 //Write value in r1 to address in rbp with offset -4
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
01110000000000000000000000001101 //Set r13 to 0
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000000110111010010 //Jump to constant address 1769
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110111110010 //Jump to constant address 1785
01110000011011000111000000000001 //Set r1 to 1735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
11100000000000001100111000101100 //Read at address in rbp with offset -12 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000000010100111000101100 //Read at address in rbp with offset -20 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000010100111000010001 //Write value in r1 to address in rbp with offset -20
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000000010000111000100010 //Read at address in rbp with offset -16 to r2
00001001100000110000001000000010 //Compute r2 + 48 and write result to r2
11100000000000010100111000100001 //Read at address in rbp with offset -20 to r1
11100000000000010100111000100011 //Read at address in rbp with offset -20 to r3
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
11010000000000010100111000110001 //Write value in r3 to address in rbp with offset -20
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000000001100111000101100 //Read at address in rbp with offset -12 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
11100000000000010100111000101100 //Read at address in rbp with offset -20 to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011100111100001111 //Compute rsp - 28 and write result to rsp
11010000000000011100111001000001 //Write value in r4 to address in rbp with offset -28
01110000011011000111000000000001 //Set r1 to 1735
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011100111000101100 //Read at address in rbp with offset -28 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000000011100111000101100 //Read at address in rbp with offset -28 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000110000111100001111 //Compute rsp - 48 and write result to rsp
11010000000000100000111001010001 //Write value in r5 to address in rbp with offset -32
11010000000000101000111001000001 //Write value in r4 to address in rbp with offset -40
01110000011001010111000000000001 //Set r1 to 1623
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100000111000101100 //Read at address in rbp with offset -32 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00001000000000010000000000000100 //Compute r0 OR 16 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000101100111000010001 //Write value in r1 to address in rbp with offset -44
01110000000000000000000000001100 //Set r12 to 0
11010000000000110000111011000001 //Write value in r12 to address in rbp with offset -48
01110000011000101011000000000001 //Set r1 to 1579
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100000111000101100 //Read at address in rbp with offset -32 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00001000000000010000000000000100 //Compute r0 OR 16 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000100000111000010001 //Write value in r1 to address in rbp with offset -32
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000100000111000101100 //Read at address in rbp with offset -32 to r12
01110000000000000000000000001101 //Set r13 to 0
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000000111010010100 //Jump to constant address 1866
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111010110100 //Jump to constant address 1882
01110000011100101000000000000001 //Set r1 to 1832
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100000111000101100 //Read at address in rbp with offset -32 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
11100000000000101000111000101100 //Read at address in rbp with offset -40 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000000110000111000101100 //Read at address in rbp with offset -48 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000110000111000010001 //Write value in r1 to address in rbp with offset -48
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000101100111000101100 //Read at address in rbp with offset -44 to r12
01110000000000001001000000001101 //Set r13 to 9
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000000111011000010 //Jump to constant address 1889
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111011010010 //Jump to constant address 1897
11100000000000101100111000100010 //Read at address in rbp with offset -44 to r2
00001001100001000001001000000010 //Compute r2 + 65 and write result to r2
01110000000000001010000000001100 //Set r12 to 10
00000010000000000000001011000010 //Compute r2 - r12 and write result to r2
10010000000000000000111011011000 //Jump to constant address 1900
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000000101100111000100010 //Read at address in rbp with offset -44 to r2
00001001100000110000001000000010 //Compute r2 + 48 and write result to r2
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000000110000111000100001 //Read at address in rbp with offset -48 to r1
11100000000000110000111000100011 //Read at address in rbp with offset -48 to r3
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
11010000000000110000111000110001 //Write value in r3 to address in rbp with offset -48
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000000101000111000101100 //Read at address in rbp with offset -40 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
11100000000000110000111000101100 //Read at address in rbp with offset -48 to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000111000111100001111 //Compute rsp - 56 and write result to rsp
11010000000000111000111001000001 //Write value in r4 to address in rbp with offset -56
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001011100000000001000100000001 //Compute r1 * 1 and write result to r1
11100000000000111000111000101100 //Read at address in rbp with offset -56 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
01110000000000110000000000001100 //Set r12 to 48
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00001011100000000001000100000001 //Compute r1 * 1 and write result to r1
11100000000000111000111000101100 //Read at address in rbp with offset -56 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
01110000000001111000000000001100 //Set r12 to 120
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00001000000000000010000000000001 //Compute r0 OR 2 and write result to r1
00001011100000000001000100000001 //Compute r1 * 1 and write result to r1
11100000000000111000111000101100 //Read at address in rbp with offset -56 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000111000111000010001 //Write value in r1 to address in rbp with offset -56
01110000011100101000000000000001 //Set r1 to 1832
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000111000111000101100 //Read at address in rbp with offset -56 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000000111000111000101100 //Read at address in rbp with offset -56 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000000000000000000000011 //Set r3 to 0
01110000000001001100000100000011 //Set highest 16 bits of r3 to 76
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000001111000000 //Write value in r12 to address in r3 with offset 0
01110010011000100110000000000001 //Set r1 to 9766
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
01110010011000100111000000000001 //Set r1 to 9767
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
01110000000000000001000000001100 //Set r12 to 1
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000000000000001100000010 //Read at address in r3 with offset 0 to r2
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000111110000010 //Jump to constant address 1985
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111110001010 //Jump to constant address 1989
10010000000000000000111101110010 //Jump to constant address 1977
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 9776
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01111111111011111111000000000010 //Set r2 to 0b1111111011111111
00000000100000000000000100100001 //Compute r1 AND r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 9776
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01110000000100000000000000000010 //Set r2 to 0b100000000
00000000000000000000000100100001 //Compute r1 OR r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110010011000110001000000000001 //Set r1 to 9777
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001000000111100001111 //Compute rsp - 64 and write result to rsp
11010000000001000000111001010001 //Write value in r5 to address in rbp with offset -64
11100000000001000000111000100001 //Read at address in rbp with offset -64 to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001000000101010 //Jump to constant address 2069
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001000001001100 //Jump to constant address 2086
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000001010101 //Compute r0 OR r5 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001000000111000100001 //Read at address in rbp with offset -64 to r1
11100000000001000000111000100001 //Read at address in rbp with offset -64 to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
11010000000001000000111000010001 //Write value in r1 to address in rbp with offset -64
11100000000001000000111000100001 //Read at address in rbp with offset -64 to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
10010000000000000001000000011010 //Jump to constant address 2061
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001010000111100001111 //Compute rsp - 80 and write result to rsp
11010000000001001000111001010001 //Write value in r5 to address in rbp with offset -72
11010000000001001100111001000001 //Write value in r4 to address in rbp with offset -76
11100000000001001000111000100001 //Read at address in rbp with offset -72 to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
01110000000000000000000000001100 //Set r12 to 0
11010000000001010000111011000001 //Write value in r12 to address in rbp with offset -80
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001010000111000100010 //Read at address in rbp with offset -80 to r2
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
11100000000001001100111000101101 //Read at address in rbp with offset -76 to r13
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000001000001111110 //Jump to constant address 2111
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001000010101010 //Jump to constant address 2133
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000001010101 //Compute r0 OR r5 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001001000111000100001 //Read at address in rbp with offset -72 to r1
11100000000001001000111000100001 //Read at address in rbp with offset -72 to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
11010000000001001000111000010001 //Write value in r1 to address in rbp with offset -72
11100000000001001000111000100001 //Read at address in rbp with offset -72 to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000001010000111000100001 //Read at address in rbp with offset -80 to r1
11100000000001010000111000100001 //Read at address in rbp with offset -80 to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
11010000000001010000111000010001 //Write value in r1 to address in rbp with offset -80
10010000000000000001000001101110 //Jump to constant address 2103
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001011110111100001111 //Compute rsp - 94 and write result to rsp
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000111100000000000101 //Compute r0 OR 60 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000101000000000101 //Compute r0 OR 5 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001010001110000000000101 //Set r5 to 654
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001010111001000000000101 //Set r5 to 697
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010101000000000101 //Compute r0 OR 21 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000101000000000101 //Compute r0 OR 5 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001011110111000010001 //Write value in r1 to address in rbp with offset -94
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101111111000000000001 //Set r1 to 1919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001011010111000000100 //Compute rbp - 90 and write result to r4
11100000000001011110111000101100 //Read at address in rbp with offset -94 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001011010111000000101 //Compute rbp - 90 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010110101000000000000101 //Set r5 to 1448
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001101100111100001111 //Compute rsp - 108 and write result to rsp
01110000000000000000000000001100 //Set r12 to 0
11010000000001101100111011000001 //Write value in r12 to address in rbp with offset -108
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
01110000000000010101000000001101 //Set r13 to 21
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001001000100010 //Jump to constant address 2321
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001011000110 //Jump to constant address 2403
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001111001001000000000101 //Set r5 to 969
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001101100111000010001 //Write value in r1 to address in rbp with offset -108
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101111111000000000001 //Set r1 to 1919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000100 //Compute rbp - 104 and write result to r4
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000101 //Compute rbp - 104 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010111110100000000000101 //Set r5 to 1524
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001001000010100 //Jump to constant address 2314
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001101000011000000000101 //Set r5 to 835
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010101000000000101 //Compute r0 OR 21 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000111000000000101 //Compute r0 OR 7 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001101100111000010001 //Write value in r1 to address in rbp with offset -108
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101111111000000000001 //Set r1 to 1919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000100 //Compute rbp - 104 and write result to r4
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000101 //Compute rbp - 104 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000111011000000000101 //Set r5 to 59
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000010010000000000000101 //Set r5 to 144
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010101000000000101 //Compute r0 OR 21 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000110000000000101 //Compute r0 OR 6 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001101100111000010001 //Write value in r1 to address in rbp with offset -108
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101111111000000000001 //Set r1 to 1919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000100 //Compute rbp - 104 and write result to r4
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000101 //Compute rbp - 104 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001000000001000000000101 //Set r5 to 513
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000001101100111011000001 //Write value in r12 to address in rbp with offset -108
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
01110000000000010101000000001101 //Set r13 to 21
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001010001111010 //Jump to constant address 2621
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001010100011110 //Jump to constant address 2703
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001010011001000000000101 //Set r5 to 665
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001101100111000010001 //Write value in r1 to address in rbp with offset -108
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101111111000000000001 //Set r1 to 1919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000100 //Compute rbp - 104 and write result to r4
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000101 //Compute rbp - 104 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010011110100000000000101 //Set r5 to 1268
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001010001101100 //Jump to constant address 2614
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010101100110000000000101 //Set r5 to 1382
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000110000000000000101 //Compute r0 OR 48 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000001101100111011000001 //Write value in r12 to address in rbp with offset -108
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001010101101000 //Jump to constant address 2740
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001010111111100 //Jump to constant address 2814
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001101100111000010001 //Write value in r1 to address in rbp with offset -108
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101111111000000000001 //Set r1 to 1919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000100 //Compute rbp - 104 and write result to r4
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000101 //Compute rbp - 104 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010000010001000000000101 //Set r5 to 1041
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001010101011010 //Jump to constant address 2733
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010000111010000000000101 //Set r5 to 1082
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000110001000000000101 //Compute r0 OR 49 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000001101100111011000001 //Write value in r12 to address in rbp with offset -108
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001011001000110 //Jump to constant address 2851
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001011011011010 //Jump to constant address 2925
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001101100111000010001 //Write value in r1 to address in rbp with offset -108
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101111111000000000001 //Set r1 to 1919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000100 //Compute rbp - 104 and write result to r4
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001101000111000000101 //Compute rbp - 104 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010100101011000000000101 //Set r5 to 1323
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001011000111000 //Jump to constant address 2844
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001111010111100001111 //Compute rsp - 122 and write result to rsp
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010111011110000000000101 //Set r5 to 1502
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000111001000000000101 //Compute r0 OR 57 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000011111111000000000101 //Compute r0 OR 255 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000011111111000000000101 //Compute r0 OR 255 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000011111111000000000101 //Compute r0 OR 255 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000011111111000000000101 //Compute r0 OR 255 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000001111010111011000001 //Write value in r12 to address in rbp with offset -122
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001111010111000101100 //Read at address in rbp with offset -122 to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001011101111110 //Jump to constant address 3007
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100000010010 //Jump to constant address 3081
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001111010111000010001 //Write value in r1 to address in rbp with offset -122
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101111111000000000001 //Set r1 to 1919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001110110111000000100 //Compute rbp - 118 and write result to r4
11100000000001111010111000101100 //Read at address in rbp with offset -122 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001110110111000000101 //Compute rbp - 118 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001011010100000000000101 //Set r5 to 724
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001011101110000 //Jump to constant address 3000
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000010001100111100001111 //Compute rsp - 140 and write result to rsp
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000100000010000000000101 //Set r5 to 258
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000111010000000000101 //Compute r0 OR 58 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000010001000111011000001 //Write value in r12 to address in rbp with offset -136
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000010001000111000101100 //Read at address in rbp with offset -136 to r12
01110000000000011101000000001101 //Set r13 to 29
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001100010011010 //Jump to constant address 3149
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100100010110 //Jump to constant address 3211
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000010001000111000010001 //Write value in r1 to address in rbp with offset -136
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101111111000000000001 //Set r1 to 1919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010000100111000000100 //Compute rbp - 132 and write result to r4
11100000000010001000111000101100 //Read at address in rbp with offset -136 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010000100111000000101 //Compute rbp - 132 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001111101011000000000101 //Set r5 to 1003
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001100010001100 //Jump to constant address 3142
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001011111010000000000101 //Set r5 to 762
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100111000000000101 //Compute r0 OR 39 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000010001000111000010001 //Write value in r1 to address in rbp with offset -136
01110000000000000000000000001100 //Set r12 to 0
11010000000010001100111011000001 //Write value in r12 to address in rbp with offset -140
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000010001100111000101100 //Read at address in rbp with offset -140 to r12
01110000000000010100000000001101 //Set r13 to 20
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000001100101110010 //Jump to constant address 3257
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100110100000 //Jump to constant address 3280
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010000001000000000010 //Set r2 to 1665
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00000000000000000000000000010101 //Compute r0 OR r1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000100000 //Jump to reg r2 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000010001100111000100001 //Read at address in rbp with offset -140 to r1
11100000000010001100111000100001 //Read at address in rbp with offset -140 to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
11010000000010001100111000010001 //Write value in r1 to address in rbp with offset -140
10010000000000000001100101100100 //Jump to constant address 3250
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000011100001000000000101 //Set r5 to 225
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101111111000000000001 //Set r1 to 1919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010000100111000000100 //Compute rbp - 132 and write result to r4
11100000000010001000111000101100 //Read at address in rbp with offset -136 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010000100111000000101 //Compute rbp - 132 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010010101011000000000101 //Set r5 to 1195
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000010100110111100001111 //Compute rsp - 166 and write result to rsp
11010000000010011110111001010001 //Write value in r5 to address in rbp with offset -158
11010000000010100010111001000001 //Write value in r4 to address in rbp with offset -162
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010110001110000000000101 //Set r5 to 1422
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000111100000000000101 //Compute r0 OR 60 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000010100010111000101100 //Read at address in rbp with offset -162 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000010100110111011000001 //Write value in r12 to address in rbp with offset -166
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000010100110111000101100 //Read at address in rbp with offset -166 to r12
01110000000000011110000000001101 //Set r13 to 30
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001101001111010 //Jump to constant address 3389
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001101011110110 //Jump to constant address 3451
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000010100110111000010001 //Write value in r1 to address in rbp with offset -166
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101111111000000000001 //Set r1 to 1919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010010110111000000100 //Compute rbp - 150 and write result to r4
11100000000010100110111000101100 //Read at address in rbp with offset -166 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010010110111000000101 //Compute rbp - 150 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000110111110000000000101 //Set r5 to 446
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001101001101100 //Jump to constant address 3382
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000001111111000000000101 //Set r5 to 127
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000101101000000000101 //Compute r0 OR 45 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000010100110111000010001 //Write value in r1 to address in rbp with offset -166
01110000100000101101000000000001 //Set r1 to 2093
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000010011110111000101100 //Read at address in rbp with offset -158 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
11100000000010100010111000101100 //Read at address in rbp with offset -162 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101111111000000000001 //Set r1 to 1919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010010110111000000100 //Compute rbp - 150 and write result to r4
11100000000010100110111000101100 //Read at address in rbp with offset -166 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010010110111000000101 //Compute rbp - 150 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000100110111000000000101 //Set r5 to 311
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000110011110000000000101 //Set r5 to 414
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000111101000000000101 //Compute r0 OR 61 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000010100110111011000001 //Write value in r12 to address in rbp with offset -166
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000010100110111000101100 //Read at address in rbp with offset -166 to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001101111001010 //Jump to constant address 3557
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001110001000110 //Jump to constant address 3619
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000010100110111000010001 //Write value in r1 to address in rbp with offset -166
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101111111000000000001 //Set r1 to 1919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010010110111000000100 //Compute rbp - 150 and write result to r4
11100000000010100110111000101100 //Read at address in rbp with offset -166 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010010110111000000101 //Compute rbp - 150 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010010001001000000000101 //Set r5 to 1161
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001101110111100 //Jump to constant address 3550
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000010110100111100001111 //Compute rsp - 180 and write result to rsp
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010101011001000000000101 //Set r5 to 1369
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000110010000000000101 //Compute r0 OR 50 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000010110100111011000001 //Write value in r12 to address in rbp with offset -180
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000010110100111000101100 //Read at address in rbp with offset -180 to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001110010110010 //Jump to constant address 3673
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001110100101110 //Jump to constant address 3735
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000010110100111000010001 //Write value in r1 to address in rbp with offset -180
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101111111000000000001 //Set r1 to 1919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010110000111000000100 //Compute rbp - 176 and write result to r4
11100000000010110100111000101100 //Read at address in rbp with offset -180 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010110000111000000101 //Compute rbp - 176 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000101100000000000000101 //Set r5 to 352
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001110010100100 //Jump to constant address 3666
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000011000010111100001111 //Compute rsp - 194 and write result to rsp
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000001110001000000000101 //Set r5 to 113
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000110100000000000101 //Compute r0 OR 52 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000011000010111011000001 //Write value in r12 to address in rbp with offset -194
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000011000010111000101100 //Read at address in rbp with offset -194 to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001110110011010 //Jump to constant address 3789
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001111000101110 //Jump to constant address 3863
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000011000010111000010001 //Write value in r1 to address in rbp with offset -194
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101111111000000000001 //Set r1 to 1919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010111110111000000100 //Compute rbp - 190 and write result to r4
11100000000011000010111000101100 //Read at address in rbp with offset -194 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000010111110111000000101 //Compute rbp - 190 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010001001001000000000101 //Set r5 to 1097
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001110110001100 //Jump to constant address 3782
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000011010000111100001111 //Compute rsp - 208 and write result to rsp
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000011100011000000000101 //Set r5 to 227
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000110101000000000101 //Compute r0 OR 53 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000011010000111011000001 //Write value in r12 to address in rbp with offset -208
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000011010000111000101100 //Read at address in rbp with offset -208 to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001111010011010 //Jump to constant address 3917
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001111100010110 //Jump to constant address 3979
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000011010000111000010001 //Write value in r1 to address in rbp with offset -208
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101111111000000000001 //Set r1 to 1919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011001100111000000100 //Compute rbp - 204 and write result to r4
11100000000011010000111000101100 //Read at address in rbp with offset -208 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011001100111000000101 //Compute rbp - 204 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010011010100000000000101 //Set r5 to 1236
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001111010001100 //Jump to constant address 3910
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000011011110111100001111 //Compute rsp - 222 and write result to rsp
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010110000001000000000101 //Set r5 to 1409
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000110110000000000101 //Compute r0 OR 54 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000011011110111011000001 //Write value in r12 to address in rbp with offset -222
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000011011110111000101100 //Read at address in rbp with offset -222 to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001111110010000 //Jump to constant address 4040
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010000000001100 //Jump to constant address 4102
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000011011110111000010001 //Write value in r1 to address in rbp with offset -222
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101111111000000000001 //Set r1 to 1919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011011010111000000100 //Compute rbp - 218 and write result to r4
11100000000011011110111000101100 //Read at address in rbp with offset -222 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011011010111000000101 //Compute rbp - 218 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000101111111000000000101 //Set r5 to 383
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000001111110000010 //Jump to constant address 4033
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000011100110111100001111 //Compute rsp - 230 and write result to rsp
11010000000011100110111001010001 //Write value in r5 to address in rbp with offset -230
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000011110001000000000101 //Set r5 to 241
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000101111000000000101 //Compute r0 OR 47 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000101111000000000101 //Compute r0 OR 47 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000100000000110000000000001 //Set r1 to 2054
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000011100110111000101100 //Read at address in rbp with offset -230 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010101001011000000000101 //Set r5 to 1355
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000011011010111100001111 //Compute rsp - 218 and write result to rsp
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001011000000000101 //Compute r0 OR 11 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010111000000000101 //Compute r0 OR 23 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000011011000000000000101 //Compute r0 OR 216 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010100000000000101 //Compute r0 OR 20 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000011101010111100001111 //Compute rsp - 234 and write result to rsp
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000011101010111000010001 //Write value in r1 to address in rbp with offset -234
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000011101010111000101100 //Read at address in rbp with offset -234 to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000011111000111100001111 //Compute rsp - 248 and write result to rsp
01110000000000000000000000001100 //Set r12 to 0
11010000000011111000111011000001 //Write value in r12 to address in rbp with offset -248
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000011111000111000101100 //Read at address in rbp with offset -248 to r12
01110000000000010101000000001101 //Set r13 to 21
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000010000101111100 //Jump to constant address 4286
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010001000100000 //Jump to constant address 4368
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001000110111000000000101 //Set r5 to 567
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000011111000111000010001 //Write value in r1 to address in rbp with offset -248
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101111111000000000001 //Set r1 to 1919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011110100111000000100 //Compute rbp - 244 and write result to r4
11100000000011111000111000101100 //Read at address in rbp with offset -248 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011110100111000000101 //Compute rbp - 244 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001100001100000000000101 //Set r5 to 780
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000010000101101110 //Jump to constant address 4279
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001101011110000000000101 //Set r5 to 862
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010101000000000101 //Compute r0 OR 21 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000111000000000101 //Compute r0 OR 7 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000011111000111000010001 //Write value in r1 to address in rbp with offset -248
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101111111000000000001 //Set r1 to 1919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011110100111000000100 //Compute rbp - 244 and write result to r4
11100000000011111000111000101100 //Read at address in rbp with offset -248 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011110100111000000101 //Compute rbp - 244 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000010101011000000000101 //Set r5 to 171
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000100011100000000000101 //Set r5 to 284
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010101000000000101 //Compute r0 OR 21 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000110000000000101 //Compute r0 OR 6 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000011111000111000010001 //Write value in r1 to address in rbp with offset -248
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101111111000000000001 //Set r1 to 1919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011110100111000000100 //Compute rbp - 244 and write result to r4
11100000000011111000111000101100 //Read at address in rbp with offset -248 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011110100111000000101 //Compute rbp - 244 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001110010011000000000101 //Set r5 to 915
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000011111000111011000001 //Write value in r12 to address in rbp with offset -248
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000011111000111000101100 //Read at address in rbp with offset -248 to r12
01110000000000010101000000001101 //Set r13 to 21
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000010001111010100 //Jump to constant address 4586
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010001111000 //Jump to constant address 4668
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010001101001000000000101 //Set r5 to 1129
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000011111000111000010001 //Write value in r1 to address in rbp with offset -248
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101111111000000000001 //Set r1 to 1919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011110100111000000100 //Compute rbp - 244 and write result to r4
11100000000011111000111000101100 //Read at address in rbp with offset -248 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010001111000000000001 //Set r1 to 1679
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000011110100111000000101 //Compute rbp - 244 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001001010111000000000101 //Set r5 to 599
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000010001111000110 //Jump to constant address 4579
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000011111100111100001111 //Compute rsp - 252 and write result to rsp
01110000000000111010000000000111 //Set r7 to 58
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000000011100000001 //Read at address in r7 with offset 0 to r1
11010000000011111100111000010001 //Write value in r1 to address in rbp with offset -252
01110000000000111010000000000111 //Set r7 to 58
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000000011100000001 //Read at address in r7 with offset 0 to r1
00001001000001000000000100000001 //Compute r1 XOR 64 and write result to r1
01110000000000111010000000000111 //Set r7 to 58
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11010000000000000000011100010000 //Write value in r1 to address in r7 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000011100000000000101 //Compute r0 OR 28 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000011111100111000101100 //Read at address in rbp with offset -252 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000100000000111100001111 //Compute rsp - 256 and write result to rsp
11010000000100000000111001010001 //Write value in r5 to address in rbp with offset -256
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001001111000000000101 //Compute r0 OR 79 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000100000000111000101100 //Read at address in rbp with offset -256 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000011110100111100001111 //Compute rsp - 244 and write result to rsp
01110000000000000000000000000100 //Set r4 to 0
01110000000000000000000000000011 //Set r3 to 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000000111100 //Compute r0 OR r3 and write result to r12
01110000000000001000000000001101 //Set r13 to 8
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000010010101001100 //Jump to constant address 4774
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010110100010 //Jump to constant address 4817
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010010101011110 //Jump to constant address 4783
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010110010110 //Jump to constant address 4811
01110000000000010010000000000010 //Set r2 to 18
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
01110000000000000100000000001100 //Set r12 to 4
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100001000 //Read at address in r1 with offset 0 to r8
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000010001100 //Compute r0 OR r8 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010010110000000 //Jump to constant address 4800
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010110010100 //Jump to constant address 4810
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
01110000000000000100000000001100 //Set r12 to 4
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00000001100000000000001011000010 //Compute r2 + r12 and write result to r2
11010000000000000000001001010000 //Write value in r5 to address in r2 with offset 0
01110000000000000001000000000100 //Set r4 to 1
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01110000000000000001000000001100 //Set r12 to 1
00000001100000000000001111000011 //Compute r3 + r12 and write result to r3
10010000000000000010010100111110 //Jump to constant address 4767
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000011110100111100001111 //Compute rsp - 244 and write result to rsp
01110000000000000000000000000011 //Set r3 to 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000000111100 //Compute r0 OR r3 and write result to r12
01110000000000001000000000001101 //Set r13 to 8
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000010010111001000 //Jump to constant address 4836
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010011000001010 //Jump to constant address 4869
01110000000000010010000000000010 //Set r2 to 18
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
01110000000000000100000000001100 //Set r12 to 4
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100000100 //Read at address in r1 with offset 0 to r4
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
00000000000000000000000001011101 //Compute r0 OR r5 and write result to r13
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010010111101010 //Jump to constant address 4853
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010111111110 //Jump to constant address 4863
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
01110000000000000100000000001100 //Set r12 to 4
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00000001100000000000001011000010 //Compute r2 + r12 and write result to r2
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000001011000000 //Write value in r12 to address in r2 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01110000000000000001000000001100 //Set r12 to 1
00000001100000000000001111000011 //Compute r3 + r12 and write result to r3
10010000000000000010010110111010 //Jump to constant address 4829
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000100011000111100001111 //Compute rsp - 280 and write result to rsp
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000101000000000000101 //Compute r0 OR 40 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000100001100111000010001 //Write value in r1 to address in rbp with offset -268
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000100010100111000010001 //Write value in r1 to address in rbp with offset -276
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000100001000111000010001 //Write value in r1 to address in rbp with offset -264
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000100000100111000010001 //Write value in r1 to address in rbp with offset -260
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000100001100111000100001 //Read at address in rbp with offset -268 to r1
00001000100011110000000100000001 //Compute r1 AND 240 and write result to r1
11100000000100001100111000100001 //Read at address in rbp with offset -268 to r1
00001000100000001111000100000001 //Compute r1 AND 15 and write result to r1
11100000000100010100111000100001 //Read at address in rbp with offset -276 to r1
00001000100000001111000100000001 //Compute r1 AND 15 and write result to r1
11100000000100010100111000100001 //Read at address in rbp with offset -276 to r1
00001000100011110000000100000001 //Compute r1 AND 240 and write result to r1
11010000000100010000111000010001 //Write value in r1 to address in rbp with offset -272
11100000000100001000111000100001 //Read at address in rbp with offset -264 to r1
11010000000100011000111000010001 //Write value in r1 to address in rbp with offset -280
11100000000100000100111000100001 //Read at address in rbp with offset -260 to r1
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000100010000111000101100 //Read at address in rbp with offset -272 to r12
01110000000010010000000000001101 //Set r13 to 144
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010011010111000 //Jump to constant address 4956
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010011011001110 //Jump to constant address 4967
01110001001010011001000000000001 //Set r1 to 4761
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000100011000111000101100 //Read at address in rbp with offset -280 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000100010000111000101100 //Read at address in rbp with offset -272 to r12
01110000000010000000000000001101 //Set r13 to 128
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010011011011100 //Jump to constant address 4974
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010011011110010 //Jump to constant address 4985
01110001001011011000000000000001 //Set r1 to 4824
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000100011000111000101100 //Read at address in rbp with offset -280 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000100101000111100001111 //Compute rsp - 296 and write result to rsp
01110000000000010010000000000111 //Set r7 to 18
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000010000011100000001 //Read at address in r7 with offset 16 to r1
11010000000100101000111000010001 //Write value in r1 to address in rbp with offset -296
01110000000000010010000000000111 //Set r7 to 18
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000010100011100000001 //Read at address in r7 with offset 20 to r1
11010000000100100100111000010001 //Write value in r1 to address in rbp with offset -292
01110000000000010010000000000111 //Set r7 to 18
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000011000011100000001 //Read at address in r7 with offset 24 to r1
11010000000100100000111000010001 //Write value in r1 to address in rbp with offset -288
01110000000000010010000000000111 //Set r7 to 18
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000011100011100000001 //Read at address in r7 with offset 28 to r1
11010000000100011100111000010001 //Write value in r1 to address in rbp with offset -284
11100000000100101000111000100100 //Read at address in rbp with offset -296 to r4
11100000000100100100111000100010 //Read at address in rbp with offset -292 to r2
11100000000100100000111000100011 //Read at address in rbp with offset -288 to r3
11100000000100011100111000100001 //Read at address in rbp with offset -284 to r1
00001010100000001000001000000010 //Compute r2 << 8 and write result to r2
00000000000000000000010000100100 //Compute r4 OR r2 and write result to r4
00001010100000010000001100000011 //Compute r3 << 16 and write result to r3
00000000000000000000000000110010 //Compute r0 OR r3 and write result to r2
00000000000000000000010000100100 //Compute r4 OR r2 and write result to r4
00001010100000011000000100000001 //Compute r1 << 24 and write result to r1
00000000000000000000000000010010 //Compute r0 OR r1 and write result to r2
00000000000000000000010000100100 //Compute r4 OR r2 and write result to r4
01110010011000101101000000000001 //Set r1 to 9773
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11010000000000000000000101000000 //Write value in r4 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000100111000111100001111 //Compute rsp - 312 and write result to rsp
01110000000000010010000000000111 //Set r7 to 18
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000000011100000001 //Read at address in r7 with offset 0 to r1
11010000000100111000111000010001 //Write value in r1 to address in rbp with offset -312
01110000000000010010000000000111 //Set r7 to 18
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000100011100000001 //Read at address in r7 with offset 4 to r1
11010000000100110100111000010001 //Write value in r1 to address in rbp with offset -308
01110000000000010010000000000111 //Set r7 to 18
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000001000011100000001 //Read at address in r7 with offset 8 to r1
11010000000100110000111000010001 //Write value in r1 to address in rbp with offset -304
01110000000000010010000000000111 //Set r7 to 18
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000001100011100000001 //Read at address in r7 with offset 12 to r1
11010000000100101100111000010001 //Write value in r1 to address in rbp with offset -300
11100000000100111000111000100100 //Read at address in rbp with offset -312 to r4
11100000000100110100111000100010 //Read at address in rbp with offset -308 to r2
11100000000100110000111000100011 //Read at address in rbp with offset -304 to r3
11100000000100101100111000100001 //Read at address in rbp with offset -300 to r1
00001010100000001000001000000010 //Compute r2 << 8 and write result to r2
00000000000000000000010000100100 //Compute r4 OR r2 and write result to r4
00001010100000010000001100000011 //Compute r3 << 16 and write result to r3
00000000000000000000000000110010 //Compute r0 OR r3 and write result to r2
00000000000000000000010000100100 //Compute r4 OR r2 and write result to r4
00001010100000011000000100000001 //Compute r1 << 24 and write result to r1
00000000000000000000000000010010 //Compute r0 OR r1 and write result to r2
00000000000000000000010000100100 //Compute r4 OR r2 and write result to r4
01110010011000101100000000000001 //Set r1 to 9772
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11010000000000000000000101000000 //Write value in r4 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000100111000111100001111 //Compute rsp - 312 and write result to rsp
01110001001001000011000000000001 //Set r1 to 4675
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001001001110011000000000001 //Set r1 to 4723
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001011001000000000101 //Compute r0 OR 89 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001000010010001000000000001 //Set r1 to 4241
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000010011111100000 //Jump to constant address 5104
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010011111110100 //Jump to constant address 5114
01110001000010010001000000000001 //Set r1 to 4241
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000010011111010010 //Jump to constant address 5097
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110001001100001100000000000001 //Set r1 to 4876
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000100111100111100001111 //Compute rsp - 316 and write result to rsp
11010000000100111100111001010001 //Write value in r5 to address in rbp with offset -316
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001000101000000000101 //Compute r0 OR 69 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000100111100111000101100 //Read at address in rbp with offset -316 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001000010010001000000000001 //Set r1 to 4241
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001101111001000000000101 //Set r5 to 889
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010011000000000101 //Compute r0 OR 19 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000100111100111000101100 //Read at address in rbp with offset -316 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011010101111000000000001 //Set r1 to 1711
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000111100110000000000101 //Set r5 to 486
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000101000000111100001111 //Compute rsp - 320 and write result to rsp
11010000000101000000111001010001 //Write value in r5 to address in rbp with offset -320
01110000011111001100000000000001 //Set r1 to 1996
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001001001000000000101 //Compute r0 OR 73 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111111000000000000001 //Set r1 to 2040
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000101000000111000101100 //Read at address in rbp with offset -320 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011111100010000000000001 //Set r1 to 2018
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001000010010001000000000001 //Set r1 to 4241
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000100111000111100001111 //Compute rsp - 312 and write result to rsp
01110000100001011100000000000001 //Set r1 to 2140
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001000001011111000000000001 //Set r1 to 4191
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001000010110001000000000001 //Set r1 to 4273
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001010000000000101 //Compute r0 OR 10 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001010000000111000000000001 //Set r1 to 5127
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000101000000000101 //Compute r0 OR 5 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001010000000000101 //Compute r0 OR 10 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001010001100101000000000001 //Set r1 to 5221
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110101010000000000001 //Set r1 to 1962
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001010000000000101 //Compute r0 OR 10 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010100111010010 //Jump to constant address 5353
01110001001111010010000000000001 //Set r1 to 5074
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001001110101001000000000001 //Set r1 to 5033
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001001110000000000000000001 //Set r1 to 4992
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000010100110100010 //Jump to constant address 5329
00000000000000000000000000000000 //Compute r0 OR r0 and write result to r0
01110000000000110000000000000001 //Set r1 to 48
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000100111000111100001111 //Compute rsp - 312 and write result to rsp
01110000000000000000000000000001 //Set r1 to 0
01110000000001001100000100000001 //Set highest 16 bits of r1 to 76
01110000000000000001000000001100 //Set r12 to 1
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000100111000111100001111 //Compute rsp - 312 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000100111000111100001111 //Compute rsp - 312 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000100111000111100001111 //Compute rsp - 312 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000100111100001111 //Compute rsp + 4 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110001010101111001000000000001 //Set r1 to 5497
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000010100111100010 //Jump to constant address 5361
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110001010101111001000000000001 //Set r1 to 5497
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000010100111111110 //Jump to constant address 5375
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110001010101111001000000000001 //Set r1 to 5497
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000010101000010010 //Jump to constant address 5385
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110001010101111001000000000001 //Set r1 to 5497
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000010101000100110 //Jump to constant address 5395
11111111111111111111111111111111 //Halt
10100000000000000000000000001111 //Pop from stack to rsp
10100000000000000000000000001110 //Pop from stack to rbp
10100000000000000000000000001101 //Pop from stack to r13
10100000000000000000000000001100 //Pop from stack to r12
10100000000000000000000000001011 //Pop from stack to r11
10100000000000000000000000001010 //Pop from stack to r10
10100000000000000000000000001001 //Pop from stack to r9
10100000000000000000000000001000 //Pop from stack to r8
10100000000000000000000000000111 //Pop from stack to r7
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00010000000000000000000000000000 //Return from interrupt
11111111111111111111111111111111 //Halt
