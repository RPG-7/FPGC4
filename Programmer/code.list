10010000000000000000000000001100 //Jump to constant address 6
10010000000000000000000110110100 //Jump to constant address 218
10010000000000000000000110110110 //Jump to constant address 219
10010000000000000000000110111000 //Jump to constant address 220
10010000000000000000000110111010 //Jump to constant address 221
00000000000000000000000011011110 //Length of program
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000000010100 //Jump to constant address 10
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000110011000 //Jump to constant address 204
01110000000000100100000000000001 //Set r1 to 36
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000100000000000010 //Set r2 to 4
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000101000000 //Jump to constant address 160
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000001011110 //Jump to constant address 47
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000010010000 //Jump to constant address 72
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000011000010 //Jump to constant address 97
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
01001001011011100110100101110100 //data
01010010011001010111001101100101 //data
01110100001000000110010001101111 //data
01101110011001010000000000000000 //data
01010011011001010111010000100000 //data
01010101010100110100001000100000 //data
01101101011011110110010001100101 //data
01010011011001010111010000100000 //data
01101000011011110111001101110100 //data
00100000011011010110111101100100 //data
01100101001000000011000000000000 //data
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000101111100 //Jump to constant address 190
01110010011000110001000000000001 //Set r1 to 0x2631
01110000000011000000000100000001 //Set highest 16 bits of r1 to 0xC0
01110000000000000101000000000010 //Set r2 to 0x05
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000110011000 //Jump to constant address 204
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000100010010 //Jump to constant address 137
01110000000000100101000000000001 //Set r1 to 37
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000001010000000000010 //Set r2 to 10
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000101000000 //Jump to constant address 160
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000101111100 //Jump to constant address 190
01110010011000110001000000000001 //Set r1 to 0x2631
01110000000011000000000100000001 //Set highest 16 bits of r1 to 0xC0
01110000000000010101000000000010 //Set r2 to 0x15
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000110011000 //Jump to constant address 204
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000100101010 //Jump to constant address 149
01110000000000101000000000000001 //Set r1 to 40
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000001100000000000010 //Set r2 to 12
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000101000000 //Jump to constant address 160
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000101111100 //Jump to constant address 190
01110010011000110001000000000001 //Set r1 to 0x2631
01110000000011000000000100000001 //Set highest 16 bits of r1 to 0xC0
01110000000000000101000000000010 //Set r2 to 0x05
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000110011000 //Jump to constant address 204
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000100101010 //Jump to constant address 149
01110000000000101011000000000001 //Set r1 to 43
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000001111000000000010 //Set r2 to 15
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000101000000 //Jump to constant address 160
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000101111100 //Jump to constant address 190
01110010011000110001000000000001 //Set r1 to 0x2631
01110000000011000000000100000001 //Set highest 16 bits of r1 to 0xC0
11010000000000000000000100000000 //Write value in r0 to address in r1 with offset 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000000110011000 //Jump to constant address 204
01110010011000101110000000000011 //Set r3 to 0x262E
01110000000011000000000100000011 //Set highest 16 bits of r3 to 0xC0
11010000000000000000001100100000 //Write value in r2 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
01110000010001101010000000000001 //Set r1 to 0x046A
01110000000000000001000100000001 //Set highest 16 bits of r1 to 0x1
01110000000000000000000000000010 //Set r2 to 0
00001001100000000001001000000010 //Compute r2 + 1 and write result to r2
00110000000000000010001000010000 //If r2 >= r1, then jump to offset 2
10010000000000000000000100011100 //Jump to constant address 142
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
01110000000000011011000000000001 //Set r1 to 27
01110000000000000000000000000010 //Set r2 to 0
00001001100000000001001000000010 //Compute r2 + 1 and write result to r2
00110000000000000010001000010000 //If r2 >= r1, then jump to offset 2
10010000000000000000000100110010 //Jump to constant address 153
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
01110010011000101110000000000011 //Set r3 to 0x262E
01110000000011000000000100000011 //Set highest 16 bits of r3 to 0xC0
01110000000000000000000000000101 //Set r5 to 0
01110000000000100000000000001000 //Set r8 to 32
00001010000000001000100000001000 //Compute r8 - 8 and write result to r8
11100000000000000000000100001001 //Read at address in r1 with offset 0 to r9
00000011000000000000100110001001 //Compute r9 >> r8 and write result to r9
11010000000000000000001110010000 //Write value in r9 to address in r3 with offset 0
01010000000000000011000010000000 //If r0 != r8, then jump to offset 3
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
01110000000000100000000000001000 //Set r8 to 32
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
00110000000000000010010100100000 //If r5 >= r2, then jump to offset 2
10010000000000000000000101010100 //Jump to constant address 170
01110000000000001010000000000010 //Set r2 to 0xA
11010000000000000000001100100000 //Write value in r2 to address in r3 with offset 0
10100000000000000000000000001001 //Pop from stack to r9
10100000000000000000000000001000 //Pop from stack to r8
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 0x2630
01110000000011000000000100000011 //Set highest 16 bits of r3 to 0xC0
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01111111111011111111000000000010 //Set r2 to 0b1111111011111111
00000000100000000000000100100001 //Compute r1 AND r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 0x2630
01110000000011000000000100000011 //Set highest 16 bits of r3 to 0xC0
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01110000000100000000000000000010 //Set r2 to 0b100000000
00000000000000000000000100100001 //Compute r1 OR r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
00010000000000000000000000000000 //Return from interrupt
00010000000000000000000000000000 //Return from interrupt
00010000000000000000000000000000 //Return from interrupt
00010000000000000000000000000000 //Return from interrupt
