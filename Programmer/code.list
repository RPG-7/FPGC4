10010000000000000001001110101010 //Jump to constant address 2517
10010000000000000001100000100000 //Jump to constant address 3088
10010000000000000001100000100010 //Jump to constant address 3089
10010000000000000001100000100100 //Jump to constant address 3090
10010000000000000001100000100110 //Jump to constant address 3091
00000000000000000000110000110100 //Length of program
00000000000000000000000000101000 //data
00100000001000000010000000100000 //data
00100000001000000010000000100000 //data
00100000001000000010000000100000 //data
00100000001000000010000000100000 //data
00100000001000000010000000100000 //data
00100000001000000010000000100000 //data
00100000001000000010000000100000 //data
00100000001000000010000000100000 //data
00100000001000000010000000100000 //data
00100000001000000010000000100000 //data
00000000000000000000000000011110 //data
01001100011000010111100101100101 //data
01110010001000000111010001100101 //data
01111000011101000010110000100000 //data
01101110011001010111100001110100 //data
00111010001000000100001001000111 //data
00100000011100110110001101110010 //data
01101111011011000110110001101001 //data
01101110011001110000000000000000 //data
00000000000000000000000000011011 //data
01000010010001110010000001110011 //data
01100011011100100110111101101100 //data
01101100011010010110111001100111 //data
00101100001000000110111001100101 //data
01111000011101000011101000100000 //data
01110011011100000111001001101001 //data
01110100011001010111001100000000 //data
00000000000000000000000000010101 //data
01010011011100000111001001101001 //data
01110100011001010111001100101100 //data
00100000011011100110010101111000 //data
01110100001110100010000001100011 //data
01101111011011000110111101110010 //data
01110011000000000000000000000000 //data
00000000000000000000000000100010 //data
01000011011011110110110001101111 //data
01110010011100110010000000110000 //data
00101101001100010011001000110111 //data
00101100001000000110111001100101 //data
01111000011101000011101000100000 //data
01100011011011110110110001101111 //data
01110010011100110010000000110001 //data
00110010001110000010110100110010 //data
00110101001101100000000000000000 //data
00000000000000000000000000011011 //data
01000011011011110110110001101111 //data
01110010011100110010000000110001 //data
00110010001110000010110100110010 //data
00110101001101100010110000100000 //data
01101110011001010111100001110100 //data
00111010001000000110000101110101 //data
01100100011010010110111100000000 //data
00000000000000000000000000010101 //data
01000001011101010110010001101001 //data
01101111001011000010000001101110 //data
01100101011110000111010000111010 //data
00100000010101010101001101000010 //data
00100110010101010100000101010010 //data
01010100000000000000000000000000 //data
00000000000000000000000000010100 //data
01010101010100110100001000100110 //data
01010101010000010101001001010100 //data
00101100001000000110111001100101 //data
01111000011101000011101000100000 //data
01010011010011100100010101010011 //data
00000000000000000000000000010011 //data
01010011011001010110010100100000 //data
01010101010000010101001001010100 //data
00100000011011110110111000100000 //data
01101101011011110110111001101001 //data
01110100011011110111001000000000 //data
00000000000000000000000000010000 //data
01001100011011110111001001110101 //data
01101101001000000100100101110000 //data
01110011011101010110110100100000 //data
01100010011011000110000100100000 //data
00000000000000000000000000001001 //data
01001100011011110111001001110101 //data
01101101001011100111010001111000 //data
01110100000000000000000000000000 //data
00000000000000000000000000010001 //data
01010111011010010110111001100100 //data
01101111011101110010000001001100 //data
01100001011110010110010101110010 //data
00100000011101000110010101111000 //data
01110100000000000000000000000000 //data
00000000000000000000000000010101 //data
01000010011000010110001101101011 //data
01100111011100100110111101110101 //data
01101110011001000010000001001100 //data
01100001011110010110010101110010 //data
00100000011101000110010101111000 //data
01110100000000000000000000000000 //data
00000000000000010000001000000011 //data
00000100000001010000011000000111 //data
00001000000010010000101000001011 //data
00001100000011010000111000001111 //data
00100000001000010010001000100011 //data
00100100001001010010011000100111 //data
00101000001010010010101000101011 //data
00101100001011010010111000101111 //data
01000000010000010100001001000011 //data
01000100010001010100011001000111 //data
01001000010010010100101001001011 //data
01001100010011010100111001001111 //data
01100000011000010110001001100011 //data
01100100011001010110011001100111 //data
01101000011010010110101001101011 //data
01101100011011010110111001101111 //data
10000000100000011000001010000011 //data
10000100100001011000011010000111 //data
10001000100010011000101010001011 //data
10001100100011011000111010001111 //data
10100000101000011010001010100011 //data
10100100101001011010011010100111 //data
10101000101010011010101010101011 //data
10101100101011011010111010101111 //data
11000000110000011100001011000011 //data
11000100110001011100011011000111 //data
11001000110010011100101011001011 //data
11001100110011011100111011001111 //data
11100000111000011110001011100011 //data
11100100111001011110011011100111 //data
11101000111010011110101011101011 //data
11101100111011011110111011101111 //data
00000000000100010001001000010011 //data
00010100000101010001011000010111 //data
00011000000110010001101000011011 //data
00011100000111010001111000011111 //data
00110000001100010011001000110011 //data
00110100001101010011011000110111 //data
00111000001110010011101000111011 //data
00111100001111010011111000111111 //data
01010000010100010101001001010011 //data
01010100010101010101011001010111 //data
01011000010110010101101001011011 //data
01011100010111010101111001011111 //data
01110000011100010111001001110011 //data
01110100011101010111011001110111 //data
01111000011110010111101001111011 //data
01111100011111010111111001111111 //data
10010000100100011001001010010011 //data
10010100100101011001011010010111 //data
10011000100110011001101010011011 //data
10011100100111011001111010011111 //data
10110000101100011011001010110011 //data
10110100101101011011011010110111 //data
10111000101110011011101010111011 //data
10111100101111011011111010111111 //data
11010000110100011101001011010011 //data
11010100110101011101011011010111 //data
11011000110110011101101011011011 //data
11011100110111011101111011011111 //data
11110000111100011111001011110011 //data
11110100111101011111011011110111 //data
11111000111110011111101011111011 //data
11111100111111011111111011111111 //data
00000000000000001111111111111111 //data
00000000000000000000000011100000 //data
00000000000000000000000000011111 //data
00000000000000000000000000011100 //data
00000000000000000000000011111100 //data
00000000000000000000000011100011 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00111111111111001100000000000011 //data
11001100001100111100000000000011 //data
11001111111100111100001111000011 //data
11000000000000110011111111111100 //data
00111111111111001111111111111111 //data
11110011110011111111111111111111 //data
11110000000011111111110000111111 //data
11111111111111110011111111111100 //data
00111100111100001111111111111100 //data
11111111111111001111111111111100 //data
00111111111100000000111111000000 //data
00000011000000000000000000000000 //data
00000011000000000000111111000000 //data
00111111111100001111111111111100 //data
00111111111100000000111111000000 //data
00000011000000000000000000000000 //data
00001111110000000011111111110000 //data
00001111110000001111111111111100 //data
11111111111111001111001100111100 //data
00000011000000000000111111000000 //data
00000011000000000000001100000000 //data
00001111110000000011111111110000 //data
11111111111111000011111111110000 //data
00000011000000000000111111000000 //data
00000000000000000000000000000000 //data
00000011110000000000111111110000 //data
00001111111100000000001111000000 //data
00000000000000000000000000000000 //data
11111111111111111111111111111111 //data
11111100001111111111000000001111 //data
11110000000011111111110000111111 //data
11111111111111111111111111111111 //data
00000000000000000000111111110000 //data
00111100001111000011000000001100 //data
00110000000011000011110000111100 //data
00001111111100000000000000000000 //data
11111111111111111111000000001111 //data
11000011110000111100111111110011 //data
11001111111100111100001111000011 //data
11110000000011111111111111111111 //data
00000000111111110000000000111111 //data
00000000111111110011111111110011 //data
11110000111100001111000011110000 //data
11110000111100000011111111000000 //data
00001111111100000011110000111100 //data
00111100001111000011110000111100 //data
00001111111100000000001111000000 //data
00111111111111000000001111000000 //data
00001111111111110000111100001111 //data
00001111111111110000111100000000 //data
00001111000000000011111100000000 //data
11111111000000001111110000000000 //data
00111111111111110011110000001111 //data
00111111111111110011110000001111 //data
00111100000011110011110000111111 //data
11111100001111001111000000000000 //data
00000011110000001111001111001111 //data
00001111111100001111110000111111 //data
11111100001111110000111111110000 //data
11110011110011110000001111000000 //data
11000000000000001111110000000000 //data
11111111110000001111111111111100 //data
11111111110000001111110000000000 //data
11000000000000000000000000000000 //data
00000000000011000000000011111100 //data
00001111111111001111111111111100 //data
00001111111111000000000011111100 //data
00000000000011000000000000000000 //data
00000011110000000000111111110000 //data
00111111111111000000001111000000 //data
00000011110000000011111111111100 //data
00001111111100000000001111000000 //data
00111100001111000011110000111100 //data
00111100001111000011110000111100 //data
00111100001111000000000000000000 //data
00111100001111000000000000000000 //data
00111111111111111111001111001111 //data
11110011110011110011111111001111 //data
00000011110011110000001111001111 //data
00000011110011110000000000000000 //data
00001111111111000011110000001111 //data
00001111110000000011110011110000 //data
00111100111100000000111111000000 //data
11110000111100000011111111000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00111111111111000011111111111100 //data
00111111111111000000000000000000 //data
00000011110000000000111111110000 //data
00111111111111000000001111000000 //data
00111111111111000000111111110000 //data
00000011110000001111111111111111 //data
00000011110000000000111111110000 //data
00111111111111000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000000000000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00111111111111000000111111110000 //data
00000011110000000000000000000000 //data
00000000000000000000001111000000 //data
00000000111100001111111111111100 //data
00000000111100000000001111000000 //data
00000000000000000000000000000000 //data
00000000000000000000111100000000 //data
00111100000000001111111111111100 //data
00111100000000000000111100000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
11110000000000001111000000000000 //data
11110000000000001111111111111100 //data
00000000000000000000000000000000 //data
00000000000000000000110000110000 //data
00111100001111001111111111111111 //data
00111100001111000000110000110000 //data
00000000000000000000000000000000 //data
00000000000000000000001111000000 //data
00001111111100000011111111111100 //data
11111111111111111111111111111111 //data
00000000000000000000000000000000 //data
00000000000000001111111111111111 //data
11111111111111110011111111111100 //data
00001111111100000000001111000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00001111000000000011111111000000 //data
00111111110000000000111100000000 //data
00001111000000000000000000000000 //data
00001111000000000000000000000000 //data
00111100111100000011110011110000 //data
00111100111100000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00111100111100000011110011110000 //data
11111111111111000011110011110000 //data
11111111111111000011110011110000 //data
00111100111100000000000000000000 //data
00001111000000000011111111110000 //data
11110000000000000011111111000000 //data
00000000111100001111111111000000 //data
00001111000000000000000000000000 //data
00000000000000001111000000111100 //data
11110000111100000000001111000000 //data
00001111000000000011110000111100 //data
11110000001111000000000000000000 //data
00001111110000000011110011110000 //data
00001111110000000011111100111100 //data
11110011111100001111000011110000 //data
00111111001111000000000000000000 //data
00111100000000000011110000000000 //data
11110000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000011110000000000111100000000 //data
00111100000000000011110000000000 //data
00111100000000000000111100000000 //data
00000011110000000000000000000000 //data
00111100000000000000111100000000 //data
00000011110000000000001111000000 //data
00000011110000000000111100000000 //data
00111100000000000000000000000000 //data
00000000000000000011110000111100 //data
00001111111100001111111111111111 //data
00001111111100000011110000111100 //data
00000000000000000000000000000000 //data
00000000000000000000111100000000 //data
00001111000000001111111111110000 //data
00001111000000000000111100000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000111100000000 //data
00001111000000000011110000000000 //data
00000000000000000000000000000000 //data
00000000000000001111111111110000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000111100000000 //data
00001111000000000000000000000000 //data
00000000001111000000000011110000 //data
00000011110000000000111100000000 //data
00111100000000001111000000000000 //data
11000000000000000000000000000000 //data
00111111111100001111000000111100 //data
11110000111111001111001111111100 //data
11111111001111001111110000111100 //data
00111111111100000000000000000000 //data
00001111000000000011111100000000 //data
00001111000000000000111100000000 //data
00001111000000000000111100000000 //data
11111111111100000000000000000000 //data
00111111110000001111000011110000 //data
00000000111100000000111111000000 //data
00111100000000001111000011110000 //data
11111111111100000000000000000000 //data
00111111110000001111000011110000 //data
00000000111100000000111111000000 //data
00000000111100001111000011110000 //data
00111111110000000000000000000000 //data
00000011111100000000111111110000 //data
00111100111100001111000011110000 //data
11111111111111000000000011110000 //data
00000011111111000000000000000000 //data
11111111111100001111000000000000 //data
11111111110000000000000011110000 //data
00000000111100001111000011110000 //data
00111111110000000000000000000000 //data
00001111110000000011110000000000 //data
11110000000000001111111111000000 //data
11110000111100001111000011110000 //data
00111111110000000000000000000000 //data
11111111111100001111000011110000 //data
00000000111100000000001111000000 //data
00001111000000000000111100000000 //data
00001111000000000000000000000000 //data
00111111110000001111000011110000 //data
11110000111100000011111111000000 //data
11110000111100001111000011110000 //data
00111111110000000000000000000000 //data
00111111110000001111000011110000 //data
11110000111100000011111111110000 //data
00000000111100000000001111000000 //data
00111111000000000000000000000000 //data
00000000000000000000111100000000 //data
00001111000000000000000000000000 //data
00000000000000000000111100000000 //data
00001111000000000000000000000000 //data
00000000000000000000111100000000 //data
00001111000000000000000000000000 //data
00000000000000000000111100000000 //data
00001111000000000011110000000000 //data
00000011110000000000111100000000 //data
00111100000000001111000000000000 //data
00111100000000000000111100000000 //data
00000011110000000000000000000000 //data
00000000000000000000000000000000 //data
11111111111100000000000000000000 //data
00000000000000001111111111110000 //data
00000000000000000000000000000000 //data
00111100000000000000111100000000 //data
00000011110000000000000011110000 //data
00000011110000000000111100000000 //data
00111100000000000000000000000000 //data
00111111110000001111000011110000 //data
00000000111100000000001111000000 //data
00001111000000000000000000000000 //data
00001111000000000000000000000000 //data
00111111111100001111000000111100 //data
11110011111111001111001111111100 //data
11110011111111001111000000000000 //data
00111111110000000000000000000000 //data
00001111000000000011111111000000 //data
11110000111100001111000011110000 //data
11111111111100001111000011110000 //data
11110000111100000000000000000000 //data
11111111111100000011110000111100 //data
00111100001111000011111111110000 //data
00111100001111000011110000111100 //data
11111111111100000000000000000000 //data
00001111111100000011110000111100 //data
11110000000000001111000000000000 //data
11110000000000000011110000111100 //data
00001111111100000000000000000000 //data
11111111110000000011110011110000 //data
00111100001111000011110000111100 //data
00111100001111000011110011110000 //data
11111111110000000000000000000000 //data
11111111111111000011110000001100 //data
00111100110000000011111111000000 //data
00111100110000000011110000001100 //data
11111111111111000000000000000000 //data
11111111111111000011110000001100 //data
00111100110000000011111111000000 //data
00111100110000000011110000000000 //data
11111111000000000000000000000000 //data
00001111111100000011110000111100 //data
11110000000000001111000000000000 //data
11110000111111000011110000111100 //data
00001111111111000000000000000000 //data
11110000111100001111000011110000 //data
11110000111100001111111111110000 //data
11110000111100001111000011110000 //data
11110000111100000000000000000000 //data
00111111110000000000111100000000 //data
00001111000000000000111100000000 //data
00001111000000000000111100000000 //data
00111111110000000000000000000000 //data
00000011111111000000000011110000 //data
00000000111100000000000011110000 //data
11110000111100001111000011110000 //data
00111111110000000000000000000000 //data
11111100001111000011110000111100 //data
00111100111100000011111111000000 //data
00111100111100000011110000111100 //data
11111100001111000000000000000000 //data
11111111000000000011110000000000 //data
00111100000000000011110000000000 //data
00111100000011000011110000111100 //data
11111111111111000000000000000000 //data
11110000001111001111110011111100 //data
11111111111111001111111111111100 //data
11110011001111001111000000111100 //data
11110000001111000000000000000000 //data
11110000001111001111110000111100 //data
11111111001111001111001111111100 //data
11110000111111001111000000111100 //data
11110000001111000000000000000000 //data
00001111110000000011110011110000 //data
11110000001111001111000000111100 //data
11110000001111000011110011110000 //data
00001111110000000000000000000000 //data
11111111111100000011110000111100 //data
00111100001111000011111111110000 //data
00111100000000000011110000000000 //data
11111111000000000000000000000000 //data
00111111110000001111000011110000 //data
11110000111100001111000011110000 //data
11110011111100000011111111000000 //data
00000011111100000000000000000000 //data
11111111111100000011110000111100 //data
00111100001111000011111111110000 //data
00111100111100000011110000111100 //data
11111100001111000000000000000000 //data
00111111110000001111000011110000 //data
00111100000000000000111100000000 //data
00000011110000001111000011110000 //data
00111111110000000000000000000000 //data
11111111111100001100111100110000 //data
00001111000000000000111100000000 //data
00001111000000000000111100000000 //data
00111111110000000000000000000000 //data
11110000111100001111000011110000 //data
11110000111100001111000011110000 //data
11110000111100001111000011110000 //data
11111111111100000000000000000000 //data
11110000111100001111000011110000 //data
11110000111100001111000011110000 //data
11110000111100000011111111000000 //data
00001111000000000000000000000000 //data
11110000001111001111000000111100 //data
11110000001111001111001100111100 //data
11111111111111001111110011111100 //data
11110000001111000000000000000000 //data
11110000001111001111000000111100 //data
00111100111100000000111111000000 //data
00001111110000000011110011110000 //data
11110000001111000000000000000000 //data
11110000111100001111000011110000 //data
11110000111100000011111111000000 //data
00001111000000000000111100000000 //data
00111111110000000000000000000000 //data
11111111111111001111000000111100 //data
11000000111100000000001111000000 //data
00001111000011000011110000111100 //data
11111111111111000000000000000000 //data
00111111110000000011110000000000 //data
00111100000000000011110000000000 //data
00111100000000000011110000000000 //data
00111111110000000000000000000000 //data
11110000000000000011110000000000 //data
00001111000000000000001111000000 //data
00000000111100000000000000111100 //data
00000000000011000000000000000000 //data
00111111110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00111111110000000000000000000000 //data
00000011000000000000111111000000 //data
00111100111100001111000000111100 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000001111111111111111 //data
00001111000000000000111100000000 //data
00000011110000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00111111110000000000000011110000 //data
00111111111100001111000011110000 //data
00111111001111000000000000000000 //data
11111100000000000011110000000000 //data
00111100000000000011111111110000 //data
00111100001111000011110000111100 //data
11110011111100000000000000000000 //data
00000000000000000000000000000000 //data
00111111110000001111000011110000 //data
11110000000000001111000011110000 //data
00111111110000000000000000000000 //data
00000011111100000000000011110000 //data
00000000111100000011111111110000 //data
11110000111100001111000011110000 //data
00111111001111000000000000000000 //data
00000000000000000000000000000000 //data
00111111110000001111000011110000 //data
11111111111100001111000000000000 //data
00111111110000000000000000000000 //data
00001111110000000011110011110000 //data
00111100000000001111111100000000 //data
00111100000000000011110000000000 //data
11111111000000000000000000000000 //data
00000000000000000000000000000000 //data
00111111001111001111000011110000 //data
11110000111100000011111111110000 //data
00000000111100001111111111000000 //data
11111100000000000011110000000000 //data
00111100111100000011111100111100 //data
00111100001111000011110000111100 //data
11111100001111000000000000000000 //data
00001111000000000000000000000000 //data
00111111000000000000111100000000 //data
00001111000000000000111100000000 //data
00111111110000000000000000000000 //data
00000000111100000000000000000000 //data
00000000111100000000000011110000 //data
00000000111100001111000011110000 //data
11110000111100000011111111000000 //data
11111100000000000011110000000000 //data
00111100001111000011110011110000 //data
00111111110000000011110011110000 //data
11111100001111000000000000000000 //data
00111111000000000000111100000000 //data
00001111000000000000111100000000 //data
00001111000000000000111100000000 //data
00111111110000000000000000000000 //data
00000000000000000000000000000000 //data
11110000111100001111111111111100 //data
11111111111111001111001100111100 //data
11110000001111000000000000000000 //data
00000000000000000000000000000000 //data
11111111110000001111000011110000 //data
11110000111100001111000011110000 //data
11110000111100000000000000000000 //data
00000000000000000000000000000000 //data
00111111110000001111000011110000 //data
11110000111100001111000011110000 //data
00111111110000000000000000000000 //data
00000000000000000000000000000000 //data
11110011111100000011110000111100 //data
00111100001111000011111111110000 //data
00111100000000001111111100000000 //data
00000000000000000000000000000000 //data
00111111001111001111000011110000 //data
11110000111100000011111111110000 //data
00000000111100000000001111111100 //data
00000000000000000000000000000000 //data
11110011111100000011111100111100 //data
00111100001111000011110000000000 //data
11111111000000000000000000000000 //data
00000000000000000000000000000000 //data
00111111111100001111000000000000 //data
00111111110000000000000011110000 //data
11111111110000000000000000000000 //data
00000011000000000000111100000000 //data
00111111111100000000111100000000 //data
00001111000000000000111100110000 //data
00000011110000000000000000000000 //data
00000000000000000000000000000000 //data
11110000111100001111000011110000 //data
11110000111100001111000011110000 //data
00111111001111000000000000000000 //data
00000000000000000000000000000000 //data
11110000111100001111000011110000 //data
11110000111100000011111111000000 //data
00001111000000000000000000000000 //data
00000000000000000000000000000000 //data
11110000001111001111001100111100 //data
11111111111111001111111111111100 //data
00111100111100000000000000000000 //data
00000000000000000000000000000000 //data
11110000001111000011110011110000 //data
00001111110000000011110011110000 //data
11110000001111000000000000000000 //data
00000000000000000000000000000000 //data
11110000111100001111000011110000 //data
11110000111100000011111111110000 //data
00000000111100001111111111000000 //data
00000000000000000000000000000000 //data
11111111111100001100001111000000 //data
00001111000000000011110000110000 //data
11111111111100000000000000000000 //data
00000011111100000000111100000000 //data
00001111000000001111110000000000 //data
00001111000000000000111100000000 //data
00000011111100000000000000000000 //data
00000011110000000000001111000000 //data
00000011110000000000000000000000 //data
00000011110000000000001111000000 //data
00000011110000000000000000000000 //data
11111100000000000000111100000000 //data
00001111000000000000001111110000 //data
00001111000000000000111100000000 //data
11111100000000000000000000000000 //data
00111111001111001111001111110000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000001100000000 //data
00001111110000000011110011110000 //data
11110000001111001111000000111100 //data
11111111111111000000000000000000 //data
00111111110000001111000011110000 //data
11110000000000001111000011110000 //data
00111111110000000000001111000000 //data
00000000111100000011111111000000 //data
00000000000000001111000011110000 //data
00000000000000001111000011110000 //data
11110000111100001111000011110000 //data
00111111111111000000000000000000 //data
00000011111100000000000000000000 //data
00111111110000001111000011110000 //data
11111111111100001111000000000000 //data
00111111110000000000000000000000 //data
00111111111111001111000000001111 //data
00001111111100000000000000111100 //data
00001111111111000011110000111100 //data
00001111111111110000000000000000 //data
11110000111100000000000000000000 //data
00111111110000000000000011110000 //data
00111111111100001111000011110000 //data
00111111111111000000000000000000 //data
11111100000000000000000000000000 //data
00111111110000000000000011110000 //data
00111111111100001111000011110000 //data
00111111111111000000000000000000 //data
00001111000000000000111100000000 //data
00111111110000000000000011110000 //data
00111111111100001111000011110000 //data
00111111111111000000000000000000 //data
00000000000000000000000000000000 //data
00111111110000001111000000000000 //data
11110000000000000011111111000000 //data
00000000111100000000111111000000 //data
00111111111111001111000000001111 //data
00001111111100000011110000111100 //data
00111111111111000011110000000000 //data
00001111111100000000000000000000 //data
11110000111100000000000000000000 //data
00111111110000001111000011110000 //data
11111111111100001111000000000000 //data
00111111110000000000000000000000 //data
11111100000000000000000000000000 //data
00111111110000001111000011110000 //data
11111111111100001111000000000000 //data
00111111110000000000000000000000 //data
11110000111100000000000000000000 //data
00111111000000000000111100000000 //data
00001111000000000000111100000000 //data
00111111110000000000000000000000 //data
00111111111100001111000000111100 //data
00001111110000000000001111000000 //data
00000011110000000000001111000000 //data
00001111111100000000000000000000 //data
11111100000000000000000000000000 //data
00111111000000000000111100000000 //data
00001111000000000000111100000000 //data
00111111110000000000000000000000 //data
11110000001111000000111111000000 //data
00111100111100001111000000111100 //data
11111111111111001111000000111100 //data
11110000001111000000000000000000 //data
00001111000000000000111100000000 //data
00000000000000000011111111000000 //data
11110000111100001111111111110000 //data
11110000111100000000000000000000 //data
00000011111100000000000000000000 //data
11111111111100000011110000000000 //data
00111111110000000011110000000000 //data
11111111111100000000000000000000 //data
00000000000000000000000000000000 //data
00111111111111110000000011110000 //data
00111111111111111111000011110000 //data
00111111111111110000000000000000 //data
00001111111111000011110011110000 //data
11110000111100001111111111111100 //data
11110000111100001111000011110000 //data
11110000111111000000000000000000 //data
00111111110000001111000011110000 //data
00000000000000000011111111000000 //data
11110000111100001111000011110000 //data
00111111110000000000000000000000 //data
00000000000000001111000011110000 //data
00000000000000000011111111000000 //data
11110000111100001111000011110000 //data
00111111110000000000000000000000 //data
00000000000000001111110000000000 //data
00000000000000000011111111000000 //data
11110000111100001111000011110000 //data
00111111110000000000000000000000 //data
00111111110000001111000011110000 //data
00000000000000001111000011110000 //data
11110000111100001111000011110000 //data
00111111111111000000000000000000 //data
00000000000000001111110000000000 //data
00000000000000001111000011110000 //data
11110000111100001111000011110000 //data
00111111111111000000000000000000 //data
00000000000000001111000011110000 //data
00000000000000001111000011110000 //data
11110000111100000011111111110000 //data
00000000111100001111111111000000 //data
11110000000011110000001111000000 //data
00001111111100000011110000111100 //data
00111100001111000000111111110000 //data
00000011110000000000000000000000 //data
11110000111100000000000000000000 //data
11110000111100001111000011110000 //data
11110000111100001111000011110000 //data
00111111110000000000000000000000 //data
00000011110000000000001111000000 //data
00111111111111001111000000000000 //data
11110000000000000011111111111100 //data
00000011110000000000001111000000 //data
00001111110000000011110011110000 //data
00111100001100001111111100000000 //data
00111100000000001111110000111100 //data
11111111111100000000000000000000 //data
11110000111100001111000011110000 //data
00111111110000001111111111110000 //data
00001111000000001111111111110000 //data
00001111000000000000111100000000 //data
11111111110000001111000011110000 //data
11110000111100001111111111001100 //data
11110000001111001111000011111111 //data
11110000001111001111000000111111 //data
00000000111111000000001111001111 //data
00000011110000000000111111110000 //data
00000011110000000000001111000000 //data
11110011110000000011111100000000 //data
00000011111100000000000000000000 //data
00111111110000000000000011110000 //data
00111111111100001111000011110000 //data
00111111111111000000000000000000 //data
00001111110000000000000000000000 //data
00111111000000000000111100000000 //data
00001111000000000000111100000000 //data
00111111110000000000000000000000 //data
00000000000000000000001111110000 //data
00000000000000000011111111000000 //data
11110000111100001111000011110000 //data
00111111110000000000000000000000 //data
00000000000000000000001111110000 //data
00000000000000001111000011110000 //data
11110000111100001111000011110000 //data
00111111111111000000000000000000 //data
00000000000000001111111111000000 //data
00000000000000001111111111000000 //data
11110000111100001111000011110000 //data
11110000111100000000000000000000 //data
11111111111100000000000000000000 //data
11110000111100001111110011110000 //data
11111111111100001111001111110000 //data
11110000111100000000000000000000 //data
00001111111100000011110011110000 //data
00111100111100000000111111111100 //data
00000000000000000011111111111100 //data
00000000000000000000000000000000 //data
00001111110000000011110011110000 //data
00111100111100000000111111000000 //data
00000000000000000011111111110000 //data
00000000000000000000000000000000 //data
00001111000000000000000000000000 //data
00001111000000000011110000000000 //data
11110000000000001111000011110000 //data
00111111110000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000001111111111110000 //data
11110000000000001111000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000001111111111110000 //data
00000000111100000000000011110000 //data
00000000000000000000000000000000 //data
11110000000011111111000000111100 //data
11110000111100001111001111111100 //data
00001111000011110011110000111100 //data
11110000111100000000000011111111 //data
11110000000011111111000000111100 //data
11110000111100001111001111001111 //data
00001111001111110011110011111111 //data
11110000111111110000000000001111 //data
00000011110000000000001111000000 //data
00000000000000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000000000000000 //data
00000000000000000000111100001111 //data
00111100001111001111000011110000 //data
00111100001111000000111100001111 //data
00000000000000000000000000000000 //data
00000000000000001111000011110000 //data
00111100001111000000111100001111 //data
00111100001111001111000011110000 //data
00000000000000000000000000000000 //data
00001100000011001100000011000000 //data
00001100000011001100000011000000 //data
00001100000011001100000011000000 //data
00001100000011001100000011000000 //data
00110011001100111100110011001100 //data
00110011001100111100110011001100 //data
00110011001100111100110011001100 //data
00110011001100111100110011001100 //data
11110011110011110011111100111111 //data
11110011110011111111110011111100 //data
11110011110011110011111100111111 //data
11110011110011111111110011111100 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
11111111110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
11111111110000000000001111000000 //data
11111111110000000000001111000000 //data
00000011110000000000001111000000 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
11111111001111000000111100111100 //data
00001111001111000000111100111100 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
11111111111111000000111100111100 //data
00001111001111000000111100111100 //data
00000000000000000000000000000000 //data
11111111110000000000001111000000 //data
11111111110000000000001111000000 //data
00000011110000000000001111000000 //data
00001111001111000000111100111100 //data
11111111001111000000000000111100 //data
11111111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
00000000000000000000000000000000 //data
11111111111111000000000000111100 //data
11111111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
11111111001111000000000000111100 //data
11111111111111000000000000000000 //data
00000000000000000000000000000000 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
11111111111111000000000000000000 //data
00000000000000000000000000000000 //data
00000011110000000000001111000000 //data
11111111110000000000001111000000 //data
11111111110000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
11111111110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011111111110000000000000000 //data
00000000000000000000000000000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
11111111111111110000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
11111111111111110000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011111111110000001111000000 //data
00000011110000000000001111000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
11111111111111110000000000000000 //data
00000000000000000000000000000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
11111111111111110000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011111111110000001111000000 //data
00000011111111110000001111000000 //data
00000011110000000000001111000000 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111001111110000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111001111110000111100000000 //data
00001111111111110000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00001111111111110000111100000000 //data
00001111001111110000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
11111111001111110000000000000000 //data
11111111111111110000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
11111111111111110000000000000000 //data
11111111001111110000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111001111110000111100000000 //data
00001111001111110000111100111100 //data
00001111001111000000111100111100 //data
00000000000000000000000000000000 //data
11111111111111110000000000000000 //data
11111111111111110000000000000000 //data
00000000000000000000000000000000 //data
00001111001111000000111100111100 //data
11111111001111110000000000000000 //data
11111111001111110000111100111100 //data
00001111001111000000111100111100 //data
00000011110000000000001111000000 //data
11111111111111110000000000000000 //data
11111111111111110000000000000000 //data
00000000000000000000000000000000 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
11111111111111110000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
11111111111111110000000000000000 //data
11111111111111110000001111000000 //data
00000011110000000000001111000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
11111111111111110000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111111111110000000000000000 //data
00000000000000000000000000000000 //data
00000011110000000000001111000000 //data
00000011111111110000001111000000 //data
00000011111111110000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000011111111110000001111000000 //data
00000011111111110000001111000000 //data
00000011110000000000001111000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00001111111111110000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
00001111001111000000111100111100 //data
11111111111111110000111100111100 //data
00001111001111000000111100111100 //data
00000011110000000000001111000000 //data
11111111111111110000001111000000 //data
11111111111111110000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
11111111110000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000011111111110000001111000000 //data
00000011110000000000001111000000 //data
11111111111111111111111111111111 //data
11111111111111111111111111111111 //data
11111111111111111111111111111111 //data
11111111111111111111111111111111 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
11111111111111111111111111111111 //data
11111111111111111111111111111111 //data
11111111000000001111111100000000 //data
11111111000000001111111100000000 //data
11111111000000001111111100000000 //data
11111111000000001111111100000000 //data
00000000111111110000000011111111 //data
00000000111111110000000011111111 //data
00000000111111110000000011111111 //data
00000000111111110000000011111111 //data
11111111111111111111111111111111 //data
11111111111111111111111111111111 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00111111001111001111001111110000 //data
11110000110000001111001111110000 //data
00111111001111000000000000000000 //data
00000000000000000011111111000000 //data
11110000111100001111111111000000 //data
11110000111100001111111111000000 //data
11110000000000001111000000000000 //data
00000000000000001111111111110000 //data
11110000111100001111000000000000 //data
11110000000000001111000000000000 //data
11110000000000000000000000000000 //data
00000000000000001111111111111100 //data
00111100111100000011110011110000 //data
00111100111100000011110011110000 //data
00111100111100000000000000000000 //data
11111111111100001111000011110000 //data
00111100000000000000111100000000 //data
00111100000000001111000011110000 //data
11111111111100000000000000000000 //data
00000000000000000000000000000000 //data
00111111111111001111001111000000 //data
11110011110000001111001111000000 //data
00111111000000000000000000000000 //data
00000000000000000011110000111100 //data
00111100001111000011110000111100 //data
00111100001111000011111111110000 //data
00111100000000001111000000000000 //data
00000000000000000011111100111100 //data
11110011111100000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000000000000000 //data
11111111111100000000111100000000 //data
00111111110000001111000011110000 //data
11110000111100000011111111000000 //data
00001111000000001111111111110000 //data
00001111110000000011110011110000 //data
11110000001111001111111111111100 //data
11110000001111000011110011110000 //data
00001111110000000000000000000000 //data
00001111110000000011110011110000 //data
11110000001111001111000000111100 //data
00111100111100000011110011110000 //data
11111100111111000000000000000000 //data
00000011111100000000111100000000 //data
00000011110000000011111111110000 //data
11110000111100001111000011110000 //data
00111111110000000000000000000000 //data
00000000000000000000000000000000 //data
00111111111111001111001111001111 //data
11110011110011110011111111111100 //data
00000000000000000000000000000000 //data
00000000001111000000000011110000 //data
00111111111111001111001111001111 //data
11110011110011110011111111111100 //data
00111100000000001111000000000000 //data
00001111110000000011110000000000 //data
11110000000000001111111111000000 //data
11110000000000000011110000000000 //data
00001111110000000000000000000000 //data
00111111110000001111000011110000 //data
11110000111100001111000011110000 //data
11110000111100001111000011110000 //data
11110000111100000000000000000000 //data
00000000000000001111111111110000 //data
00000000000000001111111111110000 //data
00000000000000001111111111110000 //data
00000000000000000000000000000000 //data
00001111000000000000111100000000 //data
11111111111100000000111100000000 //data
00001111000000000000000000000000 //data
11111111111100000000000000000000 //data
00111100000000000000111100000000 //data
00000011110000000000111100000000 //data
00111100000000000000000000000000 //data
11111111111100000000000000000000 //data
00000011110000000000111100000000 //data
00111100000000000000111100000000 //data
00000011110000000000000000000000 //data
11111111111100000000000000000000 //data
00000000111111000000001111001111 //data
00000011110011110000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000000000001111000000 //data
00000011110000001111001111000000 //data
11110011110000000011111100000000 //data
00001111000000000000111100000000 //data
00000000000000001111111111110000 //data
00000000000000000000111100000000 //data
00001111000000000000000000000000 //data
00000000000000000011111100111100 //data
11110011111100000000000000000000 //data
00111111001111001111001111110000 //data
00000000000000000000000000000000 //data
00001111110000000011110011110000 //data
00111100111100000000111111000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000001111000000 //data
00000011110000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000011110000000000000000000000 //data
00000000000000000000000000000000 //data
00000000111111110000000011110000 //data
00000000111100000000000011110000 //data
11111100111100000011110011110000 //data
00001111111100000000001111110000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
01010101010101010101010101010101 //data
01010101010101010101010101010101 //data
01010101010101010101010101010101 //data
01010101010101010101010101010101 //data
10101010101010101010101010101010 //data
10101010101010101010101010101010 //data
10101010101010101010101010101010 //data
10101010101010101010101010101010 //data
11111111111111111111111111111111 //data
11111111111111111111111111111111 //data
11111111111111111111111111111111 //data
11111111111111111111111111111111 //data
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
01110001010000100000000000001010 //Set r10 to 5152
01110000000011000000000100001010 //Set highest 16 bits of r10 to 192
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000101000000110 //Compute r10 OR r0 and write result to r6
00000000000000000000000100000111 //Compute r1 OR r0 and write result to r7
01110000000000100000000000001000 //Set r8 to 32
00000001100000000000001101100110 //Compute r3 + r6 and write result to r6
00001010000000001000100000001000 //Compute r8 - 8 and write result to r8
11100000000000000000011100001001 //Read at address in r7 with offset 0 to r9
00000011000000000000100110001001 //Compute r9 >> r8 and write result to r9
11010000000000000000011010010000 //Write value in r9 to address in r6 with offset 0
11010000100000000000011001000000 //Write value in r4 to address in r6 with offset 2048
00001001100000000001011000000110 //Compute r6 + 1 and write result to r6
01010000000000000011000010000000 //If r0 != r8, then jump to offset 3
00001001100000000001011100000111 //Compute r7 + 1 and write result to r7
01110000000000100000000000001000 //Set r8 to 32
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
00110000000000000010010100100000 //If r5 >= r2, then jump to offset 2
10010000000000000000100110100010 //Jump to constant address 1233
10100000000000000000000000001010 //Pop from stack to r10
10100000000000000000000000001001 //Pop from stack to r9
10100000000000000000000000001000 //Pop from stack to r8
10100000000000000000000000000111 //Pop from stack to r7
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
01110001010000100000000000000100 //Set r4 to 5152
01110000000011000000000100000100 //Set highest 16 bits of r4 to 192
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000010000000110 //Compute r4 OR r0 and write result to r6
00000000000000000000000100000111 //Compute r1 OR r0 and write result to r7
01110000000000100000000000001000 //Set r8 to 32
00000001100000000000001101100110 //Compute r3 + r6 and write result to r6
00001010000000001000100000001000 //Compute r8 - 8 and write result to r8
11100000000000000000011100001001 //Read at address in r7 with offset 0 to r9
00000011000000000000100110001001 //Compute r9 >> r8 and write result to r9
11010000000000000000011010010000 //Write value in r9 to address in r6 with offset 0
00001001100000000001011000000110 //Compute r6 + 1 and write result to r6
01010000000000000011000010000000 //If r0 != r8, then jump to offset 3
00001001100000000001011100000111 //Compute r7 + 1 and write result to r7
01110000000000100000000000001000 //Set r8 to 32
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
00110000000000000010010100100000 //If r5 >= r2, then jump to offset 2
10010000000000000000100111100100 //Jump to constant address 1266
10100000000000000000000000001001 //Pop from stack to r9
10100000000000000000000000001000 //Pop from stack to r8
10100000000000000000000000000111 //Pop from stack to r7
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
01110000010000100000000000001010 //Set r10 to 1056
01110000000011000000000100001010 //Set highest 16 bits of r10 to 192
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000101000000110 //Compute r10 OR r0 and write result to r6
00000000000000000000000100000111 //Compute r1 OR r0 and write result to r7
01110000000000100000000000001000 //Set r8 to 32
00000001100000000000001101100110 //Compute r3 + r6 and write result to r6
00001010000000001000100000001000 //Compute r8 - 8 and write result to r8
11100000000000000000011100001001 //Read at address in r7 with offset 0 to r9
00000011000000000000100110001001 //Compute r9 >> r8 and write result to r9
11010000000000000000011010010000 //Write value in r9 to address in r6 with offset 0
11010000100000000000011001000000 //Write value in r4 to address in r6 with offset 2048
00001001100000000001011000000110 //Compute r6 + 1 and write result to r6
01010000000000000011000010000000 //If r0 != r8, then jump to offset 3
00001001100000000001011100000111 //Compute r7 + 1 and write result to r7
01110000000000100000000000001000 //Set r8 to 32
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
00110000000000000010010100100000 //If r5 >= r2, then jump to offset 2
10010000000000000000101000100100 //Jump to constant address 1298
10100000000000000000000000001010 //Pop from stack to r10
10100000000000000000000000001001 //Pop from stack to r9
10100000000000000000000000001000 //Pop from stack to r8
10100000000000000000000000000111 //Pop from stack to r7
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
01110000010000100000000000000100 //Set r4 to 1056
01110000000011000000000100000100 //Set highest 16 bits of r4 to 192
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000010000000110 //Compute r4 OR r0 and write result to r6
00000000000000000000000100000111 //Compute r1 OR r0 and write result to r7
01110000000000100000000000001000 //Set r8 to 32
00000001100000000000001101100110 //Compute r3 + r6 and write result to r6
00001010000000001000100000001000 //Compute r8 - 8 and write result to r8
11100000000000000000011100001001 //Read at address in r7 with offset 0 to r9
00000011000000000000100110001001 //Compute r9 >> r8 and write result to r9
11010000000000000000011010010000 //Write value in r9 to address in r6 with offset 0
00001001100000000001011000000110 //Compute r6 + 1 and write result to r6
01010000000000000011000010000000 //If r0 != r8, then jump to offset 3
00001001100000000001011100000111 //Compute r7 + 1 and write result to r7
01110000000000100000000000001000 //Set r8 to 32
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
00110000000000000010010100100000 //If r5 >= r2, then jump to offset 2
10010000000000000000101001100110 //Jump to constant address 1331
10100000000000000000000000001001 //Pop from stack to r9
10100000000000000000000000001000 //Pop from stack to r8
10100000000000000000000000000111 //Pop from stack to r7
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000101100010100 //Jump to constant address 1418
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000101101000000 //Jump to constant address 1440
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000101101101100 //Jump to constant address 1462
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000101110011000 //Jump to constant address 1484
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000101111000100 //Jump to constant address 1506
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000101111110110 //Jump to constant address 1531
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
01110000000000000000000000000010 //Set r2 to 0
01110000000011000000000100000010 //Set highest 16 bits of r2 to 192
01110000000000000000000000000011 //Set r3 to 0
01110000010000000000000000000100 //Set r4 to 1024
00000000000000000000001000000101 //Compute r2 OR r0 and write result to r5
00000000000000000000000100000110 //Compute r1 OR r0 and write result to r6
11000000000000000000011001010000 //Copy from address in r6 to address in r5 with offset 0
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
00001001100000000001011000000110 //Compute r6 + 1 and write result to r6
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
01100000000000000010001101000000 //If r3 == r4, then jump to offset 2
10010000000000000000101011001010 //Jump to constant address 1381
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
01110000010000000000000000000010 //Set r2 to 1024
01110000000011000000000100000010 //Set highest 16 bits of r2 to 192
01110000000000000000000000000011 //Set r3 to 0
01110000000000100000000000000100 //Set r4 to 32
00000000000000000000001000000101 //Compute r2 OR r0 and write result to r5
00000000000000000000000100000110 //Compute r1 OR r0 and write result to r6
11000000000000000000011001010000 //Copy from address in r6 to address in r5 with offset 0
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
00001001100000000001011000000110 //Compute r6 + 1 and write result to r6
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
01100000000000000010001101000000 //If r3 == r4, then jump to offset 2
10010000000000000000101011111010 //Jump to constant address 1405
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
01110000010000100000000000000001 //Set r1 to 1056
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
01110000000000000000000000000011 //Set r3 to 0
01110000100000000000000000000100 //Set r4 to 2048
00000000000000000000000100000101 //Compute r1 OR r0 and write result to r5
11010000000000000000010100000000 //Write value in r0 to address in r5 with offset 0
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
01100000000000000010001101000000 //If r3 == r4, then jump to offset 2
10010000000000000000101100101000 //Jump to constant address 1428
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
01110000110000100000000000000001 //Set r1 to 3104
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
01110000000000000000000000000011 //Set r3 to 0
01110000100000000000000000000100 //Set r4 to 2048
00000000000000000000000100000101 //Compute r1 OR r0 and write result to r5
11010000000000000000010100000000 //Write value in r0 to address in r5 with offset 0
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
01100000000000000010001101000000 //If r3 == r4, then jump to offset 2
10010000000000000000101101010100 //Jump to constant address 1450
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
01110001010000100000000000000001 //Set r1 to 5152
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
01110000000000000000000000000011 //Set r3 to 0
01110000011110000000000000000100 //Set r4 to 1920
00000000000000000000000100000101 //Compute r1 OR r0 and write result to r5
11010000000000000000010100000000 //Write value in r0 to address in r5 with offset 0
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
01100000000000000010001101000000 //If r3 == r4, then jump to offset 2
10010000000000000000101110000000 //Jump to constant address 1472
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
01110001110000100000000000000001 //Set r1 to 7200
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
01110000000000000000000000000011 //Set r3 to 0
01110000011110000000000000000100 //Set r4 to 1920
00000000000000000000000100000101 //Compute r1 OR r0 and write result to r5
11010000000000000000010100000000 //Write value in r0 to address in r5 with offset 0
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
01100000000000000010001101000000 //If r3 == r4, then jump to offset 2
10010000000000000000101110101100 //Jump to constant address 1494
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
01110010011000110010000000000001 //Set r1 to 9778
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
01110000000000000000000000000011 //Set r3 to 0
01110000000001000000000000000100 //Set r4 to 64
00000000000000000000000100000101 //Compute r1 OR r0 and write result to r5
11010000000000000000010100000000 //Write value in r0 to address in r5 with offset 0
11010000000000000001010100000000 //Write value in r0 to address in r5 with offset 1
11010000000000000010010100000000 //Write value in r0 to address in r5 with offset 2
11010000000000000011010100000000 //Write value in r0 to address in r5 with offset 3
00001001100000000100010100000101 //Compute r5 + 4 and write result to r5
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
01100000000000000010001101000000 //If r3 == r4, then jump to offset 2
10010000000000000000101111011000 //Jump to constant address 1516
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
01110010010000100000000000000001 //Set r1 to 9248
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11010000000000000000000100000000 //Write value in r0 to address in r1 with offset 0
11010000000000000001000100000000 //Write value in r0 to address in r1 with offset 1
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
00001000100000001111000100000010 //Compute r1 AND 0b00001111 and write result to r2
00001000100011110000000100000011 //Compute r1 AND 0b11110000 and write result to r3
00001011000000000100001100000011 //Compute r3 >> 4 and write result to r3
01110000011000011001000000000100 //Set r4 to 1561
01110000000000000000000100000100 //Set highest 16 bits of r4 to 0
00000001100000000000001001000010 //Compute r2 + r4 and write result to r2
00000001100000000000001101000011 //Compute r3 + r4 and write result to r3
01110000000000000000000000000001 //Set r1 to 0
01110011000001111000000100000001 //Set highest 16 bits of r1 to 0x3078
11100000000000000000001000000010 //Read at address in r2 with offset 0 to r2
11100000000000000000001100000011 //Read at address in r3 with offset 0 to r3
00001010100000001000001100000011 //Compute r3 << 8 and write result to r3
00000001100000000000001000010001 //Compute r2 + r1 and write result to r1
00000001100000000000001100010001 //Compute r3 + r1 and write result to r1
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
00000000000000000000000000110000 //data
00000000000000000000000000110001 //data
00000000000000000000000000110010 //data
00000000000000000000000000110011 //data
00000000000000000000000000110100 //data
00000000000000000000000000110101 //data
00000000000000000000000000110110 //data
00000000000000000000000000110111 //data
00000000000000000000000000111000 //data
00000000000000000000000000111001 //data
00000000000000000000000001000001 //data
00000000000000000000000001000010 //data
00000000000000000000000001000011 //data
00000000000000000000000001000100 //data
00000000000000000000000001000101 //data
00000000000000000000000001000110 //data
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 9776
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01111111111011111111000000000010 //Set r2 to 0b1111111011111111
00000000100000000000000100100001 //Compute r1 AND r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 9776
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01110000000100000000000000000010 //Set r2 to 0b100000000
00000000000000000000000100100001 //Compute r1 OR r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000100000 //Push r2 to stack
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110001010010 //Jump to constant address 1577
01110010011000110001000000000010 //Set r2 to 9777
01110000000011000000000100000010 //Set highest 16 bits of r2 to 192
11010000000000000000001000010000 //Write value in r1 to address in r2 with offset 0
11100000000000000000001000000001 //Read at address in r2 with offset 0 to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110001101110 //Jump to constant address 1591
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
01110010011000101110000000000011 //Set r3 to 9774
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
01110000000000000000000000000101 //Set r5 to 0
01110000000000100000000000001000 //Set r8 to 32
00001010000000001000100000001000 //Compute r8 - 8 and write result to r8
11100000000000000000000100001001 //Read at address in r1 with offset 0 to r9
00000011000000000000100110001001 //Compute r9 >> r8 and write result to r9
11010000000000000000001110010000 //Write value in r9 to address in r3 with offset 0
01010000000000000011000010000000 //If r0 != r8, then jump to offset 3
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
01110000000000100000000000001000 //Set r8 to 32
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
00110000000000000010010100100000 //If r5 >= r2, then jump to offset 2
10010000000000000000110010111010 //Jump to constant address 1629
01110000000000001010000000000010 //Set r2 to 0xA
11010000000000000000001100100000 //Write value in r2 to address in r3 with offset 0
10100000000000000000000000001001 //Pop from stack to r9
10100000000000000000000000001000 //Pop from stack to r8
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000101110000000000011 //Set r3 to 9774
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
00001011000000011000000100000010 //Compute r1 >> 24 and write result to r2
11010000000000000000001100100000 //Write value in r2 to address in r3 with offset 0
00001011000000010000000100000010 //Compute r1 >> 16 and write result to r2
11010000000000000000001100100000 //Write value in r2 to address in r3 with offset 0
00001011000000001000000100000010 //Compute r1 >> 8 and write result to r2
11010000000000000000001100100000 //Write value in r2 to address in r3 with offset 0
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
01110000000000001010000000000010 //Set r2 to 0xA
11010000000000000000001100100000 //Write value in r2 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
00000000000000000000000100000011 //Compute r1 OR r0 and write result to r3
01110000100111001100000000000001 //Set r1 to 2508
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010100110 //Jump to constant address 1619
01110000000000111001000000000001 //Set r1 to 0x39
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00001011000000011000001100000001 //Compute r3 >> 24 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00001011000000010000001100000001 //Compute r3 >> 16 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00001011000000001000001100000001 //Compute r3 >> 8 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00001011000000000000001100000001 //Compute r3 >> 0 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001000110011110 //Jump to constant address 2255
00000000000000000000000100000011 //Compute r1 OR r0 and write result to r3
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110000000110 //Jump to constant address 1539
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110011100010 //Jump to constant address 1649
01110000000000100010000000000010 //Set r2 to 0x22
01010000000000000101001100100000 //If r3 != r2, then jump to offset 5
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001010011100 //Jump to constant address 2382
10010000000000000000110101000110 //Jump to constant address 1699
00000000000000000000001100000001 //Compute r3 OR r0 and write result to r1
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
00000000000000000000001000000100 //Compute r2 OR r0 and write result to r4
00000000000000000000000100000101 //Compute r1 OR r0 and write result to r5
01110000100111010001000000000001 //Set r1 to 2513
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010100110 //Jump to constant address 1619
01110000000000111010000000000001 //Set r1 to 0x3a
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00000000000000000000010000000001 //Compute r4 OR r0 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
01110000000000000000000000000001 //Set r1 to 0x00
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001000110011110 //Jump to constant address 2255
00000000000000000000000100000011 //Compute r1 OR r0 and write result to r3
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110000000110 //Jump to constant address 1539
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110011100010 //Jump to constant address 1649
01110000000000100010000000000010 //Set r2 to 0x22
01010000000000000101001100100000 //If r3 != r2, then jump to offset 5
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001010011100 //Jump to constant address 2382
10010000000000000000110110100110 //Jump to constant address 1747
01110000000000100111000000000001 //Set r1 to 0x27
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
01110000000000000000000000000001 //Set r1 to 0x00
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110000000110 //Jump to constant address 1539
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110011100010 //Jump to constant address 1649
01110000000000100000000000000110 //Set r6 to 32
11010000000000000000010100000000 //Write value in r0 to address in r5 with offset 0
01010000000000000010000001000000 //If r0 != r4, then jump to offset 2
10010000000000000000111000001100 //Jump to constant address 1798
01110000000000000000000000000001 //Set r1 to 0x00
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00001010000000001000011000000110 //Compute r6 - 8 and write result to r6
00000010100000000000000101100001 //Compute r1 << r6 and write result to r1
11100000000000000000010100000010 //Read at address in r5 with offset 0 to r2
00000000000000000000000100100010 //Compute r1 OR r2 and write result to r2
11010000000000000000010100100000 //Write value in r2 to address in r5 with offset 0
01010000000000000110000001100000 //If r0 != r6, then jump to offset 6
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
01110000000000000001000000000001 //Set r1 to 1
01100000000000000010000101000000 //If r1 == r4, then jump to offset 2
11010000000000000000010100000000 //Write value in r0 to address in r5 with offset 0
01110000000000100000000000000110 //Set r6 to 32
00001010000000000001010000000100 //Compute r4 - 1 and write result to r4
10010000000000000000110111100110 //Jump to constant address 1779
00000000000000000000001100000001 //Compute r3 OR r0 and write result to r1
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
00000000000000000000001000000100 //Compute r2 OR r0 and write result to r4
00000000000000000000000100000101 //Compute r1 OR r0 and write result to r5
01110000100110111101000000000001 //Set r1 to 2493
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010100110 //Jump to constant address 1619
01110000000000111100000000000001 //Set r1 to 0x3c
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00000000000000000000010000000001 //Compute r4 OR r0 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
01110000000000000000000000000001 //Set r1 to 0x00
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001000110011110 //Jump to constant address 2255
00000000000000000000000100000011 //Compute r1 OR r0 and write result to r3
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110000000110 //Jump to constant address 1539
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110011100010 //Jump to constant address 1649
01110000000000100010000000000010 //Set r2 to 0x22
01010000000000000101001100100000 //If r3 != r2, then jump to offset 5
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001010011100 //Jump to constant address 2382
10010000000000000000111001010000 //Jump to constant address 1832
01110000100111000010000000000001 //Set r1 to 2498
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010100110 //Jump to constant address 1619
01110000000000101101000000000001 //Set r1 to 0x2d
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
01110000000000000000000000000001 //Set r1 to 0x00
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110000000110 //Jump to constant address 1539
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110011100010 //Jump to constant address 1649
00000000000000000000010000000010 //Compute r4 OR r0 and write result to r2
00000000000000000000010100000001 //Compute r5 OR r0 and write result to r1
01110000000000000000000000000101 //Set r5 to 0
01110000000000100000000000000110 //Set r6 to 32
01110010011000110001000000000011 //Set r3 to 9777
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
00001010000000001000011000000110 //Compute r6 - 8 and write result to r6
11100000000000000000000100000100 //Read at address in r1 with offset 0 to r4
00000011000000000000010001100100 //Compute r4 >> r6 and write result to r4
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110001010010 //Jump to constant address 1577
11010000000000000000001101000000 //Write value in r4 to address in r3 with offset 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110001101110 //Jump to constant address 1591
01010000000000000011000001100000 //If r0 != r6, then jump to offset 3
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
01110000000000100000000000000110 //Set r6 to 32
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
00110000000000000010010100100000 //If r5 >= r2, then jump to offset 2
10010000000000000000111010100110 //Jump to constant address 1875
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110001101110 //Jump to constant address 1591
01110000100111000110000000000001 //Set r1 to 2502
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010100110 //Jump to constant address 1619
01110000000000111101000000000001 //Set r1 to 0x3d
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001000110011110 //Jump to constant address 2255
00000000000000000000000100000011 //Compute r1 OR r0 and write result to r3
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110000000110 //Jump to constant address 1539
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110011100010 //Jump to constant address 1649
01110000000000100010000000000010 //Set r2 to 0x22
01010000000000000101001100100000 //If r3 != r2, then jump to offset 5
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001010011100 //Jump to constant address 2382
10010000000000000000111011100010 //Jump to constant address 1905
00000000000000000000001100000001 //Compute r3 OR r0 and write result to r1
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110000100110101011000000000001 //Set r1 to 2475
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010100110 //Jump to constant address 1619
01110000000000110010000000000001 //Set r1 to 0x32
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001000110011110 //Jump to constant address 2255
00000000000000000000000100000011 //Compute r1 OR r0 and write result to r3
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110000000110 //Jump to constant address 1539
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110011100010 //Jump to constant address 1649
01110000000000100010000000000010 //Set r2 to 0x22
01010000000000000101001100100000 //If r3 != r2, then jump to offset 5
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001010011100 //Jump to constant address 2382
10010000000000000000111100101100 //Jump to constant address 1942
00000000000000000000001100000001 //Compute r3 OR r0 and write result to r1
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110000100110101111000000000001 //Set r1 to 2479
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010100110 //Jump to constant address 1619
01110000000000110110000000000001 //Set r1 to 0x36
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001000110011110 //Jump to constant address 2255
00000000000000000000000100000011 //Compute r1 OR r0 and write result to r3
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110000000110 //Jump to constant address 1539
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110011100010 //Jump to constant address 1649
01110000000000100010000000000010 //Set r2 to 0x22
01010000000000000101001100100000 //If r3 != r2, then jump to offset 5
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001010011100 //Jump to constant address 2382
10010000000000000000111101110000 //Jump to constant address 1976
00000000000000000000001100000001 //Compute r3 OR r0 and write result to r1
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110000100110110011000000000001 //Set r1 to 2483
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010100110 //Jump to constant address 1619
01110000000000110100000000000001 //Set r1 to 0x34
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001000110011110 //Jump to constant address 2255
00000000000000000000000100000011 //Compute r1 OR r0 and write result to r3
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110000000110 //Jump to constant address 1539
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110011100010 //Jump to constant address 1649
01110000000000100010000000000010 //Set r2 to 0x22
01010000000000000101001100100000 //If r3 != r2, then jump to offset 5
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001010011100 //Jump to constant address 2382
10010000000000000000111110110100 //Jump to constant address 2010
00000000000000000000001100000001 //Compute r3 OR r0 and write result to r1
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110001010010 //Jump to constant address 1577
01110010011000110001000000000011 //Set r3 to 9777
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
01110000000000101111000000000100 //Set r4 to 0x2f
11010000000000000000001101000000 //Write value in r4 to address in r3 with offset 0
01110000000000101111000000000100 //Set r4 to 47
11010000000000000000001101000000 //Write value in r4 to address in r3 with offset 0
01110000000000000000000000000101 //Set r5 to 0
01110000000000100000000000000110 //Set r6 to 32
00001010000000001000011000000110 //Compute r6 - 8 and write result to r6
11100000000000000000000100000100 //Read at address in r1 with offset 0 to r4
00000011000000000000010001100100 //Compute r4 >> r6 and write result to r4
11010000000000000000001101000000 //Write value in r4 to address in r3 with offset 0
01010000000000000011000001100000 //If r0 != r6, then jump to offset 3
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
01110000000000100000000000000110 //Set r6 to 32
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
00110000000000000010010100100000 //If r5 >= r2, then jump to offset 2
10010000000000000001000000000000 //Jump to constant address 2048
11010000000000000000001100000000 //Write value in r0 to address in r3 with offset 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110001101110 //Jump to constant address 1591
01110000100110100110000000000001 //Set r1 to 2470
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010100110 //Jump to constant address 1619
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110001101110 //Jump to constant address 1591
01110000100101100101000000000001 //Set r1 to 2405
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010100110 //Jump to constant address 1619
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001000110111100 //Jump to constant address 2270
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001000111100100 //Jump to constant address 2290
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001000001100 //Jump to constant address 2310
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110000000110 //Jump to constant address 1539
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110011100010 //Jump to constant address 1649
01110000100101100111000000000001 //Set r1 to 2407
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010100110 //Jump to constant address 1619
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110000100101110000000000000001 //Set r1 to 2416
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010100110 //Jump to constant address 1619
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001000110011110 //Jump to constant address 2255
00000000000000000000000100000011 //Compute r1 OR r0 and write result to r3
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110000000110 //Jump to constant address 1539
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110011100010 //Jump to constant address 1649
01110000000000010101000000000010 //Set r2 to 0x15
01100000000000000101001100100000 //If r3 == r2, then jump to offset 5
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001010011100 //Jump to constant address 2382
10010000000000000001000010011110 //Jump to constant address 2127
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001010011100 //Jump to constant address 2382
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001000111100100 //Jump to constant address 2290
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001000111100 //Jump to constant address 2334
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110000000110 //Jump to constant address 1539
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110011100010 //Jump to constant address 1649
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001000111100100 //Jump to constant address 2290
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001001101100 //Jump to constant address 2358
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110000000110 //Jump to constant address 1539
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110011100010 //Jump to constant address 1649
01110000100101110000000000000001 //Set r1 to 2416
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010100110 //Jump to constant address 1619
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001000110011110 //Jump to constant address 2255
00000000000000000000000100000011 //Compute r1 OR r0 and write result to r3
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110000000110 //Jump to constant address 1539
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110011100010 //Jump to constant address 1649
01110000000000010101000000000010 //Set r2 to 0x15
01100000000000000101001100100000 //If r3 == r2, then jump to offset 5
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001010011100 //Jump to constant address 2382
10010000000000000001000100000010 //Jump to constant address 2177
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001010011100 //Jump to constant address 2382
01110000100101111111000000000001 //Set r1 to 2431
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010100110 //Jump to constant address 1619
01110000000000110000000000000001 //Set r1 to 0x30
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001000110011110 //Jump to constant address 2255
00000000000000000000000100000011 //Compute r1 OR r0 and write result to r3
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110000000110 //Jump to constant address 1539
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110011100010 //Jump to constant address 1649
01110000000000010100000000000010 //Set r2 to 0x14
01100000000000000101001100100000 //If r3 == r2, then jump to offset 5
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001010011100 //Jump to constant address 2382
10010000000000000001000100111110 //Jump to constant address 2207
01110000100110000111000000000001 //Set r1 to 2439
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010100110 //Jump to constant address 1619
01110000000000110001000000000001 //Set r1 to 0x31
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001000110011110 //Jump to constant address 2255
00000000000000000000000100000011 //Compute r1 OR r0 and write result to r3
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110000000110 //Jump to constant address 1539
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110011100010 //Jump to constant address 1649
01110000000000010100000000000010 //Set r2 to 0x14
01100000000000000101001100100000 //If r3 == r2, then jump to offset 5
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001010011100 //Jump to constant address 2382
10010000000000000001000101110100 //Jump to constant address 2234
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000100000 //Push r2 to stack
01110000000000100010000000000001 //Set r1 to 0x22
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001010110100 //Jump to constant address 2394
01110000000000000000000000000001 //Set r1 to 0x00
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
01110000000000000101000000000001 //Set r1 to 0x05
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001010011100 //Jump to constant address 2382
01110000100110001100000000000001 //Set r1 to 2444
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010100110 //Jump to constant address 1619
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
01110000000000010101000000000001 //Set r1 to 0x15
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001010110100 //Jump to constant address 2394
01110000100110010000000000000001 //Set r1 to 2448
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010100110 //Jump to constant address 1619
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110000000000000101000000000001 //Set r1 to 0x05
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001010110100 //Jump to constant address 2394
01110000100110010100000000000001 //Set r1 to 2452
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010100110 //Jump to constant address 1619
01110000000000000000000000000001 //Set r1 to 0x00
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110000000000000111000000000001 //Set r1 to 0x07
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001010110100 //Jump to constant address 2394
01110000100110011010000000000001 //Set r1 to 2458
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010100110 //Jump to constant address 1619
01110000000000000000000000000001 //Set r1 to 0x00
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110000000000000110000000000001 //Set r1 to 0x06
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001010110100 //Jump to constant address 2394
01110000100110100000000000000001 //Set r1 to 2464
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010100110 //Jump to constant address 1619
01110000000000000000000000000001 //Set r1 to 0x00
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110010001010 //Jump to constant address 1605
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
01110000010001101010000000000001 //Set r1 to 1130
01110000000000000001000100000001 //Set highest 16 bits of r1 to 1
01110000000000000000000000000010 //Set r2 to 0
00001001100000000001001000000010 //Compute r2 + 1 and write result to r2
00110000000000000010001000010000 //If r2 >= r1, then jump to offset 2
10010000000000000001001010100110 //Jump to constant address 2387
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
01110000000000011011000000000001 //Set r1 to 27
01110000000000000000000000000010 //Set r2 to 0
00001001100000000001001000000010 //Compute r2 + 1 and write result to r2
00110000000000000010001000010000 //If r2 >= r1, then jump to offset 2
10010000000000000001001010111100 //Jump to constant address 2398
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
00000000000000000000000000000100 //data
01001001011011100110100101110100 //data
00000000000000000000000000001001 //data
01001001011011100110100101110100 //data
00100000011001000110111101101110 //data
01100101000000000000000000000000 //data
00000000000000000000000000001110 //data
01000011011010000110010101100011 //data
01101011011010010110111001100111 //data
00100000011001000111001001101001 //data
01110110011001010000000000000000 //data
00000000000000000000000000011001 //data
01000011011010000110010101100011 //data
01101011011010010110111001100111 //data
00100000011001000111001001101001 //data
01110110011001010010000001100011 //data
01101111011011100110111001100101 //data
01100011011101000110100101101111 //data
01101110000000000000000000000000 //data
00000000000000000000000000010101 //data
01000011011010000110010101100011 //data
01101011011010010110111001100111 //data
00100000011001000111001001101001 //data
01110110011001010010000001110011 //data
01110100011000010111010001110101 //data
01110011000000000000000000000000 //data
00000000000000000000000000011010 //data
01000011011010000110010101100011 //data
01101011011010010110111001100111 //data
00100000011010010110011000100000 //data
01100100011100100110100101110110 //data
01100101001000000110100101110011 //data
00100000011100100110010101100001 //data
01100100011110010000000000000000 //data
00000000000000000000000000001110 //data
01001101011011110111010101101110 //data
01110100011010010110111001100111 //data
00100000011001000111001001101001 //data
01110110011001010000000000000000 //data
00000000000000000000000000001100 //data
01000100011001010111011001101001 //data
01100011011001010010000001110010 //data
01100101011100110110010101110100 //data
00000000000000000000000000001100 //data
01010101010100110100001000100000 //data
01101101011011110110010001100101 //data
00100000011100110110010101110100 //data
00000000000000000000000000010010 //data
01001000011011110111001101110100 //data
00100000011011010110111101100100 //data
01100101001000000111001101100101 //data
01110100001000000111010001101111 //data
00100000001100000000000000000000 //data
00000000000000000000000000010010 //data
01001000011011110111001101110100 //data
00100000011011010110111101100100 //data
01100101001000000111001101100101 //data
01110100001000000111010001101111 //data
00100000001100010000000000000000 //data
00000000000000000000000000010010 //data
01001000011011110111001101110100 //data
00100000011011010110111101100100 //data
01100101001000000111001101100101 //data
01110100001000000111010001101111 //data
00100000001100100000000000000000 //data
00000000000000000000000000001101 //data
01000110011010010110110001100101 //data
01101110011000010110110101100101 //data
00100000011100110110010101101110 //data
01110100000000000000000000000000 //data
00000000000000000000000000001100 //data
01001111011100000110010101101110 //data
01101001011011100110011100100000 //data
01100110011010010110110001100101 //data
00000000000000000000000000001100 //data
01000011011011000110111101110011 //data
01101001011011100110011100100000 //data
01100110011010010110110001100101 //data
00000000000000000000000000001101 //data
01000011011100100110010101100001 //data
01110100011010010110111001100111 //data
00100000011001100110100101101100 //data
01100101000000000000000000000000 //data
00000000000000000000000000001101 //data
01000100011001010110110001100101 //data
01110100011010010110111001100111 //data
00100000011001100110100101101100 //data
01100101000000000000000000000000 //data
00000000000000000000000000010000 //data
01010010011001010111000101110101 //data
01100101011100110111010001101001 //data
01101110011001110010000001110111 //data
01110010011010010111010001100101 //data
00000000000000000000000000001010 //data
01010111011100100110100101110100 //data
01100101001000000110010001100001 //data
01110100011000010000000000000000 //data
00000000000000000000000000010010 //data
01010101011100000110010001100001 //data
01110100011010010110111001100111 //data
00100000011001100110100101101100 //data
01100101001000000111001101101001 //data
01111010011001010000000000000000 //data
00000000000000000000000000001110 //data
01010011011001010111010001110100 //data
01101001011011100110011100100000 //data
01100011011101010111001001110011 //data
01101111011100100000000000000000 //data
00000000000000000000000000001001 //data
01010010011001010110000101100100 //data
00100000011001100110100101101100 //data
01100101000000000000000000000000 //data
01110000000000000000000000000001 //Set r1 to 0
01110000000000001000000100000001 //Set highest 16 bits of r1 to 8
01110000000000000000000000000010 //Set r2 to 0
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001010111101000 //Jump to constant address 2804
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001010100011110 //Jump to constant address 2703
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001010001111010 //Jump to constant address 2621
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001001111001100 //Jump to constant address 2534
11111111111111111111111111111111 //Halt
00000000000000000000000000000000 //NOP
00000000000000000000000000000000 //NOP
01110000000000000000000000000001 //Set r1 to 0
01110000000000001000000100000001 //Set highest 16 bits of r1 to 8
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
01110000000000000110000000000001 //Set r1 to 6
01010000000000000010001000010000 //If r2 != r1, then jump to offset 2
10010000000000000001001111100100 //Jump to constant address 2546
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001011111011110 //Jump to constant address 3055
10010000000000000001001111001110 //Jump to constant address 2535
00000000000000000000000000000000 //NOP
01110000000000000110000000000010 //Set r2 to 6
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00001001100000000001001000000001 //Compute r2 + 1 and write result to r1
11100000000000000000001000000010 //Read at address in r2 with offset 0 to r2
01110000000000101000000000000011 //Set r3 to 40
01110000000000000000000000000100 //Set r4 to 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000100110001000 //Jump to constant address 1220
01110000000001000010000000000010 //Set r2 to 66
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00001001100000000001001000000001 //Compute r2 + 1 and write result to r1
11100000000000000000001000000010 //Read at address in r2 with offset 0 to r2
01110000000000110100000000000011 //Set r3 to 52
01110000000000000000000000000100 //Set r4 to 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000100110001000 //Jump to constant address 1220
01110000000001001000000000000010 //Set r2 to 72
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00001001100000000001001000000001 //Compute r2 + 1 and write result to r1
11100000000000000000001000000010 //Read at address in r2 with offset 0 to r2
01110000000010101100000000000011 //Set r3 to 172
01110000000000000000000000000100 //Set r4 to 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000100110001000 //Jump to constant address 1220
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001000000111010 //Jump to constant address 2077
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001000010001010 //Jump to constant address 2117
01110000000001010011000000000001 //Set r1 to 83
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000111111011110 //Jump to constant address 2031
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000111100010010 //Jump to constant address 1929
01110000000000000001000000000001 //Set r1 to 1
01110000000000001000000100000001 //Set highest 16 bits of r1 to 8
01110000000000010000000000000010 //Set r2 to 16
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110101110010 //Jump to constant address 1721
01111111111111111111000000000001 //Set r1 to 0xffff
01111111111111111111000100000001 //Set highest 16 bits of r1 to 0xffff
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000110100001000 //Jump to constant address 1668
01110000000001001110000000000001 //Set r1 to 78
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000111000011100 //Jump to constant address 1806
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000111101010110 //Jump to constant address 1963
01110000000000000001000000000001 //Set r1 to 1
01110000000000001000000100000001 //Set highest 16 bits of r1 to 8
01110000000000010000000000000010 //Set r2 to 16
01110000001010001101000000000011 //Set r3 to 653
01110000000000000000000000000100 //Set r4 to 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000100110001000 //Jump to constant address 1220
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
00000000000000000000000000000000 //NOP
00000000000000000000000000000000 //NOP
01110000000000000000000000000001 //Set r1 to 0
01110000000000001000000100000001 //Set highest 16 bits of r1 to 8
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
01110000000000000101000000000001 //Set r1 to 5
01010000000000000010001000010000 //If r2 != r1, then jump to offset 2
10010000000000000001010010010010 //Jump to constant address 2633
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001011111011110 //Jump to constant address 3055
10010000000000000001010001111100 //Jump to constant address 2622
00000000000000000000000000000000 //NOP
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000101010001100 //Jump to constant address 1350
01110000000010100100000000000001 //Set r1 to 164
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000101011100100 //Jump to constant address 1394
01110000000000000110000000000010 //Set r2 to 6
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00001001100000000001001000000001 //Compute r2 + 1 and write result to r1
11100000000000000000001000000010 //Read at address in r2 with offset 0 to r2
01110000000000101000000000000011 //Set r3 to 40
01110000000000000000000000000100 //Set r4 to 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000100110001000 //Jump to constant address 1220
01110000000000111011000000000010 //Set r2 to 59
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00001001100000000001001000000001 //Compute r2 + 1 and write result to r1
11100000000000000000001000000010 //Read at address in r2 with offset 0 to r2
01110000000000110000000000000011 //Set r3 to 48
01110000000000000000000000000100 //Set r4 to 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000100110001000 //Jump to constant address 1220
01110010011000101100000000000001 //Set r1 to 9772
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
01110000000000000000000000000010 //Set r2 to 0
01110100010000000000000100000010 //Set highest 16 bits of r2 to 17408
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
01110010011100100000000000000011 //Set r3 to 10016
01110000000000101100000100000011 //Set highest 16 bits of r3 to 44
11010000000000000001000100110000 //Write value in r3 to address in r1 with offset 1
01111101000010010000000000000100 //Set r4 to 53392
01110000000000000011000100000100 //Set highest 16 bits of r4 to 3
00001010000000000001010000000100 //Compute r4 - 1 and write result to r4
01100000000000000010000001000000 //If r0 == r4, then jump to offset 2
10010000000000000001010011011100 //Jump to constant address 2670
01110000000000000000000000000010 //Set r2 to 0
01110100010000111111000100000010 //Set highest 16 bits of r2 to 17471
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
01111101000010010000000000000100 //Set r4 to 53392
01110000000000000011000100000100 //Set highest 16 bits of r4 to 3
00001010000000000001010000000100 //Compute r4 - 1 and write result to r4
01100000000000000010000001000000 //If r0 == r4, then jump to offset 2
10010000000000000001010011101100 //Jump to constant address 2678
01110011100000000000000000000010 //Set r2 to 14336
01110100010000111111000100000010 //Set highest 16 bits of r2 to 17471
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
01111101000010010000000000000100 //Set r4 to 53392
01110000000000000011000100000100 //Set highest 16 bits of r4 to 3
00001010000000000001010000000100 //Compute r4 - 1 and write result to r4
01100000000000000010000001000000 //If r0 == r4, then jump to offset 2
10010000000000000001010011111100 //Jump to constant address 2686
01110000000000111010000000000010 //Set r2 to 0x3A
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
01110010001000011011000000000011 //Set r3 to 8731
01110000000000100111000100000011 //Set highest 16 bits of r3 to 39
11010000000000000001000100110000 //Write value in r3 to address in r1 with offset 1
01110010011111000000000000000100 //Set r4 to 10176
01110000000000001001000100000100 //Set highest 16 bits of r4 to 9
00001010000000000001010000000100 //Compute r4 - 1 and write result to r4
01100000000000000010000001000000 //If r0 == r4, then jump to offset 2
10010000000000000001010100010000 //Jump to constant address 2696
11010000000000000000000100000000 //Write value in r0 to address in r1 with offset 0
11010000000000000001000100000000 //Write value in r0 to address in r1 with offset 1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
00000000000000000000000000000000 //NOP
00000000000000000000000000000000 //NOP
01110000000000000000000000000001 //Set r1 to 0
01110000000000001000000100000001 //Set highest 16 bits of r1 to 8
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
01110000000000000011000000000001 //Set r1 to 3
01010000000000000010001000010000 //If r2 != r1, then jump to offset 2
10010000000000000001010100110110 //Jump to constant address 2715
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001011111011110 //Jump to constant address 3055
10010000000000000001010100100000 //Jump to constant address 2704
00000000000000000000000000000000 //NOP
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000101010001100 //Jump to constant address 1350
01110000000001100100000000000001 //Set r1 to 100
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000101011100100 //Jump to constant address 1394
01110001010000100000000000000001 //Set r1 to 5152
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
00001001100110011100000100000001 //Compute r1 + 412 and write result to r1
01110000000000000000000000000011 //Set r3 to 0
01110000000010000000000000000100 //Set r4 to 128
00000000000000000000000100000101 //Compute r1 OR r0 and write result to r5
01110000000011111100000000000001 //Set r1 to 252
01110000000000000000000000000010 //Set r2 to 0
01110000000000001111000000000110 //Set r6 to 15
11010000000000000000010100010000 //Write value in r1 to address in r5 with offset 0
01110000000011111111000000000111 //Set r7 to 255
01010000000000000010011100010000 //If r7 != r1, then jump to offset 2
01110000000011111100000000000001 //Set r1 to 252
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00001011000000000010001100000111 //Compute r3 >> 2 and write result to r7
11010000100000000000010101110000 //Write value in r7 to address in r5 with offset 2048
01010000000000000100001001100000 //If r2 != r6, then jump to offset 4
00001001100000011001010100000101 //Compute r5 + 25 and write result to r5
01110000000000000000000000000010 //Set r2 to 0
10010000000000000000000000000111 //Jump to offset address 3
00001001100000000001001000000010 //Compute r2 + 1 and write result to r2
00001001100000000001010100000101 //Compute r5 + 1 and write result to r5
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
01100000000000000010001101000000 //If r3 == r4, then jump to offset 2
10010000000000000001010101011010 //Jump to constant address 2733
01110000000000000110000000000010 //Set r2 to 6
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00001001100000000001001000000001 //Compute r2 + 1 and write result to r1
11100000000000000000001000000010 //Read at address in r2 with offset 0 to r2
01110000000000101000000000000011 //Set r3 to 40
01110000000000000000000000000100 //Set r4 to 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000100110001000 //Jump to constant address 1220
01110000000000101001000000000010 //Set r2 to 41
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00001001100000000001001000000001 //Compute r2 + 1 and write result to r1
11100000000000000000001000000010 //Read at address in r2 with offset 0 to r2
01110000000000101010000000000011 //Set r3 to 42
01110000000000000000000000000100 //Set r4 to 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000100110001000 //Jump to constant address 1220
00000000000000000000000000000000 //NOP
01110000000000000000000000000001 //Set r1 to 0
01110000000000001000000100000001 //Set highest 16 bits of r1 to 8
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
01110000000000000100000000000001 //Set r1 to 4
01010000000000000010001000010000 //If r2 != r1, then jump to offset 2
10010000000000000001010110110100 //Jump to constant address 2778
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001011111011110 //Jump to constant address 3055
10010000000000000001010110011110 //Jump to constant address 2767
00000000000000000000000000000000 //NOP
01110000000010000100000000000001 //Set r1 to 132
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000101011100100 //Jump to constant address 1394
01110000000000000110000000000010 //Set r2 to 6
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00001001100000000001001000000001 //Compute r2 + 1 and write result to r1
11100000000000000000001000000010 //Read at address in r2 with offset 0 to r2
01110000000000101000000000000011 //Set r3 to 40
01110000000000000000000000000100 //Set r4 to 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000100110001000 //Jump to constant address 1220
01110000000000110011000000000010 //Set r2 to 51
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00001001100000000001001000000001 //Compute r2 + 1 and write result to r1
11100000000000000000001000000010 //Read at address in r2 with offset 0 to r2
01110000000000101100000000000011 //Set r3 to 44
01110000000000000000000000000100 //Set r4 to 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000100110001000 //Jump to constant address 1220
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000101010001100 //Jump to constant address 1350
01110000000011000100000000000001 //Set r1 to 196
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000101010110100 //Jump to constant address 1370
01110000000010100100000000000001 //Set r1 to 164
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000101011100100 //Jump to constant address 1394
01110000000001010111000000000010 //Set r2 to 87
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00001001100000000001001000000001 //Compute r2 + 1 and write result to r1
11100000000000000000001000000010 //Read at address in r2 with offset 0 to r2
01110000000001111010000000000011 //Set r3 to 122
01110000000000000001000000000100 //Set r4 to 1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000100110001000 //Jump to constant address 1220
01110000000001011101000000000010 //Set r2 to 93
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00001001100000000001001000000001 //Compute r2 + 1 and write result to r1
11100000000000000000001000000010 //Read at address in r2 with offset 0 to r2
01110000000100000010000000000011 //Set r3 to 258
01110000000000000010000000000100 //Set r4 to 2
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000101000001010 //Jump to constant address 1285
01110000000001010111000000000010 //Set r2 to 87
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00001001100000000001001000000001 //Compute r2 + 1 and write result to r1
11100000000000000000001000000010 //Read at address in r2 with offset 0 to r2
01110000000011110010000000000011 //Set r3 to 242
01110000000000000001000000000100 //Set r4 to 1
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000100110001000 //Jump to constant address 1220
01110000000001011101000000000010 //Set r2 to 93
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00001001100000000001001000000001 //Compute r2 + 1 and write result to r1
11100000000000000000001000000010 //Read at address in r2 with offset 0 to r2
01110000000110000010000000000011 //Set r3 to 386
01110000000000000010000000000100 //Set r4 to 2
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000101000001010 //Jump to constant address 1285
01110000000000010001000000000010 //Set r2 to 17
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00001001100000000001001000000001 //Compute r2 + 1 and write result to r1
11100000000000000000001000000010 //Read at address in r2 with offset 0 to r2
01110000000000101100000000000011 //Set r3 to 44
01110000000000000000000000000100 //Set r4 to 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000100110001000 //Jump to constant address 1220
00000000000000000000000000000000 //NOP
01110000000000000000000000000001 //Set r1 to 0
01110000000000001000000100000001 //Set highest 16 bits of r1 to 8
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
01110000000000000001000000000001 //Set r1 to 1
01010000000000000010001000010000 //If r2 != r1, then jump to offset 2
10010000000000000001011001110010 //Jump to constant address 2873
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001011111011110 //Jump to constant address 3055
10010000000000000001011001011100 //Jump to constant address 2862
00000000000000000000000000000000 //NOP
01110000000000000110000000000010 //Set r2 to 6
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00001001100000000001001000000001 //Compute r2 + 1 and write result to r1
11100000000000000000001000000010 //Read at address in r2 with offset 0 to r2
01110000000000101000000000000011 //Set r3 to 40
01110000000000000000000000000100 //Set r4 to 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000100110001000 //Jump to constant address 1220
01110000000000011010000000000010 //Set r2 to 26
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00001001100000000001001000000001 //Compute r2 + 1 and write result to r1
11100000000000000000001000000010 //Read at address in r2 with offset 0 to r2
01110000000000101110000000000011 //Set r3 to 46
01110000000000000000000000000100 //Set r4 to 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000100110001000 //Jump to constant address 1220
00000000000000000000000000000000 //NOP
01110000000000000000000000000001 //Set r1 to 0
01110000000000001000000100000001 //Set highest 16 bits of r1 to 8
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
01110000000000000010000000000001 //Set r1 to 2
01010000000000000010001000010000 //If r2 != r1, then jump to offset 2
10010000000000000001011010101110 //Jump to constant address 2903
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000001011111011110 //Jump to constant address 3055
10010000000000000001011010011000 //Jump to constant address 2892
00000000000000000000000000000000 //NOP
01110010011000110010000000000001 //Set r1 to 9778
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
01110000000000101000000000000010 //Set r2 to 40
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
01110000000001000001000000000010 //Set r2 to 65
11010000000000000001000100100000 //Write value in r2 to address in r1 with offset 1
01110000000000000001000000000010 //Set r2 to 1
11010000000000000010000100100000 //Write value in r2 to address in r1 with offset 2
01110000000000000000000000000010 //Set r2 to 0
00001010100000000100001000000010 //Compute r2 << 4 and write result to r2
11010000000000000011000100100000 //Write value in r2 to address in r1 with offset 3
00001001100000000100000100000001 //Compute r1 + 4 and write result to r1
01110000000000110010000000000010 //Set r2 to 50
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
01110000000001000010000000000010 //Set r2 to 66
11010000000000000001000100100000 //Write value in r2 to address in r1 with offset 1
01110000000000000010000000000010 //Set r2 to 2
11010000000000000010000100100000 //Write value in r2 to address in r1 with offset 2
01110000000000000001000000000010 //Set r2 to 1
00001010100000000100001000000010 //Compute r2 << 4 and write result to r2
11010000000000000011000100100000 //Write value in r2 to address in r1 with offset 3
00001001100000000100000100000001 //Compute r1 + 4 and write result to r1
01110000000000111100000000000010 //Set r2 to 60
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
01110000000001000011000000000010 //Set r2 to 67
11010000000000000001000100100000 //Write value in r2 to address in r1 with offset 1
01110000000000000011000000000010 //Set r2 to 3
11010000000000000010000100100000 //Write value in r2 to address in r1 with offset 2
01110000000000000010000000000010 //Set r2 to 2
00001010100000000100001000000010 //Compute r2 << 4 and write result to r2
11010000000000000011000100100000 //Write value in r2 to address in r1 with offset 3
00001001100000000100000100000001 //Compute r1 + 4 and write result to r1
01110000000001000110000000000010 //Set r2 to 70
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
01110000000001000100000000000010 //Set r2 to 68
11010000000000000001000100100000 //Write value in r2 to address in r1 with offset 1
01110000000000000100000000000010 //Set r2 to 4
11010000000000000010000100100000 //Write value in r2 to address in r1 with offset 2
01110000000000000011000000000010 //Set r2 to 3
00001010100000000100001000000010 //Compute r2 << 4 and write result to r2
11010000000000000011000100100000 //Write value in r2 to address in r1 with offset 3
00001001100000000100000100000001 //Compute r1 + 4 and write result to r1
01110000000001010000000000000010 //Set r2 to 80
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
01110000000001000101000000000010 //Set r2 to 69
11010000000000000001000100100000 //Write value in r2 to address in r1 with offset 1
01110000000000000101000000000010 //Set r2 to 5
11010000000000000010000100100000 //Write value in r2 to address in r1 with offset 2
01110000000000000100000000000010 //Set r2 to 4
00001010100000000100001000000010 //Compute r2 << 4 and write result to r2
11010000000000000011000100100000 //Write value in r2 to address in r1 with offset 3
00001001100000000100000100000001 //Compute r1 + 4 and write result to r1
01110000000001011010000000000010 //Set r2 to 90
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
01110000000001000110000000000010 //Set r2 to 70
11010000000000000001000100100000 //Write value in r2 to address in r1 with offset 1
01110000000000000110000000000010 //Set r2 to 6
11010000000000000010000100100000 //Write value in r2 to address in r1 with offset 2
01110000000000000101000000000010 //Set r2 to 5
00001010100000000100001000000010 //Compute r2 << 4 and write result to r2
11010000000000000011000100100000 //Write value in r2 to address in r1 with offset 3
00001001100000000100000100000001 //Compute r1 + 4 and write result to r1
01110000000001100100000000000010 //Set r2 to 100
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
01110000000001000110000000000010 //Set r2 to 70
11010000000000000001000100100000 //Write value in r2 to address in r1 with offset 1
01110000000000000001000000000010 //Set r2 to 1
11010000000000000010000100100000 //Write value in r2 to address in r1 with offset 2
01110000000000000000000000000010 //Set r2 to 0
00001010100000000100001000000010 //Compute r2 << 4 and write result to r2
11010000000000000011000100100000 //Write value in r2 to address in r1 with offset 3
00001001100000000100000100000001 //Compute r1 + 4 and write result to r1
01110000000001100110000000000010 //Set r2 to 102
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
01110000000001000101000000000010 //Set r2 to 69
11010000000000000001000100100000 //Write value in r2 to address in r1 with offset 1
01110000000000000010000000000010 //Set r2 to 2
11010000000000000010000100100000 //Write value in r2 to address in r1 with offset 2
01110000000000000001000000000010 //Set r2 to 1
00001010100000000100001000000010 //Compute r2 << 4 and write result to r2
11010000000000000011000100100000 //Write value in r2 to address in r1 with offset 3
00001001100000000100000100000001 //Compute r1 + 4 and write result to r1
01110000000001101000000000000010 //Set r2 to 104
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
01110000000001000100000000000010 //Set r2 to 68
11010000000000000001000100100000 //Write value in r2 to address in r1 with offset 1
01110000000000000011000000000010 //Set r2 to 3
11010000000000000010000100100000 //Write value in r2 to address in r1 with offset 2
01110000000000000010000000000010 //Set r2 to 2
00001010100000000100001000000010 //Compute r2 << 4 and write result to r2
11010000000000000011000100100000 //Write value in r2 to address in r1 with offset 3
00001001100000000100000100000001 //Compute r1 + 4 and write result to r1
01110000000001101010000000000010 //Set r2 to 106
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
01110000000001000011000000000010 //Set r2 to 67
11010000000000000001000100100000 //Write value in r2 to address in r1 with offset 1
01110000000000000100000000000010 //Set r2 to 4
11010000000000000010000100100000 //Write value in r2 to address in r1 with offset 2
01110000000000000011000000000010 //Set r2 to 3
00001010100000000100001000000010 //Compute r2 << 4 and write result to r2
11010000000000000011000100100000 //Write value in r2 to address in r1 with offset 3
00001001100000000100000100000001 //Compute r1 + 4 and write result to r1
01110000000001101100000000000010 //Set r2 to 108
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
01110000000001000010000000000010 //Set r2 to 66
11010000000000000001000100100000 //Write value in r2 to address in r1 with offset 1
01110000000000000101000000000010 //Set r2 to 5
11010000000000000010000100100000 //Write value in r2 to address in r1 with offset 2
01110000000000000100000000000010 //Set r2 to 4
00001010100000000100001000000010 //Compute r2 << 4 and write result to r2
11010000000000000011000100100000 //Write value in r2 to address in r1 with offset 3
00001001100000000100000100000001 //Compute r1 + 4 and write result to r1
01110000000001101110000000000010 //Set r2 to 110
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
01110000000001000001000000000010 //Set r2 to 65
11010000000000000001000100100000 //Write value in r2 to address in r1 with offset 1
01110000000000000110000000000010 //Set r2 to 6
11010000000000000010000100100000 //Write value in r2 to address in r1 with offset 2
01110000000000000101000000000010 //Set r2 to 5
00001010100000000100001000000010 //Compute r2 << 4 and write result to r2
11010000000000000011000100100000 //Write value in r2 to address in r1 with offset 3
00001001100000000100000100000001 //Compute r1 + 4 and write result to r1
01110000000001110100000000000010 //Set r2 to 116
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
01110000000000110000000000000010 //Set r2 to 48
11010000000000000001000100100000 //Write value in r2 to address in r1 with offset 1
01110000000000000001000000000010 //Set r2 to 1
11010000000000000010000100100000 //Write value in r2 to address in r1 with offset 2
01110000000000000011000000000010 //Set r2 to 3
00001010100000000100001000000010 //Compute r2 << 4 and write result to r2
11010000000000000011000100100000 //Write value in r2 to address in r1 with offset 3
01110000000000000110000000000010 //Set r2 to 6
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00001001100000000001001000000001 //Compute r2 + 1 and write result to r1
11100000000000000000001000000010 //Read at address in r2 with offset 0 to r2
01110000000000101000000000000011 //Set r3 to 40
01110000000000000000000000000100 //Set r4 to 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000100110001000 //Jump to constant address 1220
01110000000000100010000000000010 //Set r2 to 34
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00001001100000000001001000000001 //Compute r2 + 1 and write result to r1
11100000000000000000001000000010 //Read at address in r2 with offset 0 to r2
01110000000000110010000000000011 //Set r3 to 50
01110000000000000000000000000100 //Set r4 to 0
00100000000000000000000000001111 //Save PC to r15
10110000000000000000000011110000 //Push r15 to stack
10010000000000000000100110001000 //Jump to constant address 1220
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000001 //Set r1 to 9776
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
01110000000000000001000000000011 //Set r3 to 0b00000001
00000000100000000000001000110011 //Compute r2 AND r3 and write result to r3
01100000000000000010000000110000 //If r0 == r3, then jump to offset 2
10010000000000000001100000010100 //Jump to constant address 3082
01110000110101000000000000000001 //Set r1 to 3392
01110000000000000011000100000001 //Set highest 16 bits of r1 to 3
00001010000000000001000100000001 //Compute r1 - 1 and write result to r1
01100000000000000010000000010000 //If r0 == r1, then jump to offset 2
10010000000000000001011111110110 //Jump to constant address 3067
01110010011000110000000000000001 //Set r1 to 9776
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
01110000000000000001000000000011 //Set r3 to 0b00000001
00000000100000000000001000110011 //Compute r2 AND r3 and write result to r3
01010000000000000010000000110000 //If r0 != r3, then jump to offset 2
10010000000000000001011111111100 //Jump to constant address 3070
01110000000000000000000000000001 //Set r1 to 0
01110000000000001000000100000001 //Set highest 16 bits of r1 to 8
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00001001100000000001001000000010 //Compute r2 + 1 and write result to r2
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
00000000000000000000000000000000 //NOP
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
10100000000000000000000000001111 //Pop from stack to r15
10000000000000000011000011110000 //Jump to reg r15 with offset 3
00010000000000000000000000000000 //Return from interrupt
00010000000000000000000000000000 //Return from interrupt
00010000000000000000000000000000 //Return from interrupt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
01110000000000000000000000000001 //Set r1 to 0
01110000000000001000000100000001 //Set highest 16 bits of r1 to 8
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
01110000000000000001000000000010 //Set r2 to 1
01100000000000000100000100100000 //If r1 == r2, then jump to offset 4
01110000000000000010000000000010 //Set r2 to 2
01100000000000000010000100100000 //If r1 == r2, then jump to offset 2
10010000000000000001100001011010 //Jump to constant address 3117
01110010010000100001000000000001 //Set r1 to 9249
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
01110010010000100000000000000010 //Set r2 to 9248
01110000000011000000000100000010 //Set highest 16 bits of r2 to 192
11100000000000000000000100000011 //Read at address in r1 with offset 0 to r3
11100000000000000000001000000100 //Read at address in r2 with offset 0 to r4
00001000100000000111001100000101 //Compute r3 AND 0b111 and write result to r5
00001010000000000111010100000101 //Compute r5 - 0b111 and write result to r5
01010000000000000011010100000000 //If r5 != r0, then jump to offset 3
00001001100000000001010000000100 //Compute r4 + 1 and write result to r4
11010000000000000000001001000000 //Write value in r4 to address in r2 with offset 0
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
11010000000000000000000100110000 //Write value in r3 to address in r1 with offset 0
00000000000000000000000000000000 //NOP
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00010000000000000000000000000000 //Return from interrupt
