10010000000000000000000000001100 //Jump to constant address 6
10010000000000000010100111000100 //Jump to constant address 5346
10010000000000000010100111110010 //Jump to constant address 5369
10010000000000000010101000100000 //Jump to constant address 5392
10010000000000000010101001001110 //Jump to constant address 5415
00000000000000000001010101001111 //Length of program
01110000000000000000000000001111 //Set rsp to 0
01110000000001110000000100001111 //Set highest 16 bits of rsp to 112
01110000000000001110000000000001 //Set r1 to 14
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000010011111110000 //Jump to constant address 5112
11111111111111111111111111111111 //Halt
01110010011000101110000000000010 //Set r2 to 9774
01110000000011000000000100000010 //Set highest 16 bits of r2 to 192
11010000000000000000001000010000 //Write value in r1 to address in r2 with offset 0
11111111111111111111111111111111 //Halt
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000001001001 //data
00000000000000000000000001101110 //data
00000000000000000000000001101001 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000000000 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000001000101 //data
00000000000000000000000001001110 //data
00000000000000000000000001000100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010010 //data
00000000000000000000000001000101 //data
00000000000000000000000001010001 //data
00000000000000000000000001010101 //data
00000000000000000000000001000101 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001001001 //data
00000000000000000000000001000011 //data
00000000000000000000000000100000 //data
00000000000000000000000001110110 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000000000 //data
00000000000000000000000001010011 //data
00000000000000000000000001101111 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101100 //data
00000000000000000000000001101111 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000000000 //data
00000000000000000000000001001000 //data
00000000000000000000000001010100 //data
00000000000000000000000001010100 //data
00000000000000000000000001010000 //data
00000000000000000000000000101111 //data
00000000000000000000000000110001 //data
00000000000000000000000000101110 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000110100 //data
00000000000000000000000000110000 //data
00000000000000000000000000110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001001110 //data
00000000000000000000000001101111 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000110 //data
00000000000000000000000001101111 //data
00000000000000000000000001110101 //data
00000000000000000000000001101110 //data
00000000000000000000000001100100 //data
00000000000000000000000000001010 //data
00000000000000000000000001010011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110110 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000000111010 //data
00000000000000000000000000100000 //data
00000000000000000000000001000110 //data
00000000000000000000000001010000 //data
00000000000000000000000001000111 //data
00000000000000000000000001000011 //data
00000000000000000000000000110100 //data
00000000000000000000000000101111 //data
00000000000000000000000000110001 //data
00000000000000000000000000101110 //data
00000000000000000000000000110000 //data
00000000000000000000000000001010 //data
00000000000000000000000001000011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000001101110 //data
00000000000000000000000001110100 //data
00000000000000000000000000101101 //data
00000000000000000000000001010100 //data
00000000000000000000000001111001 //data
00000000000000000000000001110000 //data
00000000000000000000000001100101 //data
00000000000000000000000000111010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000001111000 //data
00000000000000000000000001110100 //data
00000000000000000000000000101111 //data
00000000000000000000000001101000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101101 //data
00000000000000000000000001101100 //data
00000000000000000000000000001010 //data
00000000000000000000000000001010 //data
00000000000000000000000000000000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110010 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000000000 //data
00000000000000000000000001000101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110010 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110111 //data
00000000000000000000000001101000 //data
00000000000000000000000001101001 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000000000000 //data
00000000000000000000000001001000 //data
00000000000000000000000001010100 //data
00000000000000000000000001010100 //data
00000000000000000000000001010000 //data
00000000000000000000000000101111 //data
00000000000000000000000000110001 //data
00000000000000000000000000101110 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000110011 //data
00000000000000000000000000110000 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000001001101 //data
00000000000000000000000001101111 //data
00000000000000000000000001110110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010000 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001101101 //data
00000000000000000000000001100001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001101110 //data
00000000000000000000000001110100 //data
00000000000000000000000001101100 //data
00000000000000000000000001111001 //data
00000000000000000000000000001010 //data
00000000000000000000000001001100 //data
00000000000000000000000001101111 //data
00000000000000000000000001100011 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000111010 //data
00000000000000000000000000100000 //data
00000000000000000000000000101111 //data
00000000000000000000000001001001 //data
00000000000000000000000001001110 //data
00000000000000000000000001000100 //data
00000000000000000000000001000101 //data
00000000000000000000000001011000 //data
00000000000000000000000000101110 //data
00000000000000000000000001001000 //data
00000000000000000000000001010100 //data
00000000000000000000000001001101 //data
00000000000000000000000000001010 //data
00000000000000000000000000000000 //data
00000000000000000000000000101111 //data
00000000000000000000000000110100 //data
00000000000000000000000000110000 //data
00000000000000000000000000110100 //data
00000000000000000000000000101110 //data
00000000000000000000000001001000 //data
00000000000000000000000001010100 //data
00000000000000000000000001001101 //data
00000000000000000000000000000000 //data
00000000000000000000000001010010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001101111 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000000000 //data
00000000000000000000000001101111 //data
00000000000000000000000001110000 //data
00000000000000000000000001100101 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001101111 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000000000 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001000001 //data
00000000000000000000000001010010 //data
00000000000000000000000001010100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010000 //data
00000000000000000000000001000001 //data
00000000000000000000000001010100 //data
00000000000000000000000001001000 //data
00000000000000000000000001001110 //data
00000000000000000000000001000001 //data
00000000000000000000000001001101 //data
00000000000000000000000001000101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000000000 //data
00000000000000000000000000001010 //data
00000000000000000000000000000000 //data
00000000000000000000000001000101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110010 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110111 //data
00000000000000000000000001101000 //data
00000000000000000000000001101001 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110111 //data
00000000000000000000000001110010 //data
00000000000000000000000001101001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000000000000 //data
00000000000000000000000001001000 //data
00000000000000000000000001010100 //data
00000000000000000000000001010100 //data
00000000000000000000000001010000 //data
00000000000000000000000000101111 //data
00000000000000000000000000110001 //data
00000000000000000000000000101110 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000110010 //data
00000000000000000000000000110000 //data
00000000000000000000000000110000 //data
00000000000000000000000000100000 //data
00000000000000000000000001001111 //data
00000000000000000000000001001011 //data
00000000000000000000000000001010 //data
00000000000000000000000001010011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110110 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000000111010 //data
00000000000000000000000000100000 //data
00000000000000000000000001000110 //data
00000000000000000000000001010000 //data
00000000000000000000000001000111 //data
00000000000000000000000001000011 //data
00000000000000000000000000110100 //data
00000000000000000000000000101111 //data
00000000000000000000000000110001 //data
00000000000000000000000000101110 //data
00000000000000000000000000110000 //data
00000000000000000000000000001010 //data
00000000000000000000000000001010 //data
00000000000000000000000000000000 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000001000101 //data
00000000000000000000000001001110 //data
00000000000000000000000001000100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010000 //data
00000000000000000000000001000001 //data
00000000000000000000000001010100 //data
00000000000000000000000001001000 //data
00000000000000000000000001001110 //data
00000000000000000000000001000001 //data
00000000000000000000000001001101 //data
00000000000000000000000001000101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000000000 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001000001 //data
00000000000000000000000001010010 //data
00000000000000000000000001010100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010010 //data
00000000000000000000000001000101 //data
00000000000000000000000001010001 //data
00000000000000000000000001010101 //data
00000000000000000000000001000101 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000000000 //data
00000000000000000000000001000111 //data
00000000000000000000000001101111 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000000000 //data
00000000000000000000000000111100 //data
00000000000000000000000000100001 //data
00000000000000000000000001000100 //data
00000000000000000000000001001111 //data
00000000000000000000000001000011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011001 //data
00000000000000000000000001010000 //data
00000000000000000000000001000101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101101 //data
00000000000000000000000001101100 //data
00000000000000000000000000111110 //data
00000000000000000000000000111100 //data
00000000000000000000000001101000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101101 //data
00000000000000000000000001101100 //data
00000000000000000000000000111110 //data
00000000000000000000000000111100 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000000111110 //data
00000000000000000000000000111100 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000111110 //data
00000000000000000000000001000101 //data
00000000000000000000000001010010 //data
00000000000000000000000001010010 //data
00000000000000000000000001001111 //data
00000000000000000000000001010010 //data
00000000000000000000000000110100 //data
00000000000000000000000000110000 //data
00000000000000000000000000110100 //data
00000000000000000000000000111100 //data
00000000000000000000000000101111 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000111110 //data
00000000000000000000000000111100 //data
00000000000000000000000000101111 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000000111110 //data
00000000000000000000000000111100 //data
00000000000000000000000001100010 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001111001 //data
00000000000000000000000000111110 //data
00000000000000000000000001000101 //data
00000000000000000000000001010010 //data
00000000000000000000000001010010 //data
00000000000000000000000001001111 //data
00000000000000000000000001010010 //data
00000000000000000000000000100000 //data
00000000000000000000000000110100 //data
00000000000000000000000000110000 //data
00000000000000000000000000110100 //data
00000000000000000000000000111010 //data
00000000000000000000000000100000 //data
00000000000000000000000001010100 //data
00000000000000000000000001101000 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000000100000 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000000100000 //data
00000000000000000000000001101110 //data
00000000000000000000000001101111 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110000 //data
00000000000000000000000001100001 //data
00000000000000000000000001100111 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001111001 //data
00000000000000000000000001101111 //data
00000000000000000000000001110101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100001 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101111 //data
00000000000000000000000001101011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100110 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000111100 //data
00000000000000000000000000101111 //data
00000000000000000000000001100010 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001111001 //data
00000000000000000000000000111110 //data
00000000000000000000000000111100 //data
00000000000000000000000000101111 //data
00000000000000000000000001101000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101101 //data
00000000000000000000000001101100 //data
00000000000000000000000000111110 //data
00000000000000000000000000000000 //data
00000000000000000000000001100011 //data
00000000000000000000000001110101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110011 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110010 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000000000 //data
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000100001011110 //Jump to constant address 1071
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000100001110010 //Jump to constant address 1081
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000000000000000001 //Set r1 to 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
01000000000000000010110111000000 //If r13 > r12, then jump to offset 2
10010000000000000000100010000000 //Jump to constant address 1088
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000100010010000 //Jump to constant address 1096
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
00000010000000000000010111000101 //Compute r5 - r12 and write result to r5
01110000000000000001000000001100 //Set r12 to 1
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
10010000000000000000100001110100 //Jump to constant address 1082
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000100010110000 //Jump to constant address 1112
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000100011000100 //Jump to constant address 1122
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //NOP to quickfix double labels
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
01000000000000000010110111000000 //If r13 > r12, then jump to offset 2
10010000000000000000100011010010 //Jump to constant address 1129
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000100011011110 //Jump to constant address 1135
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
00000010000000000000010111000101 //Compute r5 - r12 and write result to r5
10010000000000000000100011000110 //Jump to constant address 1123
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000000000000000000000010 //Set r2 to 0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00000000000000000000000000111101 //Compute r0 OR r3 and write result to r13
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000000100100000010 //Jump to constant address 1153
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000100100101000 //Jump to constant address 1172
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100001000 //Read at address in r1 with offset 0 to r8
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000000000000110000000 //Write value in r8 to address in r1 with offset 0
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
00000001100000000000001011000010 //Compute r2 + r12 and write result to r2
10010000000000000000100011110110 //Jump to constant address 1147
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110010011000101110000000000001 //Set r1 to 9774
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110010011000101110000000000011 //Set r3 to 9774
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000010100000010 //Read at address in r5 with offset 0 to r2
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
00001000000000000001000000000100 //Compute r0 OR 1 and write result to r4
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000000100101101010 //Jump to constant address 1205
00001000000000000000000000000100 //Compute r0 OR 0 and write result to r4
00001010000000000000010000001100 //Compute r4 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000100101111100 //Jump to constant address 1214
11010000000000000000001100100000 //Write value in r2 to address in r3 with offset 0
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
00000001100000000000010111000101 //Compute r5 + r12 and write result to r5
11100000000000000000010100000010 //Read at address in r5 with offset 0 to r2
10010000000000000000100101011100 //Jump to constant address 1198
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000010010100111000000000001 //Set r1 to 1191
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010010100111000000000001 //Set r1 to 1191
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001100100010000000000101 //Set r5 to 802
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000001111001010001 //Write value in r5 to address in rbp with offset -1
11010000000000000010111001000001 //Write value in r4 to address in rbp with offset -2
01110000010001001110000000000001 //Set r1 to 1102
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000001111000101100 //Read at address in rbp with offset -1 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00001000000000001010000000000100 //Compute r0 OR 10 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000000011111000010001 //Write value in r1 to address in rbp with offset -3
01110000000000000000000000001100 //Set r12 to 0
11010000000000000100111011000001 //Write value in r12 to address in rbp with offset -4
01110000010000100101000000000001 //Set r1 to 1061
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000001111000101100 //Read at address in rbp with offset -1 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00001000000000001010000000000100 //Compute r0 OR 10 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000000001111000010001 //Write value in r1 to address in rbp with offset -1
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000000001111000101100 //Read at address in rbp with offset -1 to r12
01110000000000000000000000001101 //Set r13 to 0
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000000100111111100 //Jump to constant address 1278
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000101000011100 //Jump to constant address 1294
01110000010011011100000000000001 //Set r1 to 1244
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000001111000101100 //Read at address in rbp with offset -1 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
11100000000000000010111000101100 //Read at address in rbp with offset -2 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000000100111000010001 //Write value in r1 to address in rbp with offset -4
11100000000000000011111000100010 //Read at address in rbp with offset -3 to r2
00001001100000110000001000000010 //Compute r2 + 48 and write result to r2
11100000000000000100111000100001 //Read at address in rbp with offset -4 to r1
11100000000000000100111000100011 //Read at address in rbp with offset -4 to r3
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
11010000000000000100111000110001 //Write value in r3 to address in rbp with offset -4
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000000000010111000101100 //Read at address in rbp with offset -2 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000101111100001111 //Compute rsp - 5 and write result to rsp
11010000000000000101111001000001 //Write value in r4 to address in rbp with offset -5
01110000010011011100000000000001 //Set r1 to 1244
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000101111000101100 //Read at address in rbp with offset -5 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000000000101111000101100 //Read at address in rbp with offset -5 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000001001111100001111 //Compute rsp - 9 and write result to rsp
11010000000000000110111001010001 //Write value in r5 to address in rbp with offset -6
11010000000000000111111001000001 //Write value in r4 to address in rbp with offset -7
01110000010001001110000000000001 //Set r1 to 1102
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000110111000101100 //Read at address in rbp with offset -6 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00001000000000010000000000000100 //Compute r0 OR 16 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000001000111000010001 //Write value in r1 to address in rbp with offset -8
01110000000000000000000000001100 //Set r12 to 0
11010000000000001001111011000001 //Write value in r12 to address in rbp with offset -9
01110000010000100101000000000001 //Set r1 to 1061
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000110111000101100 //Read at address in rbp with offset -6 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00001000000000010000000000000100 //Compute r0 OR 16 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000000110111000010001 //Write value in r1 to address in rbp with offset -6
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000000110111000101100 //Read at address in rbp with offset -6 to r12
01110000000000000000000000001101 //Set r13 to 0
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000000101010111000 //Jump to constant address 1372
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000101011011000 //Jump to constant address 1388
01110000010100111010000000000001 //Set r1 to 1338
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000110111000101100 //Read at address in rbp with offset -6 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
11100000000000000111111000101100 //Read at address in rbp with offset -7 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000000001001111000101100 //Read at address in rbp with offset -9 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000001001111000010001 //Write value in r1 to address in rbp with offset -9
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000001000111000101100 //Read at address in rbp with offset -8 to r12
01110000000000001001000000001101 //Set r13 to 9
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000000101011100100 //Jump to constant address 1394
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000101011110100 //Jump to constant address 1402
11100000000000001000111000100010 //Read at address in rbp with offset -8 to r2
00001001100001000001001000000010 //Compute r2 + 65 and write result to r2
01110000000000001010000000001100 //Set r12 to 10
00000010000000000000001011000010 //Compute r2 - r12 and write result to r2
10010000000000000000101011111000 //Jump to constant address 1404
11100000000000001000111000100010 //Read at address in rbp with offset -8 to r2
00001001100000110000001000000010 //Compute r2 + 48 and write result to r2
11100000000000001001111000100001 //Read at address in rbp with offset -9 to r1
11100000000000001001111000100011 //Read at address in rbp with offset -9 to r3
00001001100000000001001100000011 //Compute r3 + 1 and write result to r3
11010000000000001001111000110001 //Write value in r3 to address in rbp with offset -9
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000000000111111000101100 //Read at address in rbp with offset -7 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
11100000000000001001111000101100 //Read at address in rbp with offset -9 to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000001010111100001111 //Compute rsp - 10 and write result to rsp
11010000000000001010111001000001 //Write value in r4 to address in rbp with offset -10
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001011100000000001000100000001 //Compute r1 * 1 and write result to r1
11100000000000001010111000101100 //Read at address in rbp with offset -10 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
01110000000000110000000000001100 //Set r12 to 48
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00001011100000000001000100000001 //Compute r1 * 1 and write result to r1
11100000000000001010111000101100 //Read at address in rbp with offset -10 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
01110000000001111000000000001100 //Set r12 to 120
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00001000000000000010000000000001 //Compute r0 OR 2 and write result to r1
00001011100000000001000100000001 //Compute r1 * 1 and write result to r1
11100000000000001010111000101100 //Read at address in rbp with offset -10 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000001010111000010001 //Write value in r1 to address in rbp with offset -10
01110000010100111010000000000001 //Set r1 to 1338
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000001010111000101100 //Read at address in rbp with offset -10 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000000001010111000101100 //Read at address in rbp with offset -10 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000000000000000000000011 //Set r3 to 0
01110000000001001100000100000011 //Set highest 16 bits of r3 to 76
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000001111000000 //Write value in r12 to address in r3 with offset 0
01110010011000100110000000000001 //Set r1 to 9766
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
01110010011000100111000000000001 //Set r1 to 9767
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
01110000000000000001000000001100 //Set r12 to 1
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
11100000000000000000001100000010 //Read at address in r3 with offset 0 to r2
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000101110011010 //Jump to constant address 1485
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000101110100010 //Jump to constant address 1489
10010000000000000000101110001100 //Jump to constant address 1478
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 9776
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01111111111011111111000000000010 //Set r2 to 0b1111111011111111
00000000100000000000000100100001 //Compute r1 AND r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 9776
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01110000000100000000000000000010 //Set r2 to 0b100000000
00000000000000000000000100100001 //Compute r1 OR r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110010011000110001000000000001 //Set r1 to 9777
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000001011111100001111 //Compute rsp - 11 and write result to rsp
01110000000000000001000000000001 //Set r1 to 1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110000111010 //Jump to constant address 1565
01110010011000100100000000000001 //Set r1 to 9764
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
10010000000000000000110000101100 //Jump to constant address 1558
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010110110111000000000001 //Set r1 to 1463
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000001011111000010001 //Write value in r1 to address in rbp with offset -11
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000000001011111000101100 //Read at address in rbp with offset -11 to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000001100111100001111 //Compute rsp - 12 and write result to rsp
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100010000000000101 //Compute r0 OR 34 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000001100111000010001 //Write value in r1 to address in rbp with offset -12
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000000001100111000101100 //Read at address in rbp with offset -12 to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000001101111100001111 //Compute rsp - 13 and write result to rsp
11010000000000001101111001010001 //Write value in r5 to address in rbp with offset -13
11100000000000001101111000100001 //Read at address in rbp with offset -13 to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000000110100010000 //Jump to constant address 1672
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110100110000 //Jump to constant address 1688
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000000001101111000100001 //Read at address in rbp with offset -13 to r1
11100000000000001101111000100001 //Read at address in rbp with offset -13 to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
11010000000000001101111000010001 //Write value in r1 to address in rbp with offset -13
11100000000000001101111000100001 //Read at address in rbp with offset -13 to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
10010000000000000000110100000010 //Jump to constant address 1665
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000010000111100001111 //Compute rsp - 16 and write result to rsp
11010000000000001110111001010001 //Write value in r5 to address in rbp with offset -14
11010000000000001111111001000001 //Write value in r4 to address in rbp with offset -15
11100000000000001110111000100001 //Read at address in rbp with offset -14 to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
01110000000000000000000000001100 //Set r12 to 0
11010000000000010000111011000001 //Write value in r12 to address in rbp with offset -16
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000010000111000100010 //Read at address in rbp with offset -16 to r2
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
11100000000000001111111000101101 //Read at address in rbp with offset -15 to r13
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000000110101011110 //Jump to constant address 1711
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110110000110 //Jump to constant address 1731
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000000001110111000100001 //Read at address in rbp with offset -14 to r1
11100000000000001110111000100001 //Read at address in rbp with offset -14 to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
11010000000000001110111000010001 //Write value in r1 to address in rbp with offset -14
11100000000000001110111000100001 //Read at address in rbp with offset -14 to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
11100000000000010000111000100001 //Read at address in rbp with offset -16 to r1
11100000000000010000111000100001 //Read at address in rbp with offset -16 to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
11010000000000010000111000010001 //Write value in r1 to address in rbp with offset -16
10010000000000000000110101010000 //Jump to constant address 1704
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011011111100001111 //Compute rsp - 27 and write result to rsp
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010110110111000000000001 //Set r1 to 1463
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000011011111000010001 //Write value in r1 to address in rbp with offset -27
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010110001101000000000001 //Set r1 to 1421
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000011010111000000100 //Compute rbp - 26 and write result to r4
11100000000000011011111000101100 //Read at address in rbp with offset -27 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010010100111000000000001 //Set r1 to 1191
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000011010111000000101 //Compute rbp - 26 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010011000100000000000001 //Set r1 to 1220
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001000101110000000000101 //Set r5 to 558
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011101111100001111 //Compute rsp - 29 and write result to rsp
11010000000000011100111001010001 //Write value in r5 to address in rbp with offset -28
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010101000000000101 //Compute r0 OR 21 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010110110111000000000001 //Set r1 to 1463
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011100111000101100 //Read at address in rbp with offset -28 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010110110111000000000001 //Set r1 to 1463
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000011101111000010001 //Write value in r1 to address in rbp with offset -29
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010110110111000000000001 //Set r1 to 1463
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000000011101111000101100 //Read at address in rbp with offset -29 to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011010111100001111 //Compute rsp - 26 and write result to rsp
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010110110111000000000001 //Set r1 to 1463
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000111100000000000101 //Compute r0 OR 60 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000101000000000101 //Compute r0 OR 5 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010110110111000000000001 //Set r1 to 1463
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011100001101000000000001 //Set r1 to 1805
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000101000000000101 //Compute r0 OR 5 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000001010001000000001101 //Set r13 to 81
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000111101000100 //Jump to constant address 1954
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111101011010 //Jump to constant address 1965
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10010000000000000000111101101000 //Jump to constant address 1972
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011010111100001111 //Compute rsp - 26 and write result to rsp
01110000011000010001000000000001 //Set r1 to 1553
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010101000000001101 //Set r13 to 21
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000000111110010100 //Jump to constant address 1994
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111110011100 //Jump to constant address 1998
10010000000000000000111101111100 //Jump to constant address 1982
01110000011100001101000000000001 //Set r1 to 1805
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000111000000000101 //Compute r0 OR 7 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000001010001000000001101 //Set r13 to 81
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000000111110110110 //Jump to constant address 2011
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111111001010 //Jump to constant address 2021
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000011100001101000000000001 //Set r1 to 1805
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000110000000000101 //Compute r0 OR 6 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000001010001000000001101 //Set r13 to 81
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000000111111100100 //Jump to constant address 2034
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111111111000 //Jump to constant address 2044
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //NOP to quickfix double labels
01110000011000010001000000000001 //Set r1 to 1553
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010101000000001101 //Set r13 to 21
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001000000010010 //Jump to constant address 2057
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001000000011010 //Jump to constant address 2061
10010000000000000000111111111010 //Jump to constant address 2045
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000110000000000000101 //Compute r0 OR 48 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000010001000000000001 //Set r1 to 1553
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001000001011000 //Jump to constant address 2092
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001000001101100 //Jump to constant address 2102
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000110001000000000101 //Compute r0 OR 49 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000010001000000000001 //Set r1 to 1553
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001000010101010 //Jump to constant address 2133
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001000010111110 //Jump to constant address 2143
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011110111100001111 //Compute rsp - 30 and write result to rsp
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001100000000000101 //Compute r0 OR 12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001101000000000000101 //Compute r0 OR 104 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000011110111000010001 //Write value in r1 to address in rbp with offset -30
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001010100000001000000100000001 //Compute r1 << 8 and write result to r1
11100000000000011110111000101100 //Read at address in rbp with offset -30 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000011110111000010001 //Write value in r1 to address in rbp with offset -30
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001010100000010000000100000001 //Compute r1 << 16 and write result to r1
11100000000000011110111000101100 //Read at address in rbp with offset -30 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000011110111000010001 //Write value in r1 to address in rbp with offset -30
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001010100000011000000100000001 //Compute r1 << 24 and write result to r1
11100000000000011110111000101100 //Read at address in rbp with offset -30 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000011110111000010001 //Write value in r1 to address in rbp with offset -30
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000000011110111000101100 //Read at address in rbp with offset -30 to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011111111100001111 //Compute rsp - 31 and write result to rsp
11010000000000011111111001010001 //Write value in r5 to address in rbp with offset -31
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000111001000000000101 //Compute r0 OR 57 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011111111000101100 //Read at address in rbp with offset -31 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011111111000100101 //Read at address in rbp with offset -31 to r5
00001011000000001000010100000101 //Compute r5 >> 8 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011111111000100101 //Read at address in rbp with offset -31 to r5
00001011000000010000010100000101 //Compute r5 >> 16 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011111111000100101 //Read at address in rbp with offset -31 to r5
00001011000000011000010100000101 //Compute r5 >> 24 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000010001000000000001 //Set r1 to 1553
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001000111110010 //Jump to constant address 2297
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001000000110 //Jump to constant address 2307
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000100101111100001111 //Compute rsp - 37 and write result to rsp
11010000000000100000111001010001 //Write value in r5 to address in rbp with offset -32
11010000000000100100111001000001 //Write value in r4 to address in rbp with offset -36
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000100100111000101100 //Read at address in rbp with offset -36 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001001000101100 //Jump to constant address 2326
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001001000000 //Jump to constant address 2336
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000111010000000000101 //Compute r0 OR 58 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100100111000101100 //Read at address in rbp with offset -36 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100100111000100101 //Read at address in rbp with offset -36 to r5
00001011000000001000010100000101 //Compute r5 >> 8 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000010001000000000001 //Set r1 to 1553
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000011101000000001101 //Set r13 to 29
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001001010011110 //Jump to constant address 2383
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001010110010 //Jump to constant address 2393
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000000000000001100 //Set r12 to 0
11010000000000100001111011000001 //Write value in r12 to address in rbp with offset -33
01110000000000000000000000001100 //Set r12 to 0
11010000000000100010111011000001 //Write value in r12 to address in rbp with offset -34
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000100010111000101100 //Read at address in rbp with offset -34 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001001011000110 //Jump to constant address 2403
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001111000100 //Jump to constant address 2530
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100111000000000101 //Compute r0 OR 39 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000100011111000010001 //Write value in r1 to address in rbp with offset -35
01110000000000000000000000001100 //Set r12 to 0
11010000000000100101111011000001 //Write value in r12 to address in rbp with offset -37
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000100101111000100010 //Read at address in rbp with offset -37 to r2
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
11100000000000100011111000101101 //Read at address in rbp with offset -35 to r13
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000001001100001000 //Jump to constant address 2436
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001100111000 //Jump to constant address 2460
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000000100001111000100010 //Read at address in rbp with offset -33 to r2
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000001011000010 //Compute r2 * r12 and write result to r2
11100000000000100000111000101100 //Read at address in rbp with offset -32 to r12
00000001100000000000001011000010 //Compute r2 + r12 and write result to r2
11010000000000000000001000010000 //Write value in r1 to address in r2 with offset 0
11100000000000100001111000100001 //Read at address in rbp with offset -33 to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
11010000000000100001111000010001 //Write value in r1 to address in rbp with offset -33
11100000000000100101111000100001 //Read at address in rbp with offset -37 to r1
11100000000000100101111000100001 //Read at address in rbp with offset -37 to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
11010000000000100101111000010001 //Write value in r1 to address in rbp with offset -37
10010000000000000001001011111010 //Jump to constant address 2429
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000111011000000000101 //Compute r0 OR 59 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000010001000000000001 //Set r1 to 1553
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001001110000010 //Jump to constant address 2497
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001110001110 //Jump to constant address 2503
01110000000000000001000000001100 //Set r12 to 1
11010000000000100010111011000001 //Write value in r12 to address in rbp with offset -34
10010000000000000001001111000010 //Jump to constant address 2529
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000011101000000001101 //Set r13 to 29
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001001110011010 //Jump to constant address 2509
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001110100010 //Jump to constant address 2513
10010000000000000001001111000000 //Jump to constant address 2528
01110000010011000100000000000001 //Set r1 to 1220
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001010010111000000000101 //Set r5 to 663
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //NOP to quickfix double labels
10010000000000000001001010111010 //Jump to constant address 2397
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000101010111100001111 //Compute rsp - 42 and write result to rsp
11010000000000100110111001010001 //Write value in r5 to address in rbp with offset -38
11010000000000101001111001000001 //Write value in r4 to address in rbp with offset -41
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000101001111000101100 //Read at address in rbp with offset -41 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001001111101010 //Jump to constant address 2549
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001111111110 //Jump to constant address 2559
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000111100000000000101 //Compute r0 OR 60 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000101001111000101100 //Read at address in rbp with offset -41 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000101001111000100101 //Read at address in rbp with offset -41 to r5
00001011000000001000010100000101 //Compute r5 >> 8 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000010001000000000001 //Set r1 to 1553
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000011110000000001101 //Set r13 to 30
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001010001011100 //Jump to constant address 2606
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001010001110000 //Jump to constant address 2616
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000000000000001100 //Set r12 to 0
11010000000000100111111011000001 //Write value in r12 to address in rbp with offset -39
01110000000000000000000000001100 //Set r12 to 0
11010000000000101000111011000001 //Write value in r12 to address in rbp with offset -40
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000101000111000101100 //Read at address in rbp with offset -40 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001010010000100 //Jump to constant address 2626
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001010101100010 //Jump to constant address 2737
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000101101000000000101 //Compute r0 OR 45 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000000101010111000010001 //Write value in r1 to address in rbp with offset -42
01110000011010011110000000000001 //Set r1 to 1694
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100111111000100101 //Read at address in rbp with offset -39 to r5
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000010111000101 //Compute r5 * r12 and write result to r5
11100000000000100110111000101100 //Read at address in rbp with offset -38 to r12
00000001100000000000010111000101 //Compute r5 + r12 and write result to r5
11100000000000101010111000101100 //Read at address in rbp with offset -42 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000000100111111000100001 //Read at address in rbp with offset -39 to r1
11100000000000101010111000101100 //Read at address in rbp with offset -42 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000100111111000010001 //Write value in r1 to address in rbp with offset -39
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000111101000000000101 //Compute r0 OR 61 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000010001000000000001 //Set r1 to 1553
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001010100100000 //Jump to constant address 2704
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001010100101100 //Jump to constant address 2710
01110000000000000001000000001100 //Set r12 to 1
11010000000000101000111011000001 //Write value in r12 to address in rbp with offset -40
10010000000000000001010101100000 //Jump to constant address 2736
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000011110000000001101 //Set r13 to 30
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001010100111000 //Jump to constant address 2716
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001010101000000 //Jump to constant address 2720
10010000000000000001010101011110 //Jump to constant address 2735
01110000010011000100000000000001 //Set r1 to 1220
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001100100100000000000101 //Set r5 to 804
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //NOP to quickfix double labels
10010000000000000001010001111000 //Jump to constant address 2620
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011010111100001111 //Compute rsp - 26 and write result to rsp
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000110010000000000101 //Compute r0 OR 50 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000010001000000000001 //Set r1 to 1553
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001010110110110 //Jump to constant address 2779
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
01110000000000000000000000000011 //Set r3 to 0
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01100000000000000010000011000000 //If r0 == r12, then jump to offset 2
10010000000000000001010111010010 //Jump to constant address 2793
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000001000001000000001101 //Set r13 to 65
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001010111001010 //Jump to constant address 2789
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01100000000000000010000011000000 //If r0 == r12, then jump to offset 2
10010000000000000001010111010010 //Jump to constant address 2793
10010000000000000001010111010100 //Jump to constant address 2794
01110000000000000001000000000011 //Set r3 to 1
00001010000000000000001100001100 //Compute r3 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001010111101010 //Jump to constant address 2805
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10010000000000000001010111111000 //Jump to constant address 2812
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011010111100001111 //Compute rsp - 26 and write result to rsp
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000110101000000000101 //Compute r0 OR 53 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000010001000000000001 //Set r1 to 1553
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001011001001010 //Jump to constant address 2853
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001011001100000 //Jump to constant address 2864
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10010000000000000001011001101110 //Jump to constant address 2871
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011010111100001111 //Compute rsp - 26 and write result to rsp
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000110110000000000101 //Compute r0 OR 54 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000010001000000000001 //Set r1 to 1553
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001011011001110 //Jump to constant address 2919
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001011011100100 //Jump to constant address 2930
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10010000000000000001011011110010 //Jump to constant address 2937
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011010111100001111 //Compute rsp - 26 and write result to rsp
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001000000000000000101 //Compute r0 OR 64 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000010001000000000001 //Set r1 to 1553
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001011101000100 //Jump to constant address 2978
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001011101011010 //Jump to constant address 2989
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10010000000000000001011101101000 //Jump to constant address 2996
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011010111100001111 //Compute rsp - 26 and write result to rsp
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000110100000000000101 //Compute r0 OR 52 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000010001000000000001 //Set r1 to 1553
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001011110111010 //Jump to constant address 3037
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001011111001110 //Jump to constant address 3047
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000101010111000000000000001 //Set r1 to 2744
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001011111100100 //Jump to constant address 3058
01110000000000000000000000000010 //Set r2 to 0
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001011111111000 //Jump to constant address 3068
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000101100111101000000000001 //Set r1 to 2877
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100000001110 //Jump to constant address 3079
01110000000000000000000000000010 //Set r2 to 0
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100000100010 //Jump to constant address 3089
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000111101111100001111 //Compute rsp - 61 and write result to rsp
11010000000000111011111001010001 //Write value in r5 to address in rbp with offset -59
01110000000000000001000000001100 //Set r12 to 1
11010000000000111100111011000001 //Write value in r12 to address in rbp with offset -60
01110000000000101111000000001100 //Set r12 to 47
11010000000000111010111011000001 //Write value in r12 to address in rbp with offset -58
01110000000000000001000000001100 //Set r12 to 1
11010000000000111101111011000001 //Write value in r12 to address in rbp with offset -61
11100000000000111100111000100001 //Read at address in rbp with offset -60 to r1
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000000111011111000101100 //Read at address in rbp with offset -59 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001100001011110 //Jump to constant address 3119
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100101010110 //Jump to constant address 3243
11100000000000111100111000100001 //Read at address in rbp with offset -60 to r1
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000000111011111000101100 //Read at address in rbp with offset -59 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000101111000000001101 //Set r13 to 47
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001100001111100 //Jump to constant address 3134
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100100000110 //Jump to constant address 3203
11100000000000111101111000100001 //Read at address in rbp with offset -61 to r1
00000000000000000000000011101101 //Compute r0 OR rbp and write result to r13
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000110000011100 //Compute r12 * r1 and write result to r12
00000001100000000000110111001101 //Compute r13 + r12 and write result to r13
01110000000000111010000000001100 //Set r12 to 58
00000010000000000000110111001101 //Compute r13 - r12 and write result to r13
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000110111000000 //Write value in r12 to address in r13 with offset 0
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000101111000000000101 //Compute r0 OR 47 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001111010000000000001 //Set r1 to 1658
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000111010111000000101 //Compute rbp - 58 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000000111101111011000001 //Write value in r12 to address in rbp with offset -61
01110000101010111000000000000001 //Set r1 to 2744
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100011110000 //Jump to constant address 3192
01110000000000000000000000000010 //Set r2 to 0
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100100000100 //Jump to constant address 3202
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10010000000000000001100101001100 //Jump to constant address 3238
11100000000000111100111000100001 //Read at address in rbp with offset -60 to r1
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000000111011111000101100 //Read at address in rbp with offset -59 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
11100000000000111101111000100001 //Read at address in rbp with offset -61 to r1
00000000000000000000000011101101 //Compute r0 OR rbp and write result to r13
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000110000011100 //Compute r12 * r1 and write result to r12
00000001100000000000110111001101 //Compute r13 + r12 and write result to r13
01110000000000111010000000001100 //Set r12 to 58
00000010000000000000110111001101 //Compute r13 - r12 and write result to r13
11010000000000000000110100100000 //Write value in r2 to address in r13 with offset 0
11100000000000111101111000100001 //Read at address in rbp with offset -61 to r1
11100000000000111101111000100001 //Read at address in rbp with offset -61 to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
11010000000000111101111000010001 //Write value in r1 to address in rbp with offset -61
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000111101111000101100 //Read at address in rbp with offset -61 to r12
01110000000000001101000000001101 //Set r13 to 13
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000001100100110110 //Jump to constant address 3227
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100101001010 //Jump to constant address 3237
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //NOP to quickfix double labels
11100000000000111100111000100001 //Read at address in rbp with offset -60 to r1
11100000000000111100111000100001 //Read at address in rbp with offset -60 to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
11010000000000111100111000010001 //Write value in r1 to address in rbp with offset -60
10010000000000000001100001000110 //Jump to constant address 3107
11100000000000111101111000100001 //Read at address in rbp with offset -61 to r1
00000000000000000000000011101101 //Compute r0 OR rbp and write result to r13
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000110000011100 //Compute r12 * r1 and write result to r12
00000001100000000000110111001101 //Compute r13 + r12 and write result to r13
01110000000000111010000000001100 //Set r12 to 58
00000010000000000000110111001101 //Compute r13 - r12 and write result to r13
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000110111000000 //Write value in r12 to address in r13 with offset 0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000000111101111000101100 //Read at address in rbp with offset -61 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001100101110100 //Jump to constant address 3258
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100110001000 //Jump to constant address 3268
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000010111010111000000000001 //Set r1 to 1495
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000101111000000000101 //Compute r0 OR 47 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011001111010000000000001 //Set r1 to 1658
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000111010111000000101 //Compute rbp - 58 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011000000011000000000001 //Set r1 to 1539
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010111101101000000000001 //Set r1 to 1517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000111010111100001111 //Compute rsp - 58 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 9776
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01111111110111111111000000000010 //Set r2 to 0b1111110111111111
00000000100000000000000100100001 //Compute r1 AND r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000111010111100001111 //Compute rsp - 58 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 9776
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01110000001000000000000000000010 //Set r2 to 0b1000000000
00000000000000000000000100100001 //Compute r1 OR r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000111010111100001111 //Compute rsp - 58 and write result to rsp
01110010011100110100000000000001 //Set r1 to 10036
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001000010111100001111 //Compute rsp - 66 and write result to rsp
11010000000001000000111001010001 //Write value in r5 to address in rbp with offset -64
11010000000001000001111001000001 //Write value in r4 to address in rbp with offset -65
11010000000000111110111000110001 //Write value in r3 to address in rbp with offset -62
11010000000000111111111000100001 //Write value in r2 to address in rbp with offset -63
01110000110011101100000000000001 //Set r1 to 3308
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001000000111000100101 //Read at address in rbp with offset -64 to r5
00001011000000001000010100000101 //Compute r5 >> 8 and write result to r5
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001000000111000101100 //Read at address in rbp with offset -64 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001000001111000101100 //Read at address in rbp with offset -65 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000001000010111011000001 //Write value in r12 to address in rbp with offset -66
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001000010111000100010 //Read at address in rbp with offset -66 to r2
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
11100000000000111111111000101101 //Read at address in rbp with offset -63 to r13
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000001101010101010 //Jump to constant address 3413
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001101011010010 //Jump to constant address 3433
01110000110100011000000000000010 //Set r2 to 3352
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
11100000000001000010111000100001 //Read at address in rbp with offset -66 to r1
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000000111110111000101100 //Read at address in rbp with offset -62 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000100000 //Jump to reg r2 with offset 0
11100000000001000010111000100001 //Read at address in rbp with offset -66 to r1
11100000000001000010111000100001 //Read at address in rbp with offset -66 to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
11010000000001000010111000010001 //Write value in r1 to address in rbp with offset -66
10010000000000000001101010011100 //Jump to constant address 3406
01110000110100000010000000000001 //Set r1 to 3330
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001000101111100001111 //Compute rsp - 69 and write result to rsp
11010000000001000011111001010001 //Write value in r5 to address in rbp with offset -67
11010000000001000100111001000001 //Write value in r4 to address in rbp with offset -68
11010000000001000101111000110001 //Write value in r3 to address in rbp with offset -69
01110000110011101100000000000001 //Set r1 to 3308
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001000011111000100101 //Read at address in rbp with offset -67 to r5
00001011000000001000010100000101 //Compute r5 >> 8 and write result to r5
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001000011111000101100 //Read at address in rbp with offset -67 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001000100111000101100 //Read at address in rbp with offset -68 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001000101111000101100 //Read at address in rbp with offset -69 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100000010000000000001 //Set r1 to 3330
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001000101111000101100 //Read at address in rbp with offset -69 to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001001000111100001111 //Compute rsp - 72 and write result to rsp
11010000000001000110111001010001 //Write value in r5 to address in rbp with offset -70
11010000000001000111111001000001 //Write value in r4 to address in rbp with offset -71
11010000000001001000111000110001 //Write value in r3 to address in rbp with offset -72
01110000110011101100000000000001 //Set r1 to 3308
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001000110111000100101 //Read at address in rbp with offset -70 to r5
00001011000000001000010100000101 //Compute r5 >> 8 and write result to r5
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001000110111000101100 //Read at address in rbp with offset -70 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001000111111000101100 //Read at address in rbp with offset -71 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001001000111000100101 //Read at address in rbp with offset -72 to r5
00001011000000001000010100000101 //Compute r5 >> 8 and write result to r5
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001001000111000101100 //Read at address in rbp with offset -72 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100000010000000000001 //Set r1 to 3330
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001001101111100001111 //Compute rsp - 77 and write result to rsp
11010000000001001011111001010001 //Write value in r5 to address in rbp with offset -75
11010000000001001100111001000001 //Write value in r4 to address in rbp with offset -76
11010000000001001001111000110001 //Write value in r3 to address in rbp with offset -73
11010000000001001010111000100001 //Write value in r2 to address in rbp with offset -74
01110000110011101100000000000001 //Set r1 to 3308
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001001011111000100101 //Read at address in rbp with offset -75 to r5
00001011000000001000010100000101 //Compute r5 >> 8 and write result to r5
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001001011111000101100 //Read at address in rbp with offset -75 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001001100111000101100 //Read at address in rbp with offset -76 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000001001101111011000001 //Write value in r12 to address in rbp with offset -77
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001001101111000100010 //Read at address in rbp with offset -77 to r2
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
11100000000001001010111000101101 //Read at address in rbp with offset -74 to r13
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000001110001000000 //Jump to constant address 3616
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001110001101010 //Jump to constant address 3637
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001001101111000100010 //Read at address in rbp with offset -77 to r2
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000001011000010 //Compute r2 * r12 and write result to r2
11100000000001001001111000101100 //Read at address in rbp with offset -73 to r12
00000001100000000000001011000010 //Compute r2 + r12 and write result to r2
11010000000000000000001000010000 //Write value in r1 to address in r2 with offset 0
11100000000001001101111000100001 //Read at address in rbp with offset -77 to r1
11100000000001001101111000100001 //Read at address in rbp with offset -77 to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
11010000000001001101111000010001 //Write value in r1 to address in rbp with offset -77
10010000000000000001110000110010 //Jump to constant address 3609
01110000110100000010000000000001 //Set r1 to 3330
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001010000111100001111 //Compute rsp - 80 and write result to rsp
11010000000001001110111001010001 //Write value in r5 to address in rbp with offset -78
11010000000001001111111001000001 //Write value in r4 to address in rbp with offset -79
01110000110011101100000000000001 //Set r1 to 3308
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001001110111000100101 //Read at address in rbp with offset -78 to r5
00001011000000001000010100000101 //Compute r5 >> 8 and write result to r5
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001001110111000101100 //Read at address in rbp with offset -78 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001001111111000101100 //Read at address in rbp with offset -79 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001010000111000010001 //Write value in r1 to address in rbp with offset -80
01110000110100000010000000000001 //Set r1 to 3330
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001010000111000101100 //Read at address in rbp with offset -80 to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001010011111100001111 //Compute rsp - 83 and write result to rsp
11010000000001010001111001010001 //Write value in r5 to address in rbp with offset -81
11010000000001010010111001000001 //Write value in r4 to address in rbp with offset -82
01110000110011101100000000000001 //Set r1 to 3308
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001010001111000100101 //Read at address in rbp with offset -81 to r5
00001011000000001000010100000101 //Compute r5 >> 8 and write result to r5
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001010001111000101100 //Read at address in rbp with offset -81 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001010010111000101100 //Read at address in rbp with offset -82 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001010100000001000000100000001 //Compute r1 << 8 and write result to r1
11010000000001010011111000010001 //Write value in r1 to address in rbp with offset -83
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001010011111000101100 //Read at address in rbp with offset -83 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000001010011111000010001 //Write value in r1 to address in rbp with offset -83
01110000110100000010000000000001 //Set r1 to 3330
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001010011111000101100 //Read at address in rbp with offset -83 to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001010100111100001111 //Compute rsp - 84 and write result to rsp
11010000000001010100111001010001 //Write value in r5 to address in rbp with offset -84
01110000110011101100000000000001 //Set r1 to 3308
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001100000000000101 //Compute r0 OR 12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001010100111000101100 //Read at address in rbp with offset -84 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100000010000000000001 //Set r1 to 3330
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000111001000001000000000001 //Set r1 to 3649
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00001000000000001000000000000100 //Compute r0 OR 8 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001110111110100 //Jump to constant address 3834
10010000000000000001110111011100 //Jump to constant address 3822
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001010110111100001111 //Compute rsp - 86 and write result to rsp
11010000000001010101111001010001 //Write value in r5 to address in rbp with offset -85
11010000000001010110111001000001 //Write value in r4 to address in rbp with offset -86
01110000110011101100000000000001 //Set r1 to 3308
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001010101111000101100 //Read at address in rbp with offset -85 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001100000000000101 //Compute r0 OR 12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001010110111000101100 //Read at address in rbp with offset -86 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100000010000000000001 //Set r1 to 3330
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000111010111100001111 //Compute rsp - 58 and write result to rsp
01110000111001000001000000000001 //Set r1 to 3649
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001000000000000100 //Compute r0 OR 8 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001011000111100001111 //Compute rsp - 88 and write result to rsp
11010000000001010111111001010001 //Write value in r5 to address in rbp with offset -87
11010000000001011000111001000001 //Write value in r4 to address in rbp with offset -88
01110000110011101100000000000001 //Set r1 to 3308
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001010111111000101100 //Read at address in rbp with offset -87 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001100000000000101 //Compute r0 OR 12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001011000111000100101 //Read at address in rbp with offset -88 to r5
00001011000000001000010100000101 //Compute r5 >> 8 and write result to r5
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100011000000000000001 //Set r1 to 3352
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001011000111000101100 //Read at address in rbp with offset -88 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100000010000000000001 //Set r1 to 3330
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000111010111100001111 //Compute rsp - 58 and write result to rsp
01110000111001111011000000000001 //Set r1 to 3707
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001000000000000100 //Compute r0 OR 8 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001011111111100001111 //Compute rsp - 95 and write result to rsp
11010000000001011001111001010001 //Write value in r5 to address in rbp with offset -89
11010000000001011010111001000001 //Write value in r4 to address in rbp with offset -90
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001011010111000101100 //Read at address in rbp with offset -90 to r12
01110000000000000000000000001101 //Set r13 to 0
01000000000000000010110011010000 //If r12 > r13, then jump to offset 2
10010000000000000001111101000100 //Jump to constant address 4002
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001111101011000 //Jump to constant address 4012
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000000000000001100 //Set r12 to 0
11010000000001011011111011000001 //Write value in r12 to address in rbp with offset -91
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001011011111000100010 //Read at address in rbp with offset -91 to r2
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
11100000000001011010111000101101 //Read at address in rbp with offset -90 to r13
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001111101101010 //Jump to constant address 4021
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010000010010110 //Jump to constant address 4171
01110000111100110110000000000001 //Set r1 to 3894
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000011000000000101 //Compute r0 OR 3 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001111110001010 //Jump to constant address 4037
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001111110011110 //Jump to constant address 4047
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
11100000000001011010111000100001 //Read at address in rbp with offset -90 to r1
11100000000001011011111000101100 //Read at address in rbp with offset -91 to r12
00000010000000000000000111000001 //Compute r1 - r12 and write result to r1
11010000000001011100111000010001 //Write value in r1 to address in rbp with offset -92
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001011100111000101100 //Read at address in rbp with offset -92 to r12
01110000001000000000000000001101 //Set r13 to 512
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000001111110110010 //Jump to constant address 4057
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001111110111100 //Jump to constant address 4062
01110000001000000000000000001100 //Set r12 to 512
11010000000001011100111011000001 //Write value in r12 to address in rbp with offset -92
01110000111110000101000000000001 //Set r1 to 3973
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100000000000000101 //Compute r0 OR 32 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001011101111000010001 //Write value in r1 to address in rbp with offset -93
01110000000000000000000000001100 //Set r12 to 0
11010000000001011110111011000001 //Write value in r12 to address in rbp with offset -94
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001011101111000100010 //Read at address in rbp with offset -93 to r2
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
11100000000001011100111000101101 //Read at address in rbp with offset -92 to r13
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000001111111011110 //Jump to constant address 4079
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010000000111010 //Jump to constant address 4125
11100000000001011110111000100001 //Read at address in rbp with offset -94 to r1
11100000000001011110111000100001 //Read at address in rbp with offset -94 to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
11010000000001011110111000010001 //Write value in r1 to address in rbp with offset -94
01110000010110110111000000000001 //Set r1 to 1463
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000111110000101000000000001 //Set r1 to 3973
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100000000000000101 //Compute r0 OR 32 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001011101111000010001 //Write value in r1 to address in rbp with offset -93
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001011110111000101100 //Read at address in rbp with offset -94 to r12
01110000001111101000000000001101 //Set r13 to 1000
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000010000000010110 //Jump to constant address 4107
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010000000111000 //Jump to constant address 4124
01110000111011000000000000000001 //Set r1 to 3776
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001000000000000101 //Compute r0 OR 8 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10010000000000000001111111010000 //Jump to constant address 4072
01110000111110000101000000000001 //Set r1 to 3973
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100100000000000101 //Compute r0 OR 36 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001011111111000010001 //Write value in r1 to address in rbp with offset -95
01110000110100100110000000000001 //Set r1 to 3366
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001011011111000100011 //Read at address in rbp with offset -91 to r3
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000001111000011 //Compute r3 * r12 and write result to r3
11100000000001011001111000101100 //Read at address in rbp with offset -89 to r12
00000001100000000000001111000011 //Compute r3 + r12 and write result to r3
11100000000001011111111000101100 //Read at address in rbp with offset -95 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00001000000000010100000000000100 //Compute r0 OR 20 and write result to r4
11100000000001011100111000101100 //Read at address in rbp with offset -92 to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001011111111000100100 //Read at address in rbp with offset -95 to r4
11100000000001011100111000101100 //Read at address in rbp with offset -92 to r12
00000001100000000000010011000100 //Compute r4 + r12 and write result to r4
01110000111101000111000000000001 //Set r1 to 3911
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100100000000000101 //Compute r0 OR 36 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000111011000000000000000001 //Set r1 to 3776
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100000000000000101 //Compute r0 OR 32 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001011011111000100001 //Read at address in rbp with offset -91 to r1
11100000000001011100111000101100 //Read at address in rbp with offset -92 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000001011011111000010001 //Write value in r1 to address in rbp with offset -91
10010000000000000001111101011100 //Jump to constant address 4014
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001100010111100001111 //Compute rsp - 98 and write result to rsp
11010000000001100000111001010001 //Write value in r5 to address in rbp with offset -96
01110000100010110101000000000001 //Set r1 to 2229
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010000011000110 //Jump to constant address 4195
01110000000000000000000000000010 //Set r2 to 0
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010000011011100 //Jump to constant address 4206
01110000010011000100000000000001 //Set r1 to 1220
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010000011000000000000101 //Set r5 to 1048
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000001100001111011000001 //Write value in r12 to address in rbp with offset -97
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001100001111000100010 //Read at address in rbp with offset -97 to r2
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
11100000000001100000111000101101 //Read at address in rbp with offset -96 to r13
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000010000011101110 //Jump to constant address 4215
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010000110000010 //Jump to constant address 4289
11100000000001100000111000100001 //Read at address in rbp with offset -96 to r1
11100000000001100001111000101100 //Read at address in rbp with offset -97 to r12
00000010000000000000000111000001 //Compute r1 - r12 and write result to r1
11010000000001100010111000010001 //Write value in r1 to address in rbp with offset -98
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001100010111000101100 //Read at address in rbp with offset -98 to r12
01110000001000000000000000001101 //Set r13 to 512
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000010000100001000 //Jump to constant address 4228
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010000100010010 //Jump to constant address 4233
01110000001000000000000000001100 //Set r12 to 512
11010000000001100010111011000001 //Write value in r12 to address in rbp with offset -98
01110000100100001010000000000001 //Set r1 to 2314
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000010010000000000101 //Set r5 to 18
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
11100000000001100010111000101100 //Read at address in rbp with offset -98 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010000100110000 //Jump to constant address 4248
01110000000000000000000000000010 //Set r2 to 0
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010000101000110 //Jump to constant address 4259
01110000010011000100000000000001 //Set r1 to 1220
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001010001100000000000101 //Set r5 to 652
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000111110010110000000000001 //Set r1 to 3990
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000010010000000000101 //Set r5 to 18
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
11100000000001100010111000101100 //Read at address in rbp with offset -98 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010000101100100 //Jump to constant address 4274
01110000000000000000000000000010 //Set r2 to 0
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010000101111000 //Jump to constant address 4284
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
11100000000001100001111000100001 //Read at address in rbp with offset -97 to r1
11100000000001100010111000101100 //Read at address in rbp with offset -98 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000001100001111000010001 //Write value in r1 to address in rbp with offset -97
10010000000000000010000011100000 //Jump to constant address 4208
01110000101100111101000000000001 //Set r1 to 2877
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001100100111100001111 //Compute rsp - 100 and write result to rsp
11010000000001100011111001010001 //Write value in r5 to address in rbp with offset -99
11010000000001100100111001000001 //Write value in r4 to address in rbp with offset -100
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001100100111000101100 //Read at address in rbp with offset -100 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010000110110100 //Jump to constant address 4314
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010000111001000 //Jump to constant address 4324
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001100100111000101100 //Read at address in rbp with offset -100 to r12
01110000010000000000000000001101 //Set r13 to 1024
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000010000111010100 //Jump to constant address 4330
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010000111011110 //Jump to constant address 4335
01110000001111111110000000001100 //Set r12 to 1022
11010000000001100100111011000001 //Write value in r12 to address in rbp with offset -100
01110000111110000101000000000001 //Set r1 to 3973
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000101000000000000101 //Compute r0 OR 40 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000010101 //Compute r0 OR r1 and write result to r5
01110000110111110001000000000001 //Set r1 to 3569
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000011000000000000100 //Compute r0 OR 24 and write result to r4
11100000000001100011111000101100 //Read at address in rbp with offset -99 to r12
00000000000000000000000011000011 //Compute r0 OR r12 and write result to r3
11100000000001100100111000101100 //Read at address in rbp with offset -100 to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001100100111000100001 //Read at address in rbp with offset -100 to r1
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
11100000000001100011111000101100 //Read at address in rbp with offset -99 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001100101111100001111 //Compute rsp - 101 and write result to rsp
11010000000001100101111001000001 //Write value in r4 to address in rbp with offset -101
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001100101111000101100 //Read at address in rbp with offset -101 to r12
01110000000000000000000000001101 //Set r13 to 0
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000010001000110110 //Jump to constant address 4379
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010001001101100 //Jump to constant address 4406
01110000111110000101000000000001 //Set r1 to 3973
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000101000000000000101 //Compute r0 OR 40 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11100000000001100101111000101100 //Read at address in rbp with offset -101 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
00000000000000000000000000010100 //Compute r0 OR r1 and write result to r4
01110000111101000111000000000001 //Set r1 to 3911
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000101000000000000101 //Compute r0 OR 40 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000111011000000000000000001 //Set r1 to 3776
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001000000000000000101 //Compute r0 OR 64 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000111010111100001111 //Compute rsp - 58 and write result to rsp
01110000001110010111000000000101 //Set r5 to 919
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
01110000111110010110000000000001 //Set r1 to 3990
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000010000000000000000100 //Compute r0 OR 128 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000111010111100001111 //Compute rsp - 58 and write result to rsp
00000000000000000000000001011000 //Compute r0 OR r5 and write result to r8
00000000000000000000000001001001 //Compute r0 OR r4 and write result to r9
01110000000000000000000000000101 //Set r5 to 0
01110000000000000000000000000100 //Set r4 to 0
01110000000000000000000000000010 //Set r2 to 0
01110000000000000000000000000011 //Set r3 to 0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010001010111110 //Jump to constant address 4447
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010001101100110 //Jump to constant address 4531
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010001011010000 //Jump to constant address 4456
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
01110000000000000001000000001010 //Set r10 to 1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010001011111000 //Jump to constant address 4476
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
00000000000000000000000010001100 //Compute r0 OR r8 and write result to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
00001000000000000001000000001011 //Compute r0 OR 1 and write result to r11
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000100000000000001101 //Set r13 to 32
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010001011110000 //Jump to constant address 4472
00001000000000000000000000001011 //Compute r0 OR 0 and write result to r11
00001010000000000000101100001100 //Compute r11 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010001011111000 //Jump to constant address 4476
10010000000000000010001011111010 //Jump to constant address 4477
01110000000000000000000000001010 //Set r10 to 0
00001010000000000000101000001100 //Compute r10 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010001100000100 //Jump to constant address 4482
01110000000000000001000000000100 //Set r4 to 1
10010000000000000010001101011100 //Jump to constant address 4526
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010001100010000 //Jump to constant address 4488
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010001101011010 //Jump to constant address 4525
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
00000000000000000000000010001100 //Compute r0 OR r8 and write result to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
00001000000000000001000000001010 //Compute r0 OR 1 and write result to r10
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000100000000000001101 //Set r13 to 32
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010001100101110 //Jump to constant address 4503
00001000000000000000000000001010 //Compute r0 OR 0 and write result to r10
00001010000000000000101000001100 //Compute r10 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010001100111000 //Jump to constant address 4508
01110000000000000001000000000101 //Set r5 to 1
10010000000000000010001101011000 //Jump to constant address 4524
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
00000000000000000000000010001100 //Compute r0 OR r8 and write result to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100001010 //Read at address in r1 with offset 0 to r10
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
00000000000000000000000010011100 //Compute r0 OR r9 and write result to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11010000000000000000000110100000 //Write value in r10 to address in r1 with offset 0
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00000000000000000000000000010011 //Compute r0 OR r1 and write result to r3
00000000000000000000000000000000 //NOP to quickfix double labels
00000000000000000000000000000000 //NOP to quickfix double labels
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00000000000000000000000000010010 //Compute r0 OR r1 and write result to r2
10010000000000000010001010110010 //Jump to constant address 4441
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
00000011100000000000000111000001 //Compute r1 * r12 and write result to r1
00000000000000000000000010011100 //Compute r0 OR r9 and write result to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
00001001100000000001000100000001 //Compute r1 + 1 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001101000111100001111 //Compute rsp - 104 and write result to rsp
11010000000001100110111001010001 //Write value in r5 to address in rbp with offset -102
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001011100000000001000100000001 //Compute r1 * 1 and write result to r1
11100000000001100110111000101100 //Read at address in rbp with offset -102 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000101111000000001101 //Set r13 to 47
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010001110100100 //Jump to constant address 4562
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
01110000000000000001000000000011 //Set r3 to 1
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010001111001010 //Jump to constant address 4581
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00001011100000000001000100000001 //Compute r1 * 1 and write result to r1
11100000000001100110111000101100 //Read at address in rbp with offset -102 to r12
00000001100000000000000111000001 //Compute r1 + r12 and write result to r1
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
00001000000000000001000000000010 //Compute r0 OR 1 and write result to r2
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010001111000010 //Jump to constant address 4577
00001000000000000000000000000010 //Compute r0 OR 0 and write result to r2
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010001111001010 //Jump to constant address 4581
10010000000000000010001111001100 //Jump to constant address 4582
01110000000000000000000000000011 //Set r3 to 0
00001010000000000000001100001100 //Compute r3 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010001111111110 //Jump to constant address 4607
01110000001010110000000000000101 //Set r5 to 688
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
01110000111110010110000000000001 //Set r1 to 3990
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000110100000000000100 //Compute r0 OR 52 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000111011000000000000000001 //Set r1 to 3776
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001000000000000101 //Compute r0 OR 8 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010000111010 //Jump to constant address 4637
01110000010011000100000000000001 //Set r1 to 1220
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001100001101000000000101 //Set r5 to 781
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010011000100000000000001 //Set r1 to 1220
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00001011100000000001010100000101 //Compute r5 * 1 and write result to r5
11100000000001100110111000101100 //Read at address in rbp with offset -102 to r12
00000001100000000000010111000101 //Compute r5 + r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010011000100000000000001 //Set r1 to 1220
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001101100001000000000101 //Set r5 to 865
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000001100111111011000001 //Write value in r12 to address in rbp with offset -103
01110000110000011000000000000001 //Set r1 to 3096
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00001011100000000001010100000101 //Compute r5 * 1 and write result to r5
11100000000001100110111000101100 //Read at address in rbp with offset -102 to r12
00000001100000000000010111000101 //Compute r5 + r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010001011100 //Jump to constant address 4654
01110000000000000000000000000010 //Set r2 to 0
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010001100110 //Jump to constant address 4659
01110000000110010100000000001100 //Set r12 to 404
11010000000001100111111011000001 //Write value in r12 to address in rbp with offset -103
01110000000000000001000000000001 //Set r1 to 1
11100000000001100111111000101100 //Read at address in rbp with offset -103 to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010001110000 //Jump to constant address 4664
01110000000000000000000000000001 //Set r1 to 0
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010010011000 //Jump to constant address 4684
01110000101010111000000000000001 //Set r1 to 2744
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010010001100 //Jump to constant address 4678
01110000000000000000000000000010 //Set r2 to 0
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010010010110 //Jump to constant address 4683
01110000000110010100000000001100 //Set r12 to 404
11010000000001100111111011000001 //Write value in r12 to address in rbp with offset -103
00000000000000000000000000000000 //NOP to quickfix double labels
01110000000000000001000000000001 //Set r1 to 1
11100000000001100111111000101100 //Read at address in rbp with offset -103 to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010010100010 //Jump to constant address 4689
01110000000000000000000000000001 //Set r1 to 0
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010010110110 //Jump to constant address 4699
01110000100001100110000000000001 //Set r1 to 2150
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001101000111000010001 //Write value in r1 to address in rbp with offset -104
01110000000000000001000000000001 //Set r1 to 1
11100000000001100111111000101100 //Read at address in rbp with offset -103 to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010011000000 //Jump to constant address 4704
01110000000000000000000000000001 //Set r1 to 0
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010011011110 //Jump to constant address 4719
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000000001101000111000101100 //Read at address in rbp with offset -104 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010010011010010 //Jump to constant address 4713
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010011011100 //Jump to constant address 4718
01110000000110010100000000001100 //Set r12 to 404
11010000000001100111111011000001 //Write value in r12 to address in rbp with offset -103
00000000000000000000000000000000 //NOP to quickfix double labels
01110000000000000001000000000001 //Set r1 to 1
11100000000001100111111000101100 //Read at address in rbp with offset -103 to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010011101000 //Jump to constant address 4724
01110000000000000000000000000001 //Set r1 to 0
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010100001010 //Jump to constant address 4741
11100000000001101000111000100010 //Read at address in rbp with offset -104 to r2
00001001100000000001001000000010 //Compute r2 + 1 and write result to r2
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010010011111110 //Jump to constant address 4735
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010100001000 //Jump to constant address 4740
01110000000110010100000000001100 //Set r12 to 404
11010000000001100111111011000001 //Write value in r12 to address in rbp with offset -103
00000000000000000000000000000000 //NOP to quickfix double labels
11100000000001100111111000101100 //Read at address in rbp with offset -103 to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010101111100 //Jump to constant address 4798
01110000001001001001000000000101 //Set r5 to 585
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
01110000111110010110000000000001 //Set r1 to 3990
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001000010000000000100 //Compute r0 OR 66 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110000011000000000000001 //Set r1 to 3096
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001011100101000000000101 //Set r5 to 741
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000101010111000000000000001 //Set r1 to 2744
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010101001000 //Jump to constant address 4772
01110000000000000000000000000010 //Set r2 to 0
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010101011100 //Jump to constant address 4782
01110001000100111100000000000001 //Set r1 to 4412
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000010010101111010 //Jump to constant address 4797
01110000100001100110000000000001 //Set r1 to 2150
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000000001101000111000010001 //Write value in r1 to address in rbp with offset -104
01110001000001010010000000000001 //Set r1 to 4178
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001101000111000101100 //Read at address in rbp with offset -104 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000010010110011110 //Jump to constant address 4815
01110000001100111101000000000101 //Set r5 to 829
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
01110000111110010110000000000001 //Set r1 to 3990
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100011000000000100 //Compute r0 OR 35 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001000001010010000000000001 //Set r1 to 4178
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001101000111000101100 //Read at address in rbp with offset -104 to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000111011000000000000000001 //Set r1 to 3776
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001000000000000101 //Compute r0 OR 8 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010010011101001111100001111 //Compute rsp - 1257 and write result to rsp
01110000111110000101000000000001 //Set r1 to 3973
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000100110000000000101 //Compute r0 OR 38 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000010011101001111000010001 //Write value in r1 to address in rbp with offset -1257
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000010011101001111000101100 //Read at address in rbp with offset -1257 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010010111011100 //Jump to constant address 4846
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010010111111100 //Jump to constant address 4862
01110000111011000000000000000001 //Set r1 to 3776
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001000000000000101 //Compute r0 OR 8 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110001000011001110000000000001 //Set r1 to 4302
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010010001101000111000000101 //Compute rbp - 1128 and write result to r5
11100000010011101001111000101100 //Read at address in rbp with offset -1257 to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010011001000100 //Jump to constant address 4898
01110000010011000100000000000001 //Set r1 to 1220
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001101110100000000000101 //Set r5 to 884
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010011000100000000000001 //Set r1 to 1220
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010010001101000111000000101 //Compute rbp - 1128 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010011000100000000000001 //Set r1 to 1220
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001000011100000000000101 //Set r5 to 540
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001000101001111000000000001 //Set r1 to 4431
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010010001100111111000000101 //Compute rbp - 1127 and write result to r5
00001010010011101000111000000100 //Compute rbp - 1256 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001000111000010000000000001 //Set r1 to 4546
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010010011101000111000000101 //Compute rbp - 1256 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010010011111011111100001111 //Compute rsp - 1275 and write result to rsp
01110000000011000000000000000001 //Set r1 to 192
11010000010011101101111000010001 //Write value in r1 to address in rbp with offset -1261
01110000000010101000000000000001 //Set r1 to 168
11010000010011101100111000010001 //Write value in r1 to address in rbp with offset -1260
01110000000000000000000000000001 //Set r1 to 0
11010000010011101011111000010001 //Write value in r1 to address in rbp with offset -1259
01110000000011010101000000000001 //Set r1 to 213
11010000010011101010111000010001 //Write value in r1 to address in rbp with offset -1258
01110000000011000000000000000001 //Set r1 to 192
11010000010011110001111000010001 //Write value in r1 to address in rbp with offset -1265
01110000000010101000000000000001 //Set r1 to 168
11010000010011110000111000010001 //Write value in r1 to address in rbp with offset -1264
01110000000000000000000000000001 //Set r1 to 0
11010000010011101111111000010001 //Write value in r1 to address in rbp with offset -1263
01110000000000000001000000000001 //Set r1 to 1
11010000010011101110111000010001 //Write value in r1 to address in rbp with offset -1262
01110000000011011110000000000001 //Set r1 to 222
11010000010011110111111000010001 //Write value in r1 to address in rbp with offset -1271
01110000000010101101000000000001 //Set r1 to 173
11010000010011110110111000010001 //Write value in r1 to address in rbp with offset -1270
01110000000010111110000000000001 //Set r1 to 190
11010000010011110101111000010001 //Write value in r1 to address in rbp with offset -1269
01110000000011101111000000000001 //Set r1 to 239
11010000010011110100111000010001 //Write value in r1 to address in rbp with offset -1268
01110000000000100100000000000001 //Set r1 to 36
11010000010011110011111000010001 //Write value in r1 to address in rbp with offset -1267
01110000000001100100000000000001 //Set r1 to 100
11010000010011110010111000010001 //Write value in r1 to address in rbp with offset -1266
01110000000011111111000000000001 //Set r1 to 255
11010000010011111011111000010001 //Write value in r1 to address in rbp with offset -1275
01110000000011111111000000000001 //Set r1 to 255
11010000010011111010111000010001 //Write value in r1 to address in rbp with offset -1274
01110000000011111111000000000001 //Set r1 to 255
11010000010011111001111000010001 //Write value in r1 to address in rbp with offset -1273
01110000000000000000000000000001 //Set r1 to 0
11010000010011111000111000010001 //Write value in r1 to address in rbp with offset -1272
01110000110100100110000000000001 //Set r1 to 3366
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010010011101101111000000011 //Compute rbp - 1261 and write result to r3
00001000000000001111000000000101 //Compute r0 OR 15 and write result to r5
00001000000000000100000000000100 //Compute r0 OR 4 and write result to r4
00001000000000000100000000000010 //Compute r0 OR 4 and write result to r2
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010110110111000000000001 //Set r1 to 1463
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001010000000000101 //Compute r0 OR 10 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100100110000000000001 //Set r1 to 3366
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010010011110001111000000011 //Compute rbp - 1265 and write result to r3
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00001000000000000100000000000100 //Compute r0 OR 4 and write result to r4
00001000000000000100000000000010 //Compute r0 OR 4 and write result to r2
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010110110111000000000001 //Set r1 to 1463
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001010000000000101 //Compute r0 OR 10 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100100110000000000001 //Set r1 to 3366
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010010011110111111000000011 //Compute rbp - 1271 and write result to r3
00001000000000001001000000000101 //Compute r0 OR 9 and write result to r5
00001000000000000100000000000100 //Compute r0 OR 4 and write result to r4
00001000000000000110000000000010 //Compute r0 OR 6 and write result to r2
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010110110111000000000001 //Set r1 to 1463
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001010000000000101 //Compute r0 OR 10 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000110100100110000000000001 //Set r1 to 3366
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010010011111011111000000011 //Compute rbp - 1275 and write result to r3
00001000000000000101000000000101 //Compute r0 OR 5 and write result to r5
00001000000000000100000000000100 //Compute r0 OR 4 and write result to r4
00001000000000000100000000000010 //Compute r0 OR 4 and write result to r2
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010110110111000000000001 //Set r1 to 1463
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001010000000000101 //Compute r0 OR 10 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010011101011110 //Jump to constant address 5039
01110000010011000100000000000001 //Set r1 to 1220
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001000010010000000000101 //Set r5 to 530
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010010011111011111100001111 //Compute rsp - 1275 and write result to rsp
01110000111011000000000000000001 //Set r1 to 3776
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000010000000000000101 //Compute r0 OR 16 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000111100000000000000000001 //Set r1 to 3840
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000010000000000101 //Compute r0 OR 2 and write result to r5
00001000000011111111000000000100 //Compute r0 OR 255 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000111100000000000000000001 //Set r1 to 3840
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000000000000000101 //Compute r0 OR 0 and write result to r5
00001000000000000001000000000100 //Compute r0 OR 1 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000111101000111000000000001 //Set r1 to 3911
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000100000000000101 //Compute r0 OR 4 and write result to r5
00001000000001010000000000000100 //Compute r0 OR 80 and write result to r4
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000111011000000000000000001 //Set r1 to 3776
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000001000000000101 //Compute r0 OR 1 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000111011000000000000000001 //Set r1 to 3776
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000010000000000101 //Compute r0 OR 2 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010011111100100 //Jump to constant address 5106
01110000010011000100000000000001 //Set r1 to 1220
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001011111111000000000101 //Set r5 to 767
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010010011111100111100001111 //Compute rsp - 1276 and write result to rsp
01110000110100000010000000000001 //Set r1 to 3330
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000010110110111000000000001 //Set r1 to 1463
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000001100100000000000101 //Compute r0 OR 100 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011101101010000000000001 //Set r1 to 1898
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110000011110111010000000000001 //Set r1 to 1978
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001001100110111000000000001 //Set r1 to 4919
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001001110110101000000000001 //Set r1 to 5045
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010100101011110 //Jump to constant address 5295
01110000111100110110000000000001 //Set r1 to 3894
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000000011000000000101 //Compute r0 OR 3 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
11010000010011111100111000010001 //Write value in r1 to address in rbp with offset -1276
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000010011111100111000101100 //Read at address in rbp with offset -1276 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010100001100110 //Jump to constant address 5171
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010100010010010 //Jump to constant address 5193
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010100010000100 //Jump to constant address 5186
01110000010011000100000000000001 //Set r1 to 1220
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001000111011000000000101 //Set r5 to 571
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001001110110101000000000001 //Set r1 to 5045
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000010100101001110 //Jump to constant address 5287
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000010011111100111000101100 //Read at address in rbp with offset -1276 to r12
01110000000000010111000000001101 //Set r13 to 23
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010100010011110 //Jump to constant address 5199
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010100011010110 //Jump to constant address 5227
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010100010111100 //Jump to constant address 5214
01110000010011000100000000000001 //Set r1 to 1220
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001110001000000000000101 //Set r5 to 904
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001001011011100000000000001 //Set r1 to 4828
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001001110110101000000000001 //Set r1 to 5045
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000010100101001100 //Jump to constant address 5286
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000010011111100111000101100 //Read at address in rbp with offset -1276 to r12
01110000000000010100000000001101 //Set r13 to 20
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010100011100010 //Jump to constant address 5233
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
01110000000000000000000000000011 //Set r3 to 0
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01100000000000000010000011000000 //If r0 == r12, then jump to offset 2
10010000000000000010100011111110 //Jump to constant address 5247
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000010011111100111000101100 //Read at address in rbp with offset -1276 to r12
01110000000000010101000000001101 //Set r13 to 21
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010100011110110 //Jump to constant address 5243
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01100000000000000010000011000000 //If r0 == r12, then jump to offset 2
10010000000000000010100011111110 //Jump to constant address 5247
10010000000000000010100100000000 //Jump to constant address 5248
01110000000000000001000000000011 //Set r3 to 1
01110000000000000000000000000010 //Set r2 to 0
00001010000000000000001100001100 //Compute r3 - 0 and write result to r12
01100000000000000010000011000000 //If r0 == r12, then jump to offset 2
10010000000000000010100100011100 //Jump to constant address 5262
00001000000000000001000000000001 //Compute r0 OR 1 and write result to r1
11100000010011111100111000101100 //Read at address in rbp with offset -1276 to r12
01110000000000010110000000001101 //Set r13 to 22
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010100100010100 //Jump to constant address 5258
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01100000000000000010000011000000 //If r0 == r12, then jump to offset 2
10010000000000000010100100011100 //Jump to constant address 5262
10010000000000000010100100011110 //Jump to constant address 5263
01110000000000000001000000000010 //Set r2 to 1
00001010000000000000001000001100 //Compute r2 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010100100100110 //Jump to constant address 5267
10010000000000000010100101001010 //Jump to constant address 5285
00001000000000000000000000000001 //Compute r0 OR 0 and write result to r1
00001010000000000000000100001100 //Compute r1 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010100100111110 //Jump to constant address 5279
01110000010011000100000000000001 //Set r1 to 1220
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001011101110000000000101 //Set r5 to 750
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
01110001001110110101000000000001 //Set r1 to 5045
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
00000000000000000000000000000000 //NOP to quickfix double labels
00000000000000000000000000000000 //NOP to quickfix double labels
01110000010110110111000000000001 //Set r1 to 1463
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001000000000001010000000000101 //Compute r0 OR 10 and write result to r5
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000000010000 //Jump to reg r1 with offset 0
10010000000000000010100001000010 //Jump to constant address 5153
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010010011111011111100001111 //Compute rsp - 1275 and write result to rsp
01110000000000000000000000000001 //Set r1 to 0
01110000000001001100000100000001 //Set highest 16 bits of r1 to 76
01110000000000000001000000001100 //Set r12 to 1
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010010011111011111100001111 //Compute rsp - 1275 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010010011111011111100001111 //Compute rsp - 1275 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010010011111011111100001111 //Compute rsp - 1275 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110001010100111110000000000001 //Set r1 to 5438
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000010100101101100 //Jump to constant address 5302
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110001010100111110000000000001 //Set r1 to 5438
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000010100110001000 //Jump to constant address 5316
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110001010100111110000000000001 //Set r1 to 5438
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000010100110011100 //Jump to constant address 5326
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110001010100111110000000000001 //Set r1 to 5438
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000010100110110000 //Jump to constant address 5336
11111111111111111111111111111111 //Halt
10100000000000000000000000001111 //Pop from stack to rsp
10100000000000000000000000001110 //Pop from stack to rbp
10100000000000000000000000001101 //Pop from stack to r13
10100000000000000000000000001100 //Pop from stack to r12
10100000000000000000000000001011 //Pop from stack to r11
10100000000000000000000000001010 //Pop from stack to r10
10100000000000000000000000001001 //Pop from stack to r9
10100000000000000000000000001000 //Pop from stack to r8
10100000000000000000000000000111 //Pop from stack to r7
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00010000000000000000000000000000 //Return from interrupt
11111111111111111111111111111111 //Halt
